/*! For license information please see 4839.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunktextWandler=self.webpackChunktextWandler||[]).push([[4839],{44839:(e,t,n)=>{n.r(t),n.d(t,{CompletionAdapter:()=>Wt,DefinitionAdapter:()=>Zt,DiagnosticsAdapter:()=>Vt,DocumentColorAdapter:()=>ln,DocumentFormattingEditProvider:()=>cn,DocumentHighlightAdapter:()=>Gt,DocumentLinkAdapter:()=>sn,DocumentRangeFormattingEditProvider:()=>un,DocumentSymbolAdapter:()=>rn,FoldingRangeAdapter:()=>gn,HoverAdapter:()=>$t,ReferenceAdapter:()=>tn,RenameAdapter:()=>nn,SelectionRangeAdapter:()=>mn,WorkerManager:()=>Nt,fromPosition:()=>Kt,fromRange:()=>Ht,getWorker:()=>Kn,setupMode:()=>Xn,toRange:()=>Xt,toTextEdit:()=>qt});var r,i,o=n(46415),a=Object.defineProperty,s=Object.getOwnPropertyDescriptor,c=Object.getOwnPropertyNames,u=Object.prototype.hasOwnProperty,d=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of c(t))u.call(e,i)||i===n||a(e,i,{get:()=>t[i],enumerable:!(r=s(t,i))||r.enumerable});return e},l={};d(l,r=o,"default"),i&&d(i,r,"default");var g,f,h,m,p,v,b,k,C,_,w,y,x,E,I,A,S,T,L,R,M,F,P,j,D,N,O,U,V,B,W,K,H,X,z,q,$,Q,J,G,Y,Z,ee,te,ne,re,ie,oe,ae,se,ce,ue,de,le,ge,fe,he,me,pe,ve,be,ke,Ce,_e,we,ye,xe,Ee,Ie,Ae,Se,Te,Le,Re,Me,Fe,Pe,je,De,Ne,Oe,Ue,Ve,Be,We,Ke,He,Xe,ze,qe,$e,Qe,Je,Ge,Ye,Ze,et,tt,nt,rt,it,ot,at,st,ct,ut,dt,lt,gt,ft,ht,mt,pt,vt,bt,kt,Ct,_t,wt,yt,xt,Et,It,At,St,Tt,Lt,Rt,Mt,Ft,Pt,jt,Dt,Nt=class{constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){if(!this._worker)return;Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=l.editor.createWebWorker({moduleId:"vs/language/json/jsonWorker",label:this._defaults.languageId,createData:{languageSettings:this._defaults.diagnosticsOptions,languageId:this._defaults.languageId,enableSchemaRequest:this._defaults.diagnosticsOptions.enableSchemaRequest}}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(g||(g={})).is=function(e){return"string"==typeof e},(f||(f={})).is=function(e){return"string"==typeof e},(m=h||(h={})).MIN_VALUE=-2147483648,m.MAX_VALUE=2147483647,m.is=function(e){return"number"==typeof e&&m.MIN_VALUE<=e&&e<=m.MAX_VALUE},(v=p||(p={})).MIN_VALUE=0,v.MAX_VALUE=2147483647,v.is=function(e){return"number"==typeof e&&v.MIN_VALUE<=e&&e<=v.MAX_VALUE},(k=b||(b={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=p.MAX_VALUE),t===Number.MAX_VALUE&&(t=p.MAX_VALUE),{line:e,character:t}},k.is=function(e){let t=e;return Ot.objectLiteral(t)&&Ot.uinteger(t.line)&&Ot.uinteger(t.character)},(_=C||(C={})).create=function(e,t,n,r){if(Ot.uinteger(e)&&Ot.uinteger(t)&&Ot.uinteger(n)&&Ot.uinteger(r))return{start:b.create(e,t),end:b.create(n,r)};if(b.is(e)&&b.is(t))return{start:e,end:t};throw new Error(`Range#create called with invalid arguments[${e}, ${t}, ${n}, ${r}]`)},_.is=function(e){let t=e;return Ot.objectLiteral(t)&&b.is(t.start)&&b.is(t.end)},(y=w||(w={})).create=function(e,t){return{uri:e,range:t}},y.is=function(e){let t=e;return Ot.objectLiteral(t)&&C.is(t.range)&&(Ot.string(t.uri)||Ot.undefined(t.uri))},(E=x||(x={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},E.is=function(e){let t=e;return Ot.objectLiteral(t)&&C.is(t.targetRange)&&Ot.string(t.targetUri)&&C.is(t.targetSelectionRange)&&(C.is(t.originSelectionRange)||Ot.undefined(t.originSelectionRange))},(A=I||(I={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},A.is=function(e){const t=e;return Ot.objectLiteral(t)&&Ot.numberRange(t.red,0,1)&&Ot.numberRange(t.green,0,1)&&Ot.numberRange(t.blue,0,1)&&Ot.numberRange(t.alpha,0,1)},(T=S||(S={})).create=function(e,t){return{range:e,color:t}},T.is=function(e){const t=e;return Ot.objectLiteral(t)&&C.is(t.range)&&I.is(t.color)},(R=L||(L={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},R.is=function(e){const t=e;return Ot.objectLiteral(t)&&Ot.string(t.label)&&(Ot.undefined(t.textEdit)||q.is(t))&&(Ot.undefined(t.additionalTextEdits)||Ot.typedArray(t.additionalTextEdits,q.is))},(F=M||(M={})).Comment="comment",F.Imports="imports",F.Region="region",(j=P||(P={})).create=function(e,t,n,r,i,o){const a={startLine:e,endLine:t};return Ot.defined(n)&&(a.startCharacter=n),Ot.defined(r)&&(a.endCharacter=r),Ot.defined(i)&&(a.kind=i),Ot.defined(o)&&(a.collapsedText=o),a},j.is=function(e){const t=e;return Ot.objectLiteral(t)&&Ot.uinteger(t.startLine)&&Ot.uinteger(t.startLine)&&(Ot.undefined(t.startCharacter)||Ot.uinteger(t.startCharacter))&&(Ot.undefined(t.endCharacter)||Ot.uinteger(t.endCharacter))&&(Ot.undefined(t.kind)||Ot.string(t.kind))},(N=D||(D={})).create=function(e,t){return{location:e,message:t}},N.is=function(e){let t=e;return Ot.defined(t)&&w.is(t.location)&&Ot.string(t.message)},(U=O||(O={})).Error=1,U.Warning=2,U.Information=3,U.Hint=4,(B=V||(V={})).Unnecessary=1,B.Deprecated=2,(W||(W={})).is=function(e){const t=e;return Ot.objectLiteral(t)&&Ot.string(t.href)},(H=K||(K={})).create=function(e,t,n,r,i,o){let a={range:e,message:t};return Ot.defined(n)&&(a.severity=n),Ot.defined(r)&&(a.code=r),Ot.defined(i)&&(a.source=i),Ot.defined(o)&&(a.relatedInformation=o),a},H.is=function(e){var t;let n=e;return Ot.defined(n)&&C.is(n.range)&&Ot.string(n.message)&&(Ot.number(n.severity)||Ot.undefined(n.severity))&&(Ot.integer(n.code)||Ot.string(n.code)||Ot.undefined(n.code))&&(Ot.undefined(n.codeDescription)||Ot.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(Ot.string(n.source)||Ot.undefined(n.source))&&(Ot.undefined(n.relatedInformation)||Ot.typedArray(n.relatedInformation,D.is))},(z=X||(X={})).create=function(e,t,...n){let r={title:e,command:t};return Ot.defined(n)&&n.length>0&&(r.arguments=n),r},z.is=function(e){let t=e;return Ot.defined(t)&&Ot.string(t.title)&&Ot.string(t.command)},($=q||(q={})).replace=function(e,t){return{range:e,newText:t}},$.insert=function(e,t){return{range:{start:e,end:e},newText:t}},$.del=function(e){return{range:e,newText:""}},$.is=function(e){const t=e;return Ot.objectLiteral(t)&&Ot.string(t.newText)&&C.is(t.range)},(J=Q||(Q={})).create=function(e,t,n){const r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},J.is=function(e){const t=e;return Ot.objectLiteral(t)&&Ot.string(t.label)&&(Ot.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(Ot.string(t.description)||void 0===t.description)},(G||(G={})).is=function(e){const t=e;return Ot.string(t)},(Z=Y||(Y={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},Z.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},Z.del=function(e,t){return{range:e,newText:"",annotationId:t}},Z.is=function(e){const t=e;return q.is(t)&&(Q.is(t.annotationId)||G.is(t.annotationId))},(te=ee||(ee={})).create=function(e,t){return{textDocument:e,edits:t}},te.is=function(e){let t=e;return Ot.defined(t)&&fe.is(t.textDocument)&&Array.isArray(t.edits)},(re=ne||(ne={})).create=function(e,t,n){let r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},re.is=function(e){let t=e;return t&&"create"===t.kind&&Ot.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||Ot.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Ot.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||G.is(t.annotationId))},(oe=ie||(ie={})).create=function(e,t,n,r){let i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},oe.is=function(e){let t=e;return t&&"rename"===t.kind&&Ot.string(t.oldUri)&&Ot.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||Ot.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Ot.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||G.is(t.annotationId))},(se=ae||(ae={})).create=function(e,t,n){let r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},se.is=function(e){let t=e;return t&&"delete"===t.kind&&Ot.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||Ot.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||Ot.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||G.is(t.annotationId))},(ce||(ce={})).is=function(e){let t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((e=>Ot.string(e.kind)?ne.is(e)||ie.is(e)||ae.is(e):ee.is(e))))},(de=ue||(ue={})).create=function(e){return{uri:e}},de.is=function(e){let t=e;return Ot.defined(t)&&Ot.string(t.uri)},(ge=le||(le={})).create=function(e,t){return{uri:e,version:t}},ge.is=function(e){let t=e;return Ot.defined(t)&&Ot.string(t.uri)&&Ot.integer(t.version)},(he=fe||(fe={})).create=function(e,t){return{uri:e,version:t}},he.is=function(e){let t=e;return Ot.defined(t)&&Ot.string(t.uri)&&(null===t.version||Ot.integer(t.version))},(pe=me||(me={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},pe.is=function(e){let t=e;return Ot.defined(t)&&Ot.string(t.uri)&&Ot.string(t.languageId)&&Ot.integer(t.version)&&Ot.string(t.text)},(be=ve||(ve={})).PlainText="plaintext",be.Markdown="markdown",be.is=function(e){const t=e;return t===be.PlainText||t===be.Markdown},(ke||(ke={})).is=function(e){const t=e;return Ot.objectLiteral(e)&&ve.is(t.kind)&&Ot.string(t.value)},(_e=Ce||(Ce={})).Text=1,_e.Method=2,_e.Function=3,_e.Constructor=4,_e.Field=5,_e.Variable=6,_e.Class=7,_e.Interface=8,_e.Module=9,_e.Property=10,_e.Unit=11,_e.Value=12,_e.Enum=13,_e.Keyword=14,_e.Snippet=15,_e.Color=16,_e.File=17,_e.Reference=18,_e.Folder=19,_e.EnumMember=20,_e.Constant=21,_e.Struct=22,_e.Event=23,_e.Operator=24,_e.TypeParameter=25,(ye=we||(we={})).PlainText=1,ye.Snippet=2,(xe||(xe={})).Deprecated=1,(Ie=Ee||(Ee={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},Ie.is=function(e){const t=e;return t&&Ot.string(t.newText)&&C.is(t.insert)&&C.is(t.replace)},(Se=Ae||(Ae={})).asIs=1,Se.adjustIndentation=2,(Te||(Te={})).is=function(e){const t=e;return t&&(Ot.string(t.detail)||void 0===t.detail)&&(Ot.string(t.description)||void 0===t.description)},(Le||(Le={})).create=function(e){return{label:e}},(Re||(Re={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Fe=Me||(Me={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Fe.is=function(e){const t=e;return Ot.string(t)||Ot.objectLiteral(t)&&Ot.string(t.language)&&Ot.string(t.value)},(Pe||(Pe={})).is=function(e){let t=e;return!!t&&Ot.objectLiteral(t)&&(ke.is(t.contents)||Me.is(t.contents)||Ot.typedArray(t.contents,Me.is))&&(void 0===e.range||C.is(e.range))},(je||(je={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(De||(De={})).create=function(e,t,...n){let r={label:e};return Ot.defined(t)&&(r.documentation=t),Ot.defined(n)?r.parameters=n:r.parameters=[],r},(Oe=Ne||(Ne={})).Text=1,Oe.Read=2,Oe.Write=3,(Ue||(Ue={})).create=function(e,t){let n={range:e};return Ot.number(t)&&(n.kind=t),n},(Be=Ve||(Ve={})).File=1,Be.Module=2,Be.Namespace=3,Be.Package=4,Be.Class=5,Be.Method=6,Be.Property=7,Be.Field=8,Be.Constructor=9,Be.Enum=10,Be.Interface=11,Be.Function=12,Be.Variable=13,Be.Constant=14,Be.String=15,Be.Number=16,Be.Boolean=17,Be.Array=18,Be.Object=19,Be.Key=20,Be.Null=21,Be.EnumMember=22,Be.Struct=23,Be.Event=24,Be.Operator=25,Be.TypeParameter=26,(We||(We={})).Deprecated=1,(Ke||(Ke={})).create=function(e,t,n,r,i){let o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(He||(He={})).create=function(e,t,n,r){return void 0!==r?{name:e,kind:t,location:{uri:n,range:r}}:{name:e,kind:t,location:{uri:n}}},(ze=Xe||(Xe={})).create=function(e,t,n,r,i,o){let a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},ze.is=function(e){let t=e;return t&&Ot.string(t.name)&&Ot.number(t.kind)&&C.is(t.range)&&C.is(t.selectionRange)&&(void 0===t.detail||Ot.string(t.detail))&&(void 0===t.deprecated||Ot.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},($e=qe||(qe={})).Empty="",$e.QuickFix="quickfix",$e.Refactor="refactor",$e.RefactorExtract="refactor.extract",$e.RefactorInline="refactor.inline",$e.RefactorRewrite="refactor.rewrite",$e.Source="source",$e.SourceOrganizeImports="source.organizeImports",$e.SourceFixAll="source.fixAll",(Je=Qe||(Qe={})).Invoked=1,Je.Automatic=2,(Ye=Ge||(Ge={})).create=function(e,t,n){let r={diagnostics:e};return null!=t&&(r.only=t),null!=n&&(r.triggerKind=n),r},Ye.is=function(e){let t=e;return Ot.defined(t)&&Ot.typedArray(t.diagnostics,K.is)&&(void 0===t.only||Ot.typedArray(t.only,Ot.string))&&(void 0===t.triggerKind||t.triggerKind===Qe.Invoked||t.triggerKind===Qe.Automatic)},(et=Ze||(Ze={})).create=function(e,t,n){let r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):X.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},et.is=function(e){let t=e;return t&&Ot.string(t.title)&&(void 0===t.diagnostics||Ot.typedArray(t.diagnostics,K.is))&&(void 0===t.kind||Ot.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||X.is(t.command))&&(void 0===t.isPreferred||Ot.boolean(t.isPreferred))&&(void 0===t.edit||ce.is(t.edit))},(nt=tt||(tt={})).create=function(e,t){let n={range:e};return Ot.defined(t)&&(n.data=t),n},nt.is=function(e){let t=e;return Ot.defined(t)&&C.is(t.range)&&(Ot.undefined(t.command)||X.is(t.command))},(it=rt||(rt={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},it.is=function(e){let t=e;return Ot.defined(t)&&Ot.uinteger(t.tabSize)&&Ot.boolean(t.insertSpaces)},(at=ot||(ot={})).create=function(e,t,n){return{range:e,target:t,data:n}},at.is=function(e){let t=e;return Ot.defined(t)&&C.is(t.range)&&(Ot.undefined(t.target)||Ot.string(t.target))},(ct=st||(st={})).create=function(e,t){return{range:e,parent:t}},ct.is=function(e){let t=e;return Ot.objectLiteral(t)&&C.is(t.range)&&(void 0===t.parent||ct.is(t.parent))},(dt=ut||(ut={})).namespace="namespace",dt.type="type",dt.class="class",dt.enum="enum",dt.interface="interface",dt.struct="struct",dt.typeParameter="typeParameter",dt.parameter="parameter",dt.variable="variable",dt.property="property",dt.enumMember="enumMember",dt.event="event",dt.function="function",dt.method="method",dt.macro="macro",dt.keyword="keyword",dt.modifier="modifier",dt.comment="comment",dt.string="string",dt.number="number",dt.regexp="regexp",dt.operator="operator",dt.decorator="decorator",(gt=lt||(lt={})).declaration="declaration",gt.definition="definition",gt.readonly="readonly",gt.static="static",gt.deprecated="deprecated",gt.abstract="abstract",gt.async="async",gt.modification="modification",gt.documentation="documentation",gt.defaultLibrary="defaultLibrary",(ft||(ft={})).is=function(e){const t=e;return Ot.objectLiteral(t)&&(void 0===t.resultId||"string"==typeof t.resultId)&&Array.isArray(t.data)&&(0===t.data.length||"number"==typeof t.data[0])},(mt=ht||(ht={})).create=function(e,t){return{range:e,text:t}},mt.is=function(e){const t=e;return null!=t&&C.is(t.range)&&Ot.string(t.text)},(vt=pt||(pt={})).create=function(e,t,n){return{range:e,variableName:t,caseSensitiveLookup:n}},vt.is=function(e){const t=e;return null!=t&&C.is(t.range)&&Ot.boolean(t.caseSensitiveLookup)&&(Ot.string(t.variableName)||void 0===t.variableName)},(kt=bt||(bt={})).create=function(e,t){return{range:e,expression:t}},kt.is=function(e){const t=e;return null!=t&&C.is(t.range)&&(Ot.string(t.expression)||void 0===t.expression)},(_t=Ct||(Ct={})).create=function(e,t){return{frameId:e,stoppedLocation:t}},_t.is=function(e){const t=e;return Ot.defined(t)&&C.is(e.stoppedLocation)},(yt=wt||(wt={})).Type=1,yt.Parameter=2,yt.is=function(e){return 1===e||2===e},(Et=xt||(xt={})).create=function(e){return{value:e}},Et.is=function(e){const t=e;return Ot.objectLiteral(t)&&(void 0===t.tooltip||Ot.string(t.tooltip)||ke.is(t.tooltip))&&(void 0===t.location||w.is(t.location))&&(void 0===t.command||X.is(t.command))},(At=It||(It={})).create=function(e,t,n){const r={position:e,label:t};return void 0!==n&&(r.kind=n),r},At.is=function(e){const t=e;return Ot.objectLiteral(t)&&b.is(t.position)&&(Ot.string(t.label)||Ot.typedArray(t.label,xt.is))&&(void 0===t.kind||wt.is(t.kind))&&void 0===t.textEdits||Ot.typedArray(t.textEdits,q.is)&&(void 0===t.tooltip||Ot.string(t.tooltip)||ke.is(t.tooltip))&&(void 0===t.paddingLeft||Ot.boolean(t.paddingLeft))&&(void 0===t.paddingRight||Ot.boolean(t.paddingRight))},(St||(St={})).createSnippet=function(e){return{kind:"snippet",value:e}},(Tt||(Tt={})).create=function(e,t,n,r){return{insertText:e,filterText:t,range:n,command:r}},(Lt||(Lt={})).create=function(e){return{items:e}},(Mt=Rt||(Rt={})).Invoked=0,Mt.Automatic=1,(Ft||(Ft={})).create=function(e,t){return{range:e,text:t}},(Pt||(Pt={})).create=function(e,t){return{triggerKind:e,selectedCompletionInfo:t}},(jt||(jt={})).is=function(e){const t=e;return Ot.objectLiteral(t)&&f.is(t.uri)&&Ot.string(t.name)},function(e){function t(e,n){if(e.length<=1)return e;const r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);let a=0,s=0,c=0;for(;a<i.length&&s<o.length;){let t=n(i[a],o[s]);e[c++]=t<=0?i[a++]:o[s++]}for(;a<i.length;)e[c++]=i[a++];for(;s<o.length;)e[c++]=o[s++];return e}e.create=function(e,t,n,r){return new Ut(e,t,n,r)},e.is=function(e){let t=e;return!!(Ot.defined(t)&&Ot.string(t.uri)&&(Ot.undefined(t.languageId)||Ot.string(t.languageId))&&Ot.uinteger(t.lineCount)&&Ot.func(t.getText)&&Ot.func(t.positionAt)&&Ot.func(t.offsetAt))},e.applyEdits=function(e,n){let r=e.getText(),i=t(n,((e,t)=>{let n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length;for(let t=i.length-1;t>=0;t--){let n=i[t],a=e.offsetAt(n.range.start),s=e.offsetAt(n.range.end);if(!(s<=o))throw new Error("Overlapping edit");r=r.substring(0,a)+n.newText+r.substring(s,r.length),o=a}return r}}(Dt||(Dt={}));var Ot,Ut=class{constructor(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}get uri(){return this._uri}get languageId(){return this._languageId}get version(){return this._version}getText(e){if(e){let t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content}update(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0}getLineOffsets(){if(void 0===this._lineOffsets){let e=[],t=this._content,n=!0;for(let r=0;r<t.length;r++){n&&(e.push(r),n=!1);let i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets}positionAt(e){e=Math.max(Math.min(e,this._content.length),0);let t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return b.create(0,e);for(;n<r;){let i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}let i=n-1;return b.create(i,e-t[i])}offsetAt(e){let t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;let n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)}get lineCount(){return this.getLineOffsets().length}};!function(e){const t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.numberRange=function(e,n,r){return"[object Number]"===t.call(e)&&n<=e&&e<=r},e.integer=function(e){return"[object Number]"===t.call(e)&&-2147483648<=e&&e<=2147483647},e.uinteger=function(e){return"[object Number]"===t.call(e)&&0<=e&&e<=2147483647},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(Ot||(Ot={}));var Vt=class{constructor(e,t,n){this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);const r=e=>{let t,n=e.getLanguageId();n===this._languageId&&(this._listener[e.uri.toString()]=e.onDidChangeContent((()=>{window.clearTimeout(t),t=window.setTimeout((()=>this._doValidate(e.uri,n)),500)})),this._doValidate(e.uri,n))},i=e=>{l.editor.setModelMarkers(e,this._languageId,[]);let t=e.uri.toString(),n=this._listener[t];n&&(n.dispose(),delete this._listener[t])};this._disposables.push(l.editor.onDidCreateModel(r)),this._disposables.push(l.editor.onWillDisposeModel(i)),this._disposables.push(l.editor.onDidChangeModelLanguage((e=>{i(e.model),r(e.model)}))),this._disposables.push(n((e=>{l.editor.getModels().forEach((e=>{e.getLanguageId()===this._languageId&&(i(e),r(e))}))}))),this._disposables.push({dispose:()=>{l.editor.getModels().forEach(i);for(let e in this._listener)this._listener[e].dispose()}}),l.editor.getModels().forEach(r)}dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables.length=0}_doValidate(e,t){this._worker(e).then((t=>t.doValidation(e.toString()))).then((n=>{const r=n.map((e=>function(e,t){let n="number"==typeof t.code?String(t.code):t.code;return{severity:Bt(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)));let i=l.editor.getModel(e);i&&i.getLanguageId()===t&&l.editor.setModelMarkers(i,t,r)})).then(void 0,(e=>{console.error(e)}))}};function Bt(e){switch(e){case O.Error:return l.MarkerSeverity.Error;case O.Warning:return l.MarkerSeverity.Warning;case O.Information:return l.MarkerSeverity.Info;case O.Hint:return l.MarkerSeverity.Hint;default:return l.MarkerSeverity.Info}}var Wt=class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),Kt(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new l.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:zt(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:Xt(e.textEdit.insert),replace:Xt(e.textEdit.replace)}:t.range=Xt(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(qt)),e.insertTextFormat===we.Snippet&&(t.insertTextRules=l.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}};function Kt(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function Ht(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function Xt(e){if(e)return new l.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function zt(e){const t=l.languages.CompletionItemKind;switch(e){case Ce.Text:return t.Text;case Ce.Method:return t.Method;case Ce.Function:return t.Function;case Ce.Constructor:return t.Constructor;case Ce.Field:return t.Field;case Ce.Variable:return t.Variable;case Ce.Class:return t.Class;case Ce.Interface:return t.Interface;case Ce.Module:return t.Module;case Ce.Property:return t.Property;case Ce.Unit:return t.Unit;case Ce.Value:return t.Value;case Ce.Enum:return t.Enum;case Ce.Keyword:return t.Keyword;case Ce.Snippet:return t.Snippet;case Ce.Color:return t.Color;case Ce.File:return t.File;case Ce.Reference:return t.Reference}return t.Property}function qt(e){if(e)return{range:Xt(e.range),text:e.newText}}var $t=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),Kt(t)))).then((e=>{if(e)return{range:Xt(e.range),contents:Jt(e.contents)}}))}};function Qt(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function Jt(e){if(e)return Array.isArray(e)?e.map(Qt):[Qt(e)]}var Gt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),Kt(t)))).then((e=>{if(e)return e.map((e=>({range:Xt(e.range),kind:Yt(e.kind)})))}))}};function Yt(e){switch(e){case Ne.Read:return l.languages.DocumentHighlightKind.Read;case Ne.Write:return l.languages.DocumentHighlightKind.Write;case Ne.Text:return l.languages.DocumentHighlightKind.Text}return l.languages.DocumentHighlightKind.Text}var Zt=class{constructor(e){this._worker=e}provideDefinition(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDefinition(r.toString(),Kt(t)))).then((e=>{if(e)return[en(e)]}))}};function en(e){return{uri:l.Uri.parse(e.uri),range:Xt(e.range)}}var tn=class{constructor(e){this._worker=e}provideReferences(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.findReferences(i.toString(),Kt(t)))).then((e=>{if(e)return e.map(en)}))}},nn=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),Kt(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=l.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,versionId:void 0,textEdit:{range:Xt(i.range),text:i.newText}})}return{edits:t}}(e)))}};var rn=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>"children"in e?on(e):{name:e.name,detail:"",containerName:e.containerName,kind:an(e.kind),range:Xt(e.location.range),selectionRange:Xt(e.location.range),tags:[]}))}))}};function on(e){return{name:e.name,detail:e.detail??"",kind:an(e.kind),range:Xt(e.range),selectionRange:Xt(e.selectionRange),tags:e.tags??[],children:(e.children??[]).map((e=>on(e)))}}function an(e){let t=l.languages.SymbolKind;switch(e){case Ve.File:return t.File;case Ve.Module:return t.Module;case Ve.Namespace:return t.Namespace;case Ve.Package:return t.Package;case Ve.Class:return t.Class;case Ve.Method:return t.Method;case Ve.Property:return t.Property;case Ve.Field:return t.Field;case Ve.Constructor:return t.Constructor;case Ve.Enum:return t.Enum;case Ve.Interface:return t.Interface;case Ve.Function:return t.Function;case Ve.Variable:return t.Variable;case Ve.Constant:return t.Constant;case Ve.String:return t.String;case Ve.Number:return t.Number;case Ve.Boolean:return t.Boolean;case Ve.Array:return t.Array}return t.Function}var sn=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:Xt(e.range),url:e.target})))}}))}},cn=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,dn(t)).then((e=>{if(e&&0!==e.length)return e.map(qt)}))))}},un=class{constructor(e){this._worker=e,this.canFormatMultipleRanges=!1}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),Ht(t),dn(n)).then((e=>{if(e&&0!==e.length)return e.map(qt)}))))}};function dn(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var ln=class{constructor(e){this._worker=e}provideDocumentColors(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentColors(n.toString()))).then((e=>{if(e)return e.map((e=>({color:e.color,range:Xt(e.range)})))}))}provideColorPresentations(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getColorPresentations(r.toString(),t.color,Ht(t.range)))).then((e=>{if(e)return e.map((e=>{let t={label:e.label};return e.textEdit&&(t.textEdit=qt(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(qt)),t}))}))}},gn=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case M.Comment:return l.languages.FoldingRangeKind.Comment;case M.Imports:return l.languages.FoldingRangeKind.Imports;case M.Region:return l.languages.FoldingRangeKind.Region}return}(e.kind)),t}))}))}};var fn,hn,mn=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(Kt)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:Xt(e.range)}),e=e.parent;return t}))}))}};function pn(e){return 32===e||9===e}function vn(e){return 10===e||13===e}function bn(e){return e>=48&&e<=57}(hn=fn||(fn={}))[hn.lineFeed=10]="lineFeed",hn[hn.carriageReturn=13]="carriageReturn",hn[hn.space=32]="space",hn[hn._0=48]="_0",hn[hn._1=49]="_1",hn[hn._2=50]="_2",hn[hn._3=51]="_3",hn[hn._4=52]="_4",hn[hn._5=53]="_5",hn[hn._6=54]="_6",hn[hn._7=55]="_7",hn[hn._8=56]="_8",hn[hn._9=57]="_9",hn[hn.a=97]="a",hn[hn.b=98]="b",hn[hn.c=99]="c",hn[hn.d=100]="d",hn[hn.e=101]="e",hn[hn.f=102]="f",hn[hn.g=103]="g",hn[hn.h=104]="h",hn[hn.i=105]="i",hn[hn.j=106]="j",hn[hn.k=107]="k",hn[hn.l=108]="l",hn[hn.m=109]="m",hn[hn.n=110]="n",hn[hn.o=111]="o",hn[hn.p=112]="p",hn[hn.q=113]="q",hn[hn.r=114]="r",hn[hn.s=115]="s",hn[hn.t=116]="t",hn[hn.u=117]="u",hn[hn.v=118]="v",hn[hn.w=119]="w",hn[hn.x=120]="x",hn[hn.y=121]="y",hn[hn.z=122]="z",hn[hn.A=65]="A",hn[hn.B=66]="B",hn[hn.C=67]="C",hn[hn.D=68]="D",hn[hn.E=69]="E",hn[hn.F=70]="F",hn[hn.G=71]="G",hn[hn.H=72]="H",hn[hn.I=73]="I",hn[hn.J=74]="J",hn[hn.K=75]="K",hn[hn.L=76]="L",hn[hn.M=77]="M",hn[hn.N=78]="N",hn[hn.O=79]="O",hn[hn.P=80]="P",hn[hn.Q=81]="Q",hn[hn.R=82]="R",hn[hn.S=83]="S",hn[hn.T=84]="T",hn[hn.U=85]="U",hn[hn.V=86]="V",hn[hn.W=87]="W",hn[hn.X=88]="X",hn[hn.Y=89]="Y",hn[hn.Z=90]="Z",hn[hn.asterisk=42]="asterisk",hn[hn.backslash=92]="backslash",hn[hn.closeBrace=125]="closeBrace",hn[hn.closeBracket=93]="closeBracket",hn[hn.colon=58]="colon",hn[hn.comma=44]="comma",hn[hn.dot=46]="dot",hn[hn.doubleQuote=34]="doubleQuote",hn[hn.minus=45]="minus",hn[hn.openBrace=123]="openBrace",hn[hn.openBracket=91]="openBracket",hn[hn.plus=43]="plus",hn[hn.slash=47]="slash",hn[hn.formFeed=12]="formFeed",hn[hn.tab=9]="tab";new Array(20).fill(0).map(((e,t)=>" ".repeat(t)));var kn,Cn=200;new Array(Cn).fill(0).map(((e,t)=>"\n"+" ".repeat(t))),new Array(Cn).fill(0).map(((e,t)=>"\r"+" ".repeat(t))),new Array(Cn).fill(0).map(((e,t)=>"\r\n"+" ".repeat(t))),new Array(Cn).fill(0).map(((e,t)=>"\n"+"\t".repeat(t))),new Array(Cn).fill(0).map(((e,t)=>"\r"+"\t".repeat(t))),new Array(Cn).fill(0).map(((e,t)=>"\r\n"+"\t".repeat(t)));(kn||(kn={})).DEFAULT={allowTrailingComma:!1};var _n,wn,yn,xn,En,In,An=function(e,t=!1){const n=e.length;let r=0,i="",o=0,a=16,s=0,c=0,u=0,d=0,l=0;function g(t,n){let i=0,o=0;for(;i<t||!n;){let t=e.charCodeAt(r);if(t>=48&&t<=57)o=16*o+t-48;else if(t>=65&&t<=70)o=16*o+t-65+10;else{if(!(t>=97&&t<=102))break;o=16*o+t-97+10}r++,i++}return i<t&&(o=-1),o}function f(){if(i="",l=0,o=r,c=s,d=u,r>=n)return o=n,a=17;let t=e.charCodeAt(r);if(pn(t)){do{r++,i+=String.fromCharCode(t),t=e.charCodeAt(r)}while(pn(t));return a=15}if(vn(t))return r++,i+=String.fromCharCode(t),13===t&&10===e.charCodeAt(r)&&(r++,i+="\n"),s++,u=r,a=14;switch(t){case 123:return r++,a=1;case 125:return r++,a=2;case 91:return r++,a=3;case 93:return r++,a=4;case 58:return r++,a=6;case 44:return r++,a=5;case 34:return r++,i=function(){let t="",i=r;for(;;){if(r>=n){t+=e.substring(i,r),l=2;break}const o=e.charCodeAt(r);if(34===o){t+=e.substring(i,r),r++;break}if(92!==o){if(o>=0&&o<=31){if(vn(o)){t+=e.substring(i,r),l=2;break}l=6}r++}else{if(t+=e.substring(i,r),r++,r>=n){l=2;break}switch(e.charCodeAt(r++)){case 34:t+='"';break;case 92:t+="\\";break;case 47:t+="/";break;case 98:t+="\b";break;case 102:t+="\f";break;case 110:t+="\n";break;case 114:t+="\r";break;case 116:t+="\t";break;case 117:const e=g(4,!0);e>=0?t+=String.fromCharCode(e):l=4;break;default:l=5}i=r}}return t}(),a=10;case 47:const c=r-1;if(47===e.charCodeAt(r+1)){for(r+=2;r<n&&!vn(e.charCodeAt(r));)r++;return i=e.substring(c,r),a=12}if(42===e.charCodeAt(r+1)){r+=2;const t=n-1;let o=!1;for(;r<t;){const t=e.charCodeAt(r);if(42===t&&47===e.charCodeAt(r+1)){r+=2,o=!0;break}r++,vn(t)&&(13===t&&10===e.charCodeAt(r)&&r++,s++,u=r)}return o||(r++,l=1),i=e.substring(c,r),a=13}return i+=String.fromCharCode(t),r++,a=16;case 45:if(i+=String.fromCharCode(t),r++,r===n||!bn(e.charCodeAt(r)))return a=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return i+=function(){let t=r;if(48===e.charCodeAt(r))r++;else for(r++;r<e.length&&bn(e.charCodeAt(r));)r++;if(r<e.length&&46===e.charCodeAt(r)){if(r++,!(r<e.length&&bn(e.charCodeAt(r))))return l=3,e.substring(t,r);for(r++;r<e.length&&bn(e.charCodeAt(r));)r++}let n=r;if(r<e.length&&(69===e.charCodeAt(r)||101===e.charCodeAt(r)))if(r++,(r<e.length&&43===e.charCodeAt(r)||45===e.charCodeAt(r))&&r++,r<e.length&&bn(e.charCodeAt(r))){for(r++;r<e.length&&bn(e.charCodeAt(r));)r++;n=r}else l=3;return e.substring(t,n)}(),a=11;default:for(;r<n&&h(t);)r++,t=e.charCodeAt(r);if(o!==r){switch(i=e.substring(o,r),i){case"true":return a=8;case"false":return a=9;case"null":return a=7}return a=16}return i+=String.fromCharCode(t),r++,a=16}}function h(e){if(pn(e)||vn(e))return!1;switch(e){case 125:case 93:case 123:case 91:case 34:case 58:case 44:case 47:return!1}return!0}return{setPosition:function(e){r=e,i="",o=0,a=16,l=0},getPosition:()=>r,scan:t?function(){let e;do{e=f()}while(e>=12&&e<=15);return e}:f,getToken:()=>a,getTokenValue:()=>i,getTokenOffset:()=>o,getTokenLength:()=>r-o,getTokenStartLine:()=>c,getTokenStartCharacter:()=>o-d,getTokenError:()=>l}};function Sn(e){return{getInitialState:()=>new Wn(null,null,!1,null),tokenize:(t,n)=>function(e,t,n,r=0){let i=0,o=!1;switch(n.scanError){case 2:t='"'+t,i=1;break;case 1:t="/*"+t,i=2}const a=An(t);let s=n.lastWasColon,c=n.parents;const u={tokens:[],endState:n.clone()};for(;;){let d=r+a.getPosition(),l="";const g=a.scan();if(17===g)break;if(d===r+a.getPosition())throw new Error("Scanner did not advance, next 3 characters are: "+t.substr(a.getPosition(),3));switch(o&&(d-=i),o=i>0,g){case 1:c=Bn.push(c,0),l=Ln,s=!1;break;case 2:c=Bn.pop(c),l=Ln,s=!1;break;case 3:c=Bn.push(c,1),l=Rn,s=!1;break;case 4:c=Bn.pop(c),l=Rn,s=!1;break;case 6:l=Mn,s=!0;break;case 5:l=Fn,s=!1;break;case 8:case 9:l=Pn,s=!1;break;case 7:l=jn,s=!1;break;case 10:const e=c?c.type:0;l=s||1===e?Dn:On,s=!1;break;case 11:l=Nn,s=!1}if(e)switch(g){case 12:l=Vn;break;case 13:l=Un}u.endState=new Wn(n.getStateData(),a.getTokenError(),s,c),u.tokens.push({startIndex:d,scopes:l})}return u}(e,t,n)}}(wn=_n||(_n={}))[wn.None=0]="None",wn[wn.UnexpectedEndOfComment=1]="UnexpectedEndOfComment",wn[wn.UnexpectedEndOfString=2]="UnexpectedEndOfString",wn[wn.UnexpectedEndOfNumber=3]="UnexpectedEndOfNumber",wn[wn.InvalidUnicode=4]="InvalidUnicode",wn[wn.InvalidEscapeCharacter=5]="InvalidEscapeCharacter",wn[wn.InvalidCharacter=6]="InvalidCharacter",(xn=yn||(yn={}))[xn.OpenBraceToken=1]="OpenBraceToken",xn[xn.CloseBraceToken=2]="CloseBraceToken",xn[xn.OpenBracketToken=3]="OpenBracketToken",xn[xn.CloseBracketToken=4]="CloseBracketToken",xn[xn.CommaToken=5]="CommaToken",xn[xn.ColonToken=6]="ColonToken",xn[xn.NullKeyword=7]="NullKeyword",xn[xn.TrueKeyword=8]="TrueKeyword",xn[xn.FalseKeyword=9]="FalseKeyword",xn[xn.StringLiteral=10]="StringLiteral",xn[xn.NumericLiteral=11]="NumericLiteral",xn[xn.LineCommentTrivia=12]="LineCommentTrivia",xn[xn.BlockCommentTrivia=13]="BlockCommentTrivia",xn[xn.LineBreakTrivia=14]="LineBreakTrivia",xn[xn.Trivia=15]="Trivia",xn[xn.Unknown=16]="Unknown",xn[xn.EOF=17]="EOF",(In=En||(En={}))[In.InvalidSymbol=1]="InvalidSymbol",In[In.InvalidNumberFormat=2]="InvalidNumberFormat",In[In.PropertyNameExpected=3]="PropertyNameExpected",In[In.ValueExpected=4]="ValueExpected",In[In.ColonExpected=5]="ColonExpected",In[In.CommaExpected=6]="CommaExpected",In[In.CloseBraceExpected=7]="CloseBraceExpected",In[In.CloseBracketExpected=8]="CloseBracketExpected",In[In.EndOfFileExpected=9]="EndOfFileExpected",In[In.InvalidCommentToken=10]="InvalidCommentToken",In[In.UnexpectedEndOfComment=11]="UnexpectedEndOfComment",In[In.UnexpectedEndOfString=12]="UnexpectedEndOfString",In[In.UnexpectedEndOfNumber=13]="UnexpectedEndOfNumber",In[In.InvalidUnicode=14]="InvalidUnicode",In[In.InvalidEscapeCharacter=15]="InvalidEscapeCharacter",In[In.InvalidCharacter=16]="InvalidCharacter";var Tn,Ln="delimiter.bracket.json",Rn="delimiter.array.json",Mn="delimiter.colon.json",Fn="delimiter.comma.json",Pn="keyword.json",jn="keyword.json",Dn="string.value.json",Nn="number.json",On="string.key.json",Un="comment.block.json",Vn="comment.line.json",Bn=class e{constructor(e,t){this.parent=e,this.type=t}static pop(e){return e?e.parent:null}static push(t,n){return new e(t,n)}static equals(e,t){if(!e&&!t)return!0;if(!e||!t)return!1;for(;e&&t;){if(e===t)return!0;if(e.type!==t.type)return!1;e=e.parent,t=t.parent}return!0}},Wn=class e{constructor(e,t,n,r){this._state=e,this.scanError=t,this.lastWasColon=n,this.parents=r}clone(){return new e(this._state,this.scanError,this.lastWasColon,this.parents)}equals(t){return t===this||!!(t&&t instanceof e)&&(this.scanError===t.scanError&&this.lastWasColon===t.lastWasColon&&Bn.equals(this.parents,t.parents))}getStateData(){return this._state}setStateData(e){this._state=e}};function Kn(){return new Promise(((e,t)=>{if(!Tn)return t("JSON not registered!");e(Tn)}))}var Hn=class extends Vt{constructor(e,t,n){super(e,t,n.onDidChange),this._disposables.push(l.editor.onWillDisposeModel((e=>{this._resetSchema(e.uri)}))),this._disposables.push(l.editor.onDidChangeModelLanguage((e=>{this._resetSchema(e.model.uri)})))}_resetSchema(e){this._worker().then((t=>{t.resetSchema(e.toString())}))}};function Xn(e){const t=[],n=[],r=new Nt(e);function i(){const{languageId:t,modeConfiguration:r}=e;qn(n),r.documentFormattingEdits&&n.push(l.languages.registerDocumentFormattingEditProvider(t,new cn(Tn))),r.documentRangeFormattingEdits&&n.push(l.languages.registerDocumentRangeFormattingEditProvider(t,new un(Tn))),r.completionItems&&n.push(l.languages.registerCompletionItemProvider(t,new Wt(Tn,[" ",":",'"']))),r.hovers&&n.push(l.languages.registerHoverProvider(t,new $t(Tn))),r.documentSymbols&&n.push(l.languages.registerDocumentSymbolProvider(t,new rn(Tn))),r.tokens&&n.push(l.languages.setTokensProvider(t,Sn(!0))),r.colors&&n.push(l.languages.registerColorProvider(t,new ln(Tn))),r.foldingRanges&&n.push(l.languages.registerFoldingRangeProvider(t,new gn(Tn))),r.diagnostics&&n.push(new Hn(t,Tn,e)),r.selectionRanges&&n.push(l.languages.registerSelectionRangeProvider(t,new mn(Tn)))}t.push(r),Tn=(...e)=>r.getLanguageServiceWorker(...e),i(),t.push(l.languages.setLanguageConfiguration(e.languageId,$n));let o=e.modeConfiguration;return e.onDidChange((e=>{e.modeConfiguration!==o&&(o=e.modeConfiguration,i())})),t.push(zn(n)),zn(t)}function zn(e){return{dispose:()=>qn(e)}}function qn(e){for(;e.length;)e.pop().dispose()}var $n={wordPattern:/(-?\d*\.\d\w*)|([^\[\{\]\}\:\"\,\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"]],autoClosingPairs:[{open:"{",close:"}",notIn:["string"]},{open:"[",close:"]",notIn:["string"]},{open:'"',close:'"',notIn:["string"]}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,