"use strict";(self.webpackChunktextWandler=self.webpackChunktextWandler||[]).push([[4839],{44839:(e,t,n)=>{n.r(t),n.d(t,{CompletionAdapter:()=>Vt,DefinitionAdapter:()=>Yt,DiagnosticsAdapter:()=>Ot,DocumentColorAdapter:()=>gn,DocumentFormattingEditProvider:()=>sn,DocumentHighlightAdapter:()=>Gt,DocumentLinkAdapter:()=>an,DocumentRangeFormattingEditProvider:()=>cn,DocumentSymbolAdapter:()=>nn,FoldingRangeAdapter:()=>fn,HoverAdapter:()=>qt,ReferenceAdapter:()=>en,RenameAdapter:()=>tn,SelectionRangeAdapter:()=>hn,WorkerManager:()=>Dt,fromPosition:()=>Bt,fromRange:()=>Kt,getWorker:()=>Vn,setupMode:()=>Kn,toRange:()=>Ht,toTextEdit:()=>zt});var r,i=n(34732),o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,c=Object.prototype.hasOwnProperty,u=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of s(t))c.call(e,i)||i===n||o(e,i,{get:()=>t[i],enumerable:!(r=a(t,i))||r.enumerable});return e},d={};u(d,i,"default"),r="object"==typeof self&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name&&void 0!==globalThis.workerttPolicy?globalThis.workerttPolicy:function(e,t){const n=globalThis.MonacoEnvironment;if(n?.createTrustedTypesPolicy)try{return n.createTrustedTypesPolicy(e,t)}catch(e){return}try{return globalThis.trustedTypes?.createPolicy(e,t)}catch(e){return}}("defaultWorkerFactory",{createScriptURL:e=>e});var l,g,f,h,p,m,v,k,b,C,w,_,y,x,E,I,A,S,T,L,R,M,P,F,j,D,U,N,O,W,V,B,K,H,X,z,q,$,Q,G,J,Y,Z,ee,te,ne,re,ie,oe,ae,se,ce,ue,de,le,ge,fe,he,pe,me,ve,ke,be,Ce,we,_e,ye,xe,Ee,Ie,Ae,Se,Te,Le,Re,Me,Pe,Fe,je,De,Ue,Ne,Oe,We,Ve,Be,Ke,He,Xe,ze,qe,$e,Qe,Ge,Je,Ye,Ze,et,tt,nt,rt,it,ot,at,st,ct,ut,dt,lt,gt,ft,ht,pt,mt,vt,kt,bt,Ct,wt,_t,yt,xt,Et,It,At,St,Tt,Lt,Rt,Mt,Pt,Ft,jt,Dt=class{constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){this._worker&&Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=function(e){const t=Promise.resolve(function(e){const t=e.label,n=globalThis.MonacoEnvironment;if(n){if("function"==typeof n.getWorker)return n.getWorker("workerMain.js",t);if("function"==typeof n.getWorkerUrl){const e=n.getWorkerUrl("workerMain.js",t);return new Worker(r?r.createScriptURL(e):e,{name:t,type:"module"})}}throw new Error("You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker")}({label:e.label??"monaco-editor-worker",moduleId:e.moduleId})).then((t=>(t.postMessage("ignore"),t.postMessage(e.createData),t)));return d.editor.createWebWorker({worker:t,host:e.host,keepIdleModels:e.keepIdleModels})}({moduleId:"vs/language/json/jsonWorker",label:this._defaults.languageId,createData:{languageSettings:this._defaults.diagnosticsOptions,languageId:this._defaults.languageId,enableSchemaRequest:this._defaults.diagnosticsOptions.enableSchemaRequest}}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(l||(l={})).is=function(e){return"string"==typeof e},(g||(g={})).is=function(e){return"string"==typeof e},(h=f||(f={})).MIN_VALUE=-2147483648,h.MAX_VALUE=2147483647,h.is=function(e){return"number"==typeof e&&h.MIN_VALUE<=e&&e<=h.MAX_VALUE},(m=p||(p={})).MIN_VALUE=0,m.MAX_VALUE=2147483647,m.is=function(e){return"number"==typeof e&&m.MIN_VALUE<=e&&e<=m.MAX_VALUE},(k=v||(v={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=p.MAX_VALUE),t===Number.MAX_VALUE&&(t=p.MAX_VALUE),{line:e,character:t}},k.is=function(e){let t=e;return Ut.objectLiteral(t)&&Ut.uinteger(t.line)&&Ut.uinteger(t.character)},(C=b||(b={})).create=function(e,t,n,r){if(Ut.uinteger(e)&&Ut.uinteger(t)&&Ut.uinteger(n)&&Ut.uinteger(r))return{start:v.create(e,t),end:v.create(n,r)};if(v.is(e)&&v.is(t))return{start:e,end:t};throw new Error(`Range#create called with invalid arguments[${e}, ${t}, ${n}, ${r}]`)},C.is=function(e){let t=e;return Ut.objectLiteral(t)&&v.is(t.start)&&v.is(t.end)},(_=w||(w={})).create=function(e,t){return{uri:e,range:t}},_.is=function(e){let t=e;return Ut.objectLiteral(t)&&b.is(t.range)&&(Ut.string(t.uri)||Ut.undefined(t.uri))},(x=y||(y={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},x.is=function(e){let t=e;return Ut.objectLiteral(t)&&b.is(t.targetRange)&&Ut.string(t.targetUri)&&b.is(t.targetSelectionRange)&&(b.is(t.originSelectionRange)||Ut.undefined(t.originSelectionRange))},(I=E||(E={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},I.is=function(e){const t=e;return Ut.objectLiteral(t)&&Ut.numberRange(t.red,0,1)&&Ut.numberRange(t.green,0,1)&&Ut.numberRange(t.blue,0,1)&&Ut.numberRange(t.alpha,0,1)},(S=A||(A={})).create=function(e,t){return{range:e,color:t}},S.is=function(e){const t=e;return Ut.objectLiteral(t)&&b.is(t.range)&&E.is(t.color)},(L=T||(T={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},L.is=function(e){const t=e;return Ut.objectLiteral(t)&&Ut.string(t.label)&&(Ut.undefined(t.textEdit)||z.is(t))&&(Ut.undefined(t.additionalTextEdits)||Ut.typedArray(t.additionalTextEdits,z.is))},(M=R||(R={})).Comment="comment",M.Imports="imports",M.Region="region",(F=P||(P={})).create=function(e,t,n,r,i,o){const a={startLine:e,endLine:t};return Ut.defined(n)&&(a.startCharacter=n),Ut.defined(r)&&(a.endCharacter=r),Ut.defined(i)&&(a.kind=i),Ut.defined(o)&&(a.collapsedText=o),a},F.is=function(e){const t=e;return Ut.objectLiteral(t)&&Ut.uinteger(t.startLine)&&Ut.uinteger(t.startLine)&&(Ut.undefined(t.startCharacter)||Ut.uinteger(t.startCharacter))&&(Ut.undefined(t.endCharacter)||Ut.uinteger(t.endCharacter))&&(Ut.undefined(t.kind)||Ut.string(t.kind))},(D=j||(j={})).create=function(e,t){return{location:e,message:t}},D.is=function(e){let t=e;return Ut.defined(t)&&w.is(t.location)&&Ut.string(t.message)},(N=U||(U={})).Error=1,N.Warning=2,N.Information=3,N.Hint=4,(W=O||(O={})).Unnecessary=1,W.Deprecated=2,(V||(V={})).is=function(e){const t=e;return Ut.objectLiteral(t)&&Ut.string(t.href)},(K=B||(B={})).create=function(e,t,n,r,i,o){let a={range:e,message:t};return Ut.defined(n)&&(a.severity=n),Ut.defined(r)&&(a.code=r),Ut.defined(i)&&(a.source=i),Ut.defined(o)&&(a.relatedInformation=o),a},K.is=function(e){var t;let n=e;return Ut.defined(n)&&b.is(n.range)&&Ut.string(n.message)&&(Ut.number(n.severity)||Ut.undefined(n.severity))&&(Ut.integer(n.code)||Ut.string(n.code)||Ut.undefined(n.code))&&(Ut.undefined(n.codeDescription)||Ut.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(Ut.string(n.source)||Ut.undefined(n.source))&&(Ut.undefined(n.relatedInformation)||Ut.typedArray(n.relatedInformation,j.is))},(X=H||(H={})).create=function(e,t,...n){let r={title:e,command:t};return Ut.defined(n)&&n.length>0&&(r.arguments=n),r},X.is=function(e){let t=e;return Ut.defined(t)&&Ut.string(t.title)&&Ut.string(t.command)},(q=z||(z={})).replace=function(e,t){return{range:e,newText:t}},q.insert=function(e,t){return{range:{start:e,end:e},newText:t}},q.del=function(e){return{range:e,newText:""}},q.is=function(e){const t=e;return Ut.objectLiteral(t)&&Ut.string(t.newText)&&b.is(t.range)},(Q=$||($={})).create=function(e,t,n){const r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},Q.is=function(e){const t=e;return Ut.objectLiteral(t)&&Ut.string(t.label)&&(Ut.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(Ut.string(t.description)||void 0===t.description)},(G||(G={})).is=function(e){const t=e;return Ut.string(t)},(Y=J||(J={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},Y.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},Y.del=function(e,t){return{range:e,newText:"",annotationId:t}},Y.is=function(e){const t=e;return z.is(t)&&($.is(t.annotationId)||G.is(t.annotationId))},(ee=Z||(Z={})).create=function(e,t){return{textDocument:e,edits:t}},ee.is=function(e){let t=e;return Ut.defined(t)&&ge.is(t.textDocument)&&Array.isArray(t.edits)},(ne=te||(te={})).create=function(e,t,n){let r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ne.is=function(e){let t=e;return t&&"create"===t.kind&&Ut.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||Ut.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Ut.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||G.is(t.annotationId))},(ie=re||(re={})).create=function(e,t,n,r){let i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},ie.is=function(e){let t=e;return t&&"rename"===t.kind&&Ut.string(t.oldUri)&&Ut.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||Ut.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Ut.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||G.is(t.annotationId))},(ae=oe||(oe={})).create=function(e,t,n){let r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ae.is=function(e){let t=e;return t&&"delete"===t.kind&&Ut.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||Ut.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||Ut.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||G.is(t.annotationId))},(se||(se={})).is=function(e){let t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((e=>Ut.string(e.kind)?te.is(e)||re.is(e)||oe.is(e):Z.is(e))))},(ue=ce||(ce={})).create=function(e){return{uri:e}},ue.is=function(e){let t=e;return Ut.defined(t)&&Ut.string(t.uri)},(le=de||(de={})).create=function(e,t){return{uri:e,version:t}},le.is=function(e){let t=e;return Ut.defined(t)&&Ut.string(t.uri)&&Ut.integer(t.version)},(fe=ge||(ge={})).create=function(e,t){return{uri:e,version:t}},fe.is=function(e){let t=e;return Ut.defined(t)&&Ut.string(t.uri)&&(null===t.version||Ut.integer(t.version))},(pe=he||(he={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},pe.is=function(e){let t=e;return Ut.defined(t)&&Ut.string(t.uri)&&Ut.string(t.languageId)&&Ut.integer(t.version)&&Ut.string(t.text)},(ve=me||(me={})).PlainText="plaintext",ve.Markdown="markdown",ve.is=function(e){const t=e;return t===ve.PlainText||t===ve.Markdown},(ke||(ke={})).is=function(e){const t=e;return Ut.objectLiteral(e)&&me.is(t.kind)&&Ut.string(t.value)},(Ce=be||(be={})).Text=1,Ce.Method=2,Ce.Function=3,Ce.Constructor=4,Ce.Field=5,Ce.Variable=6,Ce.Class=7,Ce.Interface=8,Ce.Module=9,Ce.Property=10,Ce.Unit=11,Ce.Value=12,Ce.Enum=13,Ce.Keyword=14,Ce.Snippet=15,Ce.Color=16,Ce.File=17,Ce.Reference=18,Ce.Folder=19,Ce.EnumMember=20,Ce.Constant=21,Ce.Struct=22,Ce.Event=23,Ce.Operator=24,Ce.TypeParameter=25,(_e=we||(we={})).PlainText=1,_e.Snippet=2,(ye||(ye={})).Deprecated=1,(Ee=xe||(xe={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},Ee.is=function(e){const t=e;return t&&Ut.string(t.newText)&&b.is(t.insert)&&b.is(t.replace)},(Ae=Ie||(Ie={})).asIs=1,Ae.adjustIndentation=2,(Se||(Se={})).is=function(e){const t=e;return t&&(Ut.string(t.detail)||void 0===t.detail)&&(Ut.string(t.description)||void 0===t.description)},(Te||(Te={})).create=function(e){return{label:e}},(Le||(Le={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Me=Re||(Re={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Me.is=function(e){const t=e;return Ut.string(t)||Ut.objectLiteral(t)&&Ut.string(t.language)&&Ut.string(t.value)},(Pe||(Pe={})).is=function(e){let t=e;return!!t&&Ut.objectLiteral(t)&&(ke.is(t.contents)||Re.is(t.contents)||Ut.typedArray(t.contents,Re.is))&&(void 0===e.range||b.is(e.range))},(Fe||(Fe={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(je||(je={})).create=function(e,t,...n){let r={label:e};return Ut.defined(t)&&(r.documentation=t),Ut.defined(n)?r.parameters=n:r.parameters=[],r},(Ue=De||(De={})).Text=1,Ue.Read=2,Ue.Write=3,(Ne||(Ne={})).create=function(e,t){let n={range:e};return Ut.number(t)&&(n.kind=t),n},(We=Oe||(Oe={})).File=1,We.Module=2,We.Namespace=3,We.Package=4,We.Class=5,We.Method=6,We.Property=7,We.Field=8,We.Constructor=9,We.Enum=10,We.Interface=11,We.Function=12,We.Variable=13,We.Constant=14,We.String=15,We.Number=16,We.Boolean=17,We.Array=18,We.Object=19,We.Key=20,We.Null=21,We.EnumMember=22,We.Struct=23,We.Event=24,We.Operator=25,We.TypeParameter=26,(Ve||(Ve={})).Deprecated=1,(Be||(Be={})).create=function(e,t,n,r,i){let o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(Ke||(Ke={})).create=function(e,t,n,r){return void 0!==r?{name:e,kind:t,location:{uri:n,range:r}}:{name:e,kind:t,location:{uri:n}}},(Xe=He||(He={})).create=function(e,t,n,r,i,o){let a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},Xe.is=function(e){let t=e;return t&&Ut.string(t.name)&&Ut.number(t.kind)&&b.is(t.range)&&b.is(t.selectionRange)&&(void 0===t.detail||Ut.string(t.detail))&&(void 0===t.deprecated||Ut.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},(qe=ze||(ze={})).Empty="",qe.QuickFix="quickfix",qe.Refactor="refactor",qe.RefactorExtract="refactor.extract",qe.RefactorInline="refactor.inline",qe.RefactorRewrite="refactor.rewrite",qe.Source="source",qe.SourceOrganizeImports="source.organizeImports",qe.SourceFixAll="source.fixAll",(Qe=$e||($e={})).Invoked=1,Qe.Automatic=2,(Je=Ge||(Ge={})).create=function(e,t,n){let r={diagnostics:e};return null!=t&&(r.only=t),null!=n&&(r.triggerKind=n),r},Je.is=function(e){let t=e;return Ut.defined(t)&&Ut.typedArray(t.diagnostics,B.is)&&(void 0===t.only||Ut.typedArray(t.only,Ut.string))&&(void 0===t.triggerKind||t.triggerKind===$e.Invoked||t.triggerKind===$e.Automatic)},(Ze=Ye||(Ye={})).create=function(e,t,n){let r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):H.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},Ze.is=function(e){let t=e;return t&&Ut.string(t.title)&&(void 0===t.diagnostics||Ut.typedArray(t.diagnostics,B.is))&&(void 0===t.kind||Ut.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||H.is(t.command))&&(void 0===t.isPreferred||Ut.boolean(t.isPreferred))&&(void 0===t.edit||se.is(t.edit))},(tt=et||(et={})).create=function(e,t){let n={range:e};return Ut.defined(t)&&(n.data=t),n},tt.is=function(e){let t=e;return Ut.defined(t)&&b.is(t.range)&&(Ut.undefined(t.command)||H.is(t.command))},(rt=nt||(nt={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},rt.is=function(e){let t=e;return Ut.defined(t)&&Ut.uinteger(t.tabSize)&&Ut.boolean(t.insertSpaces)},(ot=it||(it={})).create=function(e,t,n){return{range:e,target:t,data:n}},ot.is=function(e){let t=e;return Ut.defined(t)&&b.is(t.range)&&(Ut.undefined(t.target)||Ut.string(t.target))},(st=at||(at={})).create=function(e,t){return{range:e,parent:t}},st.is=function(e){let t=e;return Ut.objectLiteral(t)&&b.is(t.range)&&(void 0===t.parent||st.is(t.parent))},(ut=ct||(ct={})).namespace="namespace",ut.type="type",ut.class="class",ut.enum="enum",ut.interface="interface",ut.struct="struct",ut.typeParameter="typeParameter",ut.parameter="parameter",ut.variable="variable",ut.property="property",ut.enumMember="enumMember",ut.event="event",ut.function="function",ut.method="method",ut.macro="macro",ut.keyword="keyword",ut.modifier="modifier",ut.comment="comment",ut.string="string",ut.number="number",ut.regexp="regexp",ut.operator="operator",ut.decorator="decorator",(lt=dt||(dt={})).declaration="declaration",lt.definition="definition",lt.readonly="readonly",lt.static="static",lt.deprecated="deprecated",lt.abstract="abstract",lt.async="async",lt.modification="modification",lt.documentation="documentation",lt.defaultLibrary="defaultLibrary",(gt||(gt={})).is=function(e){const t=e;return Ut.objectLiteral(t)&&(void 0===t.resultId||"string"==typeof t.resultId)&&Array.isArray(t.data)&&(0===t.data.length||"number"==typeof t.data[0])},(ht=ft||(ft={})).create=function(e,t){return{range:e,text:t}},ht.is=function(e){const t=e;return null!=t&&b.is(t.range)&&Ut.string(t.text)},(mt=pt||(pt={})).create=function(e,t,n){return{range:e,variableName:t,caseSensitiveLookup:n}},mt.is=function(e){const t=e;return null!=t&&b.is(t.range)&&Ut.boolean(t.caseSensitiveLookup)&&(Ut.string(t.variableName)||void 0===t.variableName)},(kt=vt||(vt={})).create=function(e,t){return{range:e,expression:t}},kt.is=function(e){const t=e;return null!=t&&b.is(t.range)&&(Ut.string(t.expression)||void 0===t.expression)},(Ct=bt||(bt={})).create=function(e,t){return{frameId:e,stoppedLocation:t}},Ct.is=function(e){const t=e;return Ut.defined(t)&&b.is(e.stoppedLocation)},(_t=wt||(wt={})).Type=1,_t.Parameter=2,_t.is=function(e){return 1===e||2===e},(xt=yt||(yt={})).create=function(e){return{value:e}},xt.is=function(e){const t=e;return Ut.objectLiteral(t)&&(void 0===t.tooltip||Ut.string(t.tooltip)||ke.is(t.tooltip))&&(void 0===t.location||w.is(t.location))&&(void 0===t.command||H.is(t.command))},(It=Et||(Et={})).create=function(e,t,n){const r={position:e,label:t};return void 0!==n&&(r.kind=n),r},It.is=function(e){const t=e;return Ut.objectLiteral(t)&&v.is(t.position)&&(Ut.string(t.label)||Ut.typedArray(t.label,yt.is))&&(void 0===t.kind||wt.is(t.kind))&&void 0===t.textEdits||Ut.typedArray(t.textEdits,z.is)&&(void 0===t.tooltip||Ut.string(t.tooltip)||ke.is(t.tooltip))&&(void 0===t.paddingLeft||Ut.boolean(t.paddingLeft))&&(void 0===t.paddingRight||Ut.boolean(t.paddingRight))},(At||(At={})).createSnippet=function(e){return{kind:"snippet",value:e}},(St||(St={})).create=function(e,t,n,r){return{insertText:e,filterText:t,range:n,command:r}},(Tt||(Tt={})).create=function(e){return{items:e}},(Rt=Lt||(Lt={})).Invoked=0,Rt.Automatic=1,(Mt||(Mt={})).create=function(e,t){return{range:e,text:t}},(Pt||(Pt={})).create=function(e,t){return{triggerKind:e,selectedCompletionInfo:t}},(Ft||(Ft={})).is=function(e){const t=e;return Ut.objectLiteral(t)&&g.is(t.uri)&&Ut.string(t.name)},function(e){function t(e,n){if(e.length<=1)return e;const r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);let a=0,s=0,c=0;for(;a<i.length&&s<o.length;){let t=n(i[a],o[s]);e[c++]=t<=0?i[a++]:o[s++]}for(;a<i.length;)e[c++]=i[a++];for(;s<o.length;)e[c++]=o[s++];return e}e.create=function(e,t,n,r){return new Nt(e,t,n,r)},e.is=function(e){let t=e;return!!(Ut.defined(t)&&Ut.string(t.uri)&&(Ut.undefined(t.languageId)||Ut.string(t.languageId))&&Ut.uinteger(t.lineCount)&&Ut.func(t.getText)&&Ut.func(t.positionAt)&&Ut.func(t.offsetAt))},e.applyEdits=function(e,n){let r=e.getText(),i=t(n,((e,t)=>{let n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length;for(let t=i.length-1;t>=0;t--){let n=i[t],a=e.offsetAt(n.range.start),s=e.offsetAt(n.range.end);if(!(s<=o))throw new Error("Overlapping edit");r=r.substring(0,a)+n.newText+r.substring(s,r.length),o=a}return r}}(jt||(jt={}));var Ut,Nt=class{constructor(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}get uri(){return this._uri}get languageId(){return this._languageId}get version(){return this._version}getText(e){if(e){let t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content}update(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0}getLineOffsets(){if(void 0===this._lineOffsets){let e=[],t=this._content,n=!0;for(let r=0;r<t.length;r++){n&&(e.push(r),n=!1);let i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets}positionAt(e){e=Math.max(Math.min(e,this._content.length),0);let t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return v.create(0,e);for(;n<r;){let i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}let i=n-1;return v.create(i,e-t[i])}offsetAt(e){let t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;let n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)}get lineCount(){return this.getLineOffsets().length}};!function(e){const t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.numberRange=function(e,n,r){return"[object Number]"===t.call(e)&&n<=e&&e<=r},e.integer=function(e){return"[object Number]"===t.call(e)&&-2147483648<=e&&e<=2147483647},e.uinteger=function(e){return"[object Number]"===t.call(e)&&0<=e&&e<=2147483647},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(Ut||(Ut={}));var Ot=class{constructor(e,t,n){this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);const r=e=>{let t,n=e.getLanguageId();n===this._languageId&&(this._listener[e.uri.toString()]=e.onDidChangeContent((()=>{window.clearTimeout(t),t=window.setTimeout((()=>this._doValidate(e.uri,n)),500)})),this._doValidate(e.uri,n))},i=e=>{d.editor.setModelMarkers(e,this._languageId,[]);let t=e.uri.toString(),n=this._listener[t];n&&(n.dispose(),delete this._listener[t])};this._disposables.push(d.editor.onDidCreateModel(r)),this._disposables.push(d.editor.onWillDisposeModel(i)),this._disposables.push(d.editor.onDidChangeModelLanguage((e=>{i(e.model),r(e.model)}))),this._disposables.push(n((e=>{d.editor.getModels().forEach((e=>{e.getLanguageId()===this._languageId&&(i(e),r(e))}))}))),this._disposables.push({dispose:()=>{d.editor.getModels().forEach(i);for(let e in this._listener)this._listener[e].dispose()}}),d.editor.getModels().forEach(r)}dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables.length=0}_doValidate(e,t){this._worker(e).then((t=>t.doValidation(e.toString()))).then((n=>{const r=n.map((e=>function(e,t){let n="number"==typeof t.code?String(t.code):t.code;return{severity:Wt(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)));let i=d.editor.getModel(e);i&&i.getLanguageId()===t&&d.editor.setModelMarkers(i,t,r)})).then(void 0,(e=>{}))}};function Wt(e){switch(e){case U.Error:return d.MarkerSeverity.Error;case U.Warning:return d.MarkerSeverity.Warning;case U.Information:return d.MarkerSeverity.Info;case U.Hint:return d.MarkerSeverity.Hint;default:return d.MarkerSeverity.Info}}var Vt=class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),Bt(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new d.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:Xt(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:Ht(e.textEdit.insert),replace:Ht(e.textEdit.replace)}:t.range=Ht(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(zt)),e.insertTextFormat===we.Snippet&&(t.insertTextRules=d.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}};function Bt(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function Kt(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function Ht(e){if(e)return new d.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function Xt(e){const t=d.languages.CompletionItemKind;switch(e){case be.Text:return t.Text;case be.Method:return t.Method;case be.Function:return t.Function;case be.Constructor:return t.Constructor;case be.Field:return t.Field;case be.Variable:return t.Variable;case be.Class:return t.Class;case be.Interface:return t.Interface;case be.Module:return t.Module;case be.Property:return t.Property;case be.Unit:return t.Unit;case be.Value:return t.Value;case be.Enum:return t.Enum;case be.Keyword:return t.Keyword;case be.Snippet:return t.Snippet;case be.Color:return t.Color;case be.File:return t.File;case be.Reference:return t.Reference}return t.Property}function zt(e){if(e)return{range:Ht(e.range),text:e.newText}}var qt=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),Bt(t)))).then((e=>{if(e)return{range:Ht(e.range),contents:Qt(e.contents)}}))}};function $t(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function Qt(e){if(e)return Array.isArray(e)?e.map($t):[$t(e)]}var Gt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),Bt(t)))).then((e=>{if(e)return e.map((e=>({range:Ht(e.range),kind:Jt(e.kind)})))}))}};function Jt(e){switch(e){case De.Read:return d.languages.DocumentHighlightKind.Read;case De.Write:return d.languages.DocumentHighlightKind.Write;case De.Text:return d.languages.DocumentHighlightKind.Text}return d.languages.DocumentHighlightKind.Text}var Yt=class{constructor(e){this._worker=e}provideDefinition(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDefinition(r.toString(),Bt(t)))).then((e=>{if(e)return[Zt(e)]}))}};function Zt(e){return{uri:d.Uri.parse(e.uri),range:Ht(e.range)}}var en=class{constructor(e){this._worker=e}provideReferences(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.findReferences(i.toString(),Bt(t)))).then((e=>{if(e)return e.map(Zt)}))}},tn=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),Bt(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=d.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,versionId:void 0,textEdit:{range:Ht(i.range),text:i.newText}})}return{edits:t}}(e)))}},nn=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>"children"in e?rn(e):{name:e.name,detail:"",containerName:e.containerName,kind:on(e.kind),range:Ht(e.location.range),selectionRange:Ht(e.location.range),tags:[]}))}))}};function rn(e){return{name:e.name,detail:e.detail??"",kind:on(e.kind),range:Ht(e.range),selectionRange:Ht(e.selectionRange),tags:e.tags??[],children:(e.children??[]).map((e=>rn(e)))}}function on(e){let t=d.languages.SymbolKind;switch(e){case Oe.File:return t.File;case Oe.Module:return t.Module;case Oe.Namespace:return t.Namespace;case Oe.Package:return t.Package;case Oe.Class:return t.Class;case Oe.Method:return t.Method;case Oe.Property:return t.Property;case Oe.Field:return t.Field;case Oe.Constructor:return t.Constructor;case Oe.Enum:return t.Enum;case Oe.Interface:return t.Interface;case Oe.Function:return t.Function;case Oe.Variable:return t.Variable;case Oe.Constant:return t.Constant;case Oe.String:return t.String;case Oe.Number:return t.Number;case Oe.Boolean:return t.Boolean;case Oe.Array:return t.Array}return t.Function}var an=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:Ht(e.range),url:e.target})))}}))}},sn=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,un(t)).then((e=>{if(e&&0!==e.length)return e.map(zt)}))))}},cn=class{constructor(e){this._worker=e,this.canFormatMultipleRanges=!1}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),Kt(t),un(n)).then((e=>{if(e&&0!==e.length)return e.map(zt)}))))}};function un(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var dn,ln,gn=class{constructor(e){this._worker=e}provideDocumentColors(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentColors(n.toString()))).then((e=>{if(e)return e.map((e=>({color:e.color,range:Ht(e.range)})))}))}provideColorPresentations(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getColorPresentations(r.toString(),t.color,Kt(t.range)))).then((e=>{if(e)return e.map((e=>{let t={label:e.label};return e.textEdit&&(t.textEdit=zt(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(zt)),t}))}))}},fn=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case R.Comment:return d.languages.FoldingRangeKind.Comment;case R.Imports:return d.languages.FoldingRangeKind.Imports;case R.Region:return d.languages.FoldingRangeKind.Region}}(e.kind)),t}))}))}},hn=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(Bt)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:Ht(e.range)}),e=e.parent;return t}))}))}};function pn(e){return 32===e||9===e}function mn(e){return 10===e||13===e}function vn(e){return e>=48&&e<=57}(ln=dn||(dn={}))[ln.lineFeed=10]="lineFeed",ln[ln.carriageReturn=13]="carriageReturn",ln[ln.space=32]="space",ln[ln._0=48]="_0",ln[ln._1=49]="_1",ln[ln._2=50]="_2",ln[ln._3=51]="_3",ln[ln._4=52]="_4",ln[ln._5=53]="_5",ln[ln._6=54]="_6",ln[ln._7=55]="_7",ln[ln._8=56]="_8",ln[ln._9=57]="_9",ln[ln.a=97]="a",ln[ln.b=98]="b",ln[ln.c=99]="c",ln[ln.d=100]="d",ln[ln.e=101]="e",ln[ln.f=102]="f",ln[ln.g=103]="g",ln[ln.h=104]="h",ln[ln.i=105]="i",ln[ln.j=106]="j",ln[ln.k=107]="k",ln[ln.l=108]="l",ln[ln.m=109]="m",ln[ln.n=110]="n",ln[ln.o=111]="o",ln[ln.p=112]="p",ln[ln.q=113]="q",ln[ln.r=114]="r",ln[ln.s=115]="s",ln[ln.t=116]="t",ln[ln.u=117]="u",ln[ln.v=118]="v",ln[ln.w=119]="w",ln[ln.x=120]="x",ln[ln.y=121]="y",ln[ln.z=122]="z",ln[ln.A=65]="A",ln[ln.B=66]="B",ln[ln.C=67]="C",ln[ln.D=68]="D",ln[ln.E=69]="E",ln[ln.F=70]="F",ln[ln.G=71]="G",ln[ln.H=72]="H",ln[ln.I=73]="I",ln[ln.J=74]="J",ln[ln.K=75]="K",ln[ln.L=76]="L",ln[ln.M=77]="M",ln[ln.N=78]="N",ln[ln.O=79]="O",ln[ln.P=80]="P",ln[ln.Q=81]="Q",ln[ln.R=82]="R",ln[ln.S=83]="S",ln[ln.T=84]="T",ln[ln.U=85]="U",ln[ln.V=86]="V",ln[ln.W=87]="W",ln[ln.X=88]="X",ln[ln.Y=89]="Y",ln[ln.Z=90]="Z",ln[ln.asterisk=42]="asterisk",ln[ln.backslash=92]="backslash",ln[ln.closeBrace=125]="closeBrace",ln[ln.closeBracket=93]="closeBracket",ln[ln.colon=58]="colon",ln[ln.comma=44]="comma",ln[ln.dot=46]="dot",ln[ln.doubleQuote=34]="doubleQuote",ln[ln.minus=45]="minus",ln[ln.openBrace=123]="openBrace",ln[ln.openBracket=91]="openBracket",ln[ln.plus=43]="plus",ln[ln.slash=47]="slash",ln[ln.formFeed=12]="formFeed",ln[ln.tab=9]="tab",new Array(20).fill(0).map(((e,t)=>" ".repeat(t)));var kn,bn=200;new Array(bn).fill(0).map(((e,t)=>"\n"+" ".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r"+" ".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r\n"+" ".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\n"+"\t".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r"+"\t".repeat(t))),new Array(bn).fill(0).map(((e,t)=>"\r\n"+"\t".repeat(t))),(kn||(kn={})).DEFAULT={allowTrailingComma:!1};var Cn,wn,_n,yn,xn,En,In=function(e,t=!1){const n=e.length;let r=0,i="",o=0,a=16,s=0,c=0,u=0,d=0,l=0;function g(t,n){let i=0,o=0;for(;i<t||!n;){let t=e.charCodeAt(r);if(t>=48&&t<=57)o=16*o+t-48;else if(t>=65&&t<=70)o=16*o+t-65+10;else{if(!(t>=97&&t<=102))break;o=16*o+t-97+10}r++,i++}return i<t&&(o=-1),o}function f(){if(i="",l=0,o=r,c=s,d=u,r>=n)return o=n,a=17;let t=e.charCodeAt(r);if(pn(t)){do{r++,i+=String.fromCharCode(t),t=e.charCodeAt(r)}while(pn(t));return a=15}if(mn(t))return r++,i+=String.fromCharCode(t),13===t&&10===e.charCodeAt(r)&&(r++,i+="\n"),s++,u=r,a=14;switch(t){case 123:return r++,a=1;case 125:return r++,a=2;case 91:return r++,a=3;case 93:return r++,a=4;case 58:return r++,a=6;case 44:return r++,a=5;case 34:return r++,i=function(){let t="",i=r;for(;;){if(r>=n){t+=e.substring(i,r),l=2;break}const o=e.charCodeAt(r);if(34===o){t+=e.substring(i,r),r++;break}if(92!==o){if(o>=0&&o<=31){if(mn(o)){t+=e.substring(i,r),l=2;break}l=6}r++}else{if(t+=e.substring(i,r),r++,r>=n){l=2;break}switch(e.charCodeAt(r++)){case 34:t+='"';break;case 92:t+="\\";break;case 47:t+="/";break;case 98:t+="\b";break;case 102:t+="\f";break;case 110:t+="\n";break;case 114:t+="\r";break;case 116:t+="\t";break;case 117:const e=g(4,!0);e>=0?t+=String.fromCharCode(e):l=4;break;default:l=5}i=r}}return t}(),a=10;case 47:const c=r-1;if(47===e.charCodeAt(r+1)){for(r+=2;r<n&&!mn(e.charCodeAt(r));)r++;return i=e.substring(c,r),a=12}if(42===e.charCodeAt(r+1)){r+=2;const t=n-1;let o=!1;for(;r<t;){const t=e.charCodeAt(r);if(42===t&&47===e.charCodeAt(r+1)){r+=2,o=!0;break}r++,mn(t)&&(13===t&&10===e.charCodeAt(r)&&r++,s++,u=r)}return o||(r++,l=1),i=e.substring(c,r),a=13}return i+=String.fromCharCode(t),r++,a=16;case 45:if(i+=String.fromCharCode(t),r++,r===n||!vn(e.charCodeAt(r)))return a=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return i+=function(){let t=r;if(48===e.charCodeAt(r))r++;else for(r++;r<e.length&&vn(e.charCodeAt(r));)r++;if(r<e.length&&46===e.charCodeAt(r)){if(r++,!(r<e.length&&vn(e.charCodeAt(r))))return l=3,e.substring(t,r);for(r++;r<e.length&&vn(e.charCodeAt(r));)r++}let n=r;if(r<e.length&&(69===e.charCodeAt(r)||101===e.charCodeAt(r)))if(r++,(r<e.length&&43===e.charCodeAt(r)||45===e.charCodeAt(r))&&r++,r<e.length&&vn(e.charCodeAt(r))){for(r++;r<e.length&&vn(e.charCodeAt(r));)r++;n=r}else l=3;return e.substring(t,n)}(),a=11;default:for(;r<n&&h(t);)r++,t=e.charCodeAt(r);if(o!==r){switch(i=e.substring(o,r),i){case"true":return a=8;case"false":return a=9;case"null":return a=7}return a=16}return i+=String.fromCharCode(t),r++,a=16}}function h(e){if(pn(e)||mn(e))return!1;switch(e){case 125:case 93:case 123:case 91:case 34:case 58:case 44:case 47:return!1}return!0}return{setPosition:function(e){r=e,i="",o=0,a=16,l=0},getPosition:()=>r,scan:t?function(){let e;do{e=f()}while(e>=12&&e<=15);return e}:f,getToken:()=>a,getTokenValue:()=>i,getTokenOffset:()=>o,getTokenLength:()=>r-o,getTokenStartLine:()=>c,getTokenStartCharacter:()=>o-d,getTokenError:()=>l}};(wn=Cn||(Cn={}))[wn.None=0]="None",wn[wn.UnexpectedEndOfComment=1]="UnexpectedEndOfComment",wn[wn.UnexpectedEndOfString=2]="UnexpectedEndOfString",wn[wn.UnexpectedEndOfNumber=3]="UnexpectedEndOfNumber",wn[wn.InvalidUnicode=4]="InvalidUnicode",wn[wn.InvalidEscapeCharacter=5]="InvalidEscapeCharacter",wn[wn.InvalidCharacter=6]="InvalidCharacter",(yn=_n||(_n={}))[yn.OpenBraceToken=1]="OpenBraceToken",yn[yn.CloseBraceToken=2]="CloseBraceToken",yn[yn.OpenBracketToken=3]="OpenBracketToken",yn[yn.CloseBracketToken=4]="CloseBracketToken",yn[yn.CommaToken=5]="CommaToken",yn[yn.ColonToken=6]="ColonToken",yn[yn.NullKeyword=7]="NullKeyword",yn[yn.TrueKeyword=8]="TrueKeyword",yn[yn.FalseKeyword=9]="FalseKeyword",yn[yn.StringLiteral=10]="StringLiteral",yn[yn.NumericLiteral=11]="NumericLiteral",yn[yn.LineCommentTrivia=12]="LineCommentTrivia",yn[yn.BlockCommentTrivia=13]="BlockCommentTrivia",yn[yn.LineBreakTrivia=14]="LineBreakTrivia",yn[yn.Trivia=15]="Trivia",yn[yn.Unknown=16]="Unknown",yn[yn.EOF=17]="EOF",(En=xn||(xn={}))[En.InvalidSymbol=1]="InvalidSymbol",En[En.InvalidNumberFormat=2]="InvalidNumberFormat",En[En.PropertyNameExpected=3]="PropertyNameExpected",En[En.ValueExpected=4]="ValueExpected",En[En.ColonExpected=5]="ColonExpected",En[En.CommaExpected=6]="CommaExpected",En[En.CloseBraceExpected=7]="CloseBraceExpected",En[En.CloseBracketExpected=8]="CloseBracketExpected",En[En.EndOfFileExpected=9]="EndOfFileExpected",En[En.InvalidCommentToken=10]="InvalidCommentToken",En[En.UnexpectedEndOfComment=11]="UnexpectedEndOfComment",En[En.UnexpectedEndOfString=12]="UnexpectedEndOfString",En[En.UnexpectedEndOfNumber=13]="UnexpectedEndOfNumber",En[En.InvalidUnicode=14]="InvalidUnicode",En[En.InvalidEscapeCharacter=15]="InvalidEscapeCharacter",En[En.InvalidCharacter=16]="InvalidCharacter";var An,Sn="delimiter.bracket.json",Tn="delimiter.array.json",Ln="delimiter.colon.json",Rn="delimiter.comma.json",Mn="keyword.json",Pn="keyword.json",Fn="string.value.json",jn="number.json",Dn="string.key.json",Un="comment.block.json",Nn="comment.line.json",On=class e{constructor(e,t){this.parent=e,this.type=t}static pop(e){return e?e.parent:null}static push(t,n){return new e(t,n)}static equals(e,t){if(!e&&!t)return!0;if(!e||!t)return!1;for(;e&&t;){if(e===t)return!0;if(e.type!==t.type)return!1;e=e.parent,t=t.parent}return!0}},Wn=class e{constructor(e,t,n,r){this._state=e,this.scanError=t,this.lastWasColon=n,this.parents=r}clone(){return new e(this._state,this.scanError,this.lastWasColon,this.parents)}equals(t){return t===this||!!(t&&t instanceof e)&&this.scanError===t.scanError&&this.lastWasColon===t.lastWasColon&&On.equals(this.parents,t.parents)}getStateData(){return this._state}setStateData(e){this._state=e}};function Vn(){return new Promise(((e,t)=>{if(!An)return t("JSON not registered!");e(An)}))}var Bn=class extends Ot{constructor(e,t,n){super(e,t,n.onDidChange),this._disposables.push(d.editor.onWillDisposeModel((e=>{this._resetSchema(e.uri)}))),this._disposables.push(d.editor.onDidChangeModelLanguage((e=>{this._resetSchema(e.model.uri)})))}_resetSchema(e){this._worker().then((t=>{t.resetSchema(e.toString())}))}};function Kn(e){const t=[],n=[],r=new Dt(e);function i(){const{languageId:t,modeConfiguration:r}=e;var i;Xn(n),r.documentFormattingEdits&&n.push(d.languages.registerDocumentFormattingEditProvider(t,new sn(An))),r.documentRangeFormattingEdits&&n.push(d.languages.registerDocumentRangeFormattingEditProvider(t,new cn(An))),r.completionItems&&n.push(d.languages.registerCompletionItemProvider(t,new Vt(An,[" ",":",'"']))),r.hovers&&n.push(d.languages.registerHoverProvider(t,new qt(An))),r.documentSymbols&&n.push(d.languages.registerDocumentSymbolProvider(t,new nn(An))),r.tokens&&n.push(d.languages.setTokensProvider(t,(i=!0,{getInitialState:()=>new Wn(null,null,!1,null),tokenize:(e,t)=>function(e,t,n,r=0){let i=0,o=!1;switch(n.scanError){case 2:t='"'+t,i=1;break;case 1:t="/*"+t,i=2}const a=In(t);let s=n.lastWasColon,c=n.parents;const u={tokens:[],endState:n.clone()};for(;;){let d=r+a.getPosition(),l="";const g=a.scan();if(17===g)break;if(d===r+a.getPosition())throw new Error("Scanner did not advance, next 3 characters are: "+t.substr(a.getPosition(),3));switch(o&&(d-=i),o=i>0,g){case 1:c=On.push(c,0),l=Sn,s=!1;break;case 2:c=On.pop(c),l=Sn,s=!1;break;case 3:c=On.push(c,1),l=Tn,s=!1;break;case 4:c=On.pop(c),l=Tn,s=!1;break;case 6:l=Ln,s=!0;break;case 5:l=Rn,s=!1;break;case 8:case 9:l=Mn,s=!1;break;case 7:l=Pn,s=!1;break;case 10:const e=c?c.type:0;l=s||1===e?Fn:Dn,s=!1;break;case 11:l=jn,s=!1}if(e)switch(g){case 12:l=Nn;break;case 13:l=Un}u.endState=new Wn(n.getStateData(),a.getTokenError(),s,c),u.tokens.push({startIndex:d,scopes:l})}return u}(i,e,t)}))),r.colors&&n.push(d.languages.registerColorProvider(t,new gn(An))),r.foldingRanges&&n.push(d.languages.registerFoldingRangeProvider(t,new fn(An))),r.diagnostics&&n.push(new Bn(t,An,e)),r.selectionRanges&&n.push(d.languages.registerSelectionRangeProvider(t,new hn(An)))}t.push(r),An=(...e)=>r.getLanguageServiceWorker(...e),i(),t.push(d.languages.setLanguageConfiguration(e.languageId,zn));let o=e.modeConfiguration;return e.onDidChange((e=>{e.modeConfiguration!==o&&(o=e.modeConfiguration,i())})),t.push(Hn(n)),Hn(t)}function Hn(e){return{dispose:()=>Xn(e)}}function Xn(e){for(;e.length;)e.pop().dispose()}var zn={wordPattern:/(-?\d*\.\d\w*)|([^\[\{\]\}\:\"\,\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"]],autoClosingPairs:[{open:"{",close:"}",notIn:["string"]},{open:"[",close:"]",notIn:["string"]},{open:'"',close:'"',notIn:["string"]}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,