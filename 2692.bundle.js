"use strict";(self.webpackChunktextWandler=self.webpackChunktextWandler||[]).push([[2692],{82692:(e,s,n)=>{n.r(s),n.d(s,{conf:()=>o,language:()=>t});var o={brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}]},t={defaultToken:"",tokenPostfix:".dockerfile",variable:/\${?[\w]+}?/,tokenizer:{root:[{include:"@whitespace"},{include:"@comment"},[/(ONBUILD)(\s+)/,["keyword",""]],[/(ENV)(\s+)([\w]+)/,["keyword","",{token:"variable",next:"@arguments"}]],[/(FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT)/,{token:"keyword",next:"@arguments"}]],arguments:[{include:"@whitespace"},{include:"@strings"},[/(@variable)/,{cases:{"@eos":{token:"variable",next:"@popall"},"@default":"variable"}}],[/\\/,{cases:{"@eos":"","@default":""}}],[/./,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],whitespace:[[/\s+/,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],comment:[[/(^#.*$)/,"comment","@popall"]],strings:[[/\\'$/,"","@popall"],[/\\'/,""],[/'$/,"string","@popall"],[/'/,"string","@stringBody"],[/"$/,"string","@popall"],[/"/,"string","@dblStringBody"]],stringBody:[[/[^\\\$']/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/'$/,"string","@popall"],[/'/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]],dblStringBody:[[/[^\\\$"]/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/"$/,"string","@popall"],[/"/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY5Mi5idW5kbGUuanMiLCJtYXBwaW5ncyI6InFKQVNBLElBQUlBLEVBQU8sQ0FDVEMsU0FBVSxDQUNSLENBQUMsSUFBSyxLQUNOLENBQUMsSUFBSyxLQUNOLENBQUMsSUFBSyxNQUVSQyxpQkFBa0IsQ0FDaEIsQ0FBRUMsS0FBTSxJQUFLQyxNQUFPLEtBQ3BCLENBQUVELEtBQU0sSUFBS0MsTUFBTyxLQUNwQixDQUFFRCxLQUFNLElBQUtDLE1BQU8sS0FDcEIsQ0FBRUQsS0FBTSxJQUFLQyxNQUFPLEtBQ3BCLENBQUVELEtBQU0sSUFBS0MsTUFBTyxNQUV0QkMsaUJBQWtCLENBQ2hCLENBQUVGLEtBQU0sSUFBS0MsTUFBTyxLQUNwQixDQUFFRCxLQUFNLElBQUtDLE1BQU8sS0FDcEIsQ0FBRUQsS0FBTSxJQUFLQyxNQUFPLEtBQ3BCLENBQUVELEtBQU0sSUFBS0MsTUFBTyxLQUNwQixDQUFFRCxLQUFNLElBQUtDLE1BQU8sT0FHcEJFLEVBQVcsQ0FDYkMsYUFBYyxHQUNkQyxhQUFjLGNBQ2RDLFNBQVUsY0FDVkMsVUFBVyxDQUNUQyxLQUFNLENBQ0osQ0FBRUMsUUFBUyxlQUNYLENBQUVBLFFBQVMsWUFDWCxDQUFDLGlCQUFrQixDQUFDLFVBQVcsS0FDL0IsQ0FBQyxvQkFBcUIsQ0FBQyxVQUFXLEdBQUksQ0FBRUMsTUFBTyxXQUFZQyxLQUFNLGdCQUNqRSxDQUNFLHNIQUNBLENBQUVELE1BQU8sVUFBV0MsS0FBTSxnQkFHOUJDLFVBQVcsQ0FDVCxDQUFFSCxRQUFTLGVBQ1gsQ0FBRUEsUUFBUyxZQUNYLENBQ0UsY0FDQSxDQUNFSSxNQUFPLENBQ0wsT0FBUSxDQUFFSCxNQUFPLFdBQVlDLEtBQU0sV0FDbkMsV0FBWSxjQUlsQixDQUNFLEtBQ0EsQ0FDRUUsTUFBTyxDQUNMLE9BQVEsR0FDUixXQUFZLE1BSWxCLENBQ0UsSUFDQSxDQUNFQSxNQUFPLENBQ0wsT0FBUSxDQUFFSCxNQUFPLEdBQUlDLEtBQU0sV0FDM0IsV0FBWSxPQU1wQkcsV0FBWSxDQUNWLENBQ0UsTUFDQSxDQUNFRCxNQUFPLENBQ0wsT0FBUSxDQUFFSCxNQUFPLEdBQUlDLEtBQU0sV0FDM0IsV0FBWSxPQUtwQkksUUFBUyxDQUFDLENBQUMsVUFBVyxVQUFXLFlBRWpDQyxRQUFTLENBQ1AsQ0FBQyxPQUFRLEdBQUksV0FFYixDQUFDLE1BQU8sSUFFUixDQUFDLEtBQU0sU0FBVSxXQUNqQixDQUFDLElBQUssU0FBVSxlQUNoQixDQUFDLEtBQU0sU0FBVSxXQUNqQixDQUFDLElBQUssU0FBVSxtQkFFbEJDLFdBQVksQ0FDVixDQUNFLFdBQ0EsQ0FDRUosTUFBTyxDQUNMLE9BQVEsQ0FBRUgsTUFBTyxTQUFVQyxLQUFNLFdBQ2pDLFdBQVksWUFJbEIsQ0FBQyxNQUFPLGlCQUNSLENBQUMsS0FBTSxTQUFVLFdBQ2pCLENBQUMsSUFBSyxTQUFVLFFBQ2hCLENBQUMsY0FBZSxZQUNoQixDQUFDLE1BQU8sVUFDUixDQUFDLElBQUssU0FBVSxZQUVsQk8sY0FBZSxDQUNiLENBQ0UsV0FDQSxDQUNFTCxNQUFPLENBQ0wsT0FBUSxDQUFFSCxNQUFPLFNBQVVDLEtBQU0sV0FDakMsV0FBWSxZQUlsQixDQUFDLE1BQU8saUJBQ1IsQ0FBQyxLQUFNLFNBQVUsV0FDakIsQ0FBQyxJQUFLLFNBQVUsUUFDaEIsQ0FBQyxjQUFlLFlBQ2hCLENBQUMsTUFBTyxVQUNSLENBQUMsSUFBSyxTQUFVLGEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXh0V2FuZGxlci8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNpYy1sYW5ndWFnZXMvZG9ja2VyZmlsZS9kb2NrZXJmaWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFZlcnNpb246IDAuNTIuMig0MDQ1NDViZGVkMWRmNmZmYTQxZWEwYWY0ZThkZGIyMTkwMThjNmMxKVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21vbmFjby1lZGl0b3IvYmxvYi9tYWluL0xJQ0VOU0UudHh0XG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXG4vLyBzcmMvYmFzaWMtbGFuZ3VhZ2VzL2RvY2tlcmZpbGUvZG9ja2VyZmlsZS50c1xudmFyIGNvbmYgPSB7XG4gIGJyYWNrZXRzOiBbXG4gICAgW1wie1wiLCBcIn1cIl0sXG4gICAgW1wiW1wiLCBcIl1cIl0sXG4gICAgW1wiKFwiLCBcIilcIl1cbiAgXSxcbiAgYXV0b0Nsb3NpbmdQYWlyczogW1xuICAgIHsgb3BlbjogXCJ7XCIsIGNsb3NlOiBcIn1cIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiB9LFxuICAgIHsgb3BlbjogXCIoXCIsIGNsb3NlOiBcIilcIiB9LFxuICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicgfSxcbiAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIgfVxuICBdLFxuICBzdXJyb3VuZGluZ1BhaXJzOiBbXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiIH0sXG4gICAgeyBvcGVuOiBcIltcIiwgY2xvc2U6IFwiXVwiIH0sXG4gICAgeyBvcGVuOiBcIihcIiwgY2xvc2U6IFwiKVwiIH0sXG4gICAgeyBvcGVuOiAnXCInLCBjbG9zZTogJ1wiJyB9LFxuICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9XG4gIF1cbn07XG52YXIgbGFuZ3VhZ2UgPSB7XG4gIGRlZmF1bHRUb2tlbjogXCJcIixcbiAgdG9rZW5Qb3N0Zml4OiBcIi5kb2NrZXJmaWxlXCIsXG4gIHZhcmlhYmxlOiAvXFwkez9bXFx3XSt9Py8sXG4gIHRva2VuaXplcjoge1xuICAgIHJvb3Q6IFtcbiAgICAgIHsgaW5jbHVkZTogXCJAd2hpdGVzcGFjZVwiIH0sXG4gICAgICB7IGluY2x1ZGU6IFwiQGNvbW1lbnRcIiB9LFxuICAgICAgWy8oT05CVUlMRCkoXFxzKykvLCBbXCJrZXl3b3JkXCIsIFwiXCJdXSxcbiAgICAgIFsvKEVOVikoXFxzKykoW1xcd10rKS8sIFtcImtleXdvcmRcIiwgXCJcIiwgeyB0b2tlbjogXCJ2YXJpYWJsZVwiLCBuZXh0OiBcIkBhcmd1bWVudHNcIiB9XV0sXG4gICAgICBbXG4gICAgICAgIC8oRlJPTXxNQUlOVEFJTkVSfFJVTnxFWFBPU0V8RU5WfEFERHxBUkd8Vk9MVU1FfExBQkVMfFVTRVJ8V09SS0RJUnxDT1BZfENNRHxTVE9QU0lHTkFMfFNIRUxMfEhFQUxUSENIRUNLfEVOVFJZUE9JTlQpLyxcbiAgICAgICAgeyB0b2tlbjogXCJrZXl3b3JkXCIsIG5leHQ6IFwiQGFyZ3VtZW50c1wiIH1cbiAgICAgIF1cbiAgICBdLFxuICAgIGFyZ3VtZW50czogW1xuICAgICAgeyBpbmNsdWRlOiBcIkB3aGl0ZXNwYWNlXCIgfSxcbiAgICAgIHsgaW5jbHVkZTogXCJAc3RyaW5nc1wiIH0sXG4gICAgICBbXG4gICAgICAgIC8oQHZhcmlhYmxlKS8sXG4gICAgICAgIHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAZW9zXCI6IHsgdG9rZW46IFwidmFyaWFibGVcIiwgbmV4dDogXCJAcG9wYWxsXCIgfSxcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJ2YXJpYWJsZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvXFxcXC8sXG4gICAgICAgIHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAZW9zXCI6IFwiXCIsXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwiXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIC8uLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBlb3NcIjogeyB0b2tlbjogXCJcIiwgbmV4dDogXCJAcG9wYWxsXCIgfSxcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIF0sXG4gICAgLy8gRGVhbCB3aXRoIHdoaXRlIHNwYWNlLCBpbmNsdWRpbmcgY29tbWVudHNcbiAgICB3aGl0ZXNwYWNlOiBbXG4gICAgICBbXG4gICAgICAgIC9cXHMrLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBlb3NcIjogeyB0b2tlbjogXCJcIiwgbmV4dDogXCJAcG9wYWxsXCIgfSxcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIF0sXG4gICAgY29tbWVudDogW1svKF4jLiokKS8sIFwiY29tbWVudFwiLCBcIkBwb3BhbGxcIl1dLFxuICAgIC8vIFJlY29nbml6ZSBzdHJpbmdzLCBpbmNsdWRpbmcgdGhvc2UgYnJva2VuIGFjcm9zcyBsaW5lcyB3aXRoIFxcIChidXQgbm90IHdpdGhvdXQpXG4gICAgc3RyaW5nczogW1xuICAgICAgWy9cXFxcJyQvLCBcIlwiLCBcIkBwb3BhbGxcIl0sXG4gICAgICAvLyBcXCcgbGVhdmVzIEBhcmd1bWVudHMgYXQgZW9sXG4gICAgICBbL1xcXFwnLywgXCJcIl0sXG4gICAgICAvLyBcXCcgaXMgbm90IGEgc3RyaW5nXG4gICAgICBbLyckLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy8nLywgXCJzdHJpbmdcIiwgXCJAc3RyaW5nQm9keVwiXSxcbiAgICAgIFsvXCIkLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9cIi8sIFwic3RyaW5nXCIsIFwiQGRibFN0cmluZ0JvZHlcIl1cbiAgICBdLFxuICAgIHN0cmluZ0JvZHk6IFtcbiAgICAgIFtcbiAgICAgICAgL1teXFxcXFxcJCddLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBlb3NcIjogeyB0b2tlbjogXCJzdHJpbmdcIiwgbmV4dDogXCJAcG9wYWxsXCIgfSxcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJzdHJpbmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFsvXFxcXC4vLCBcInN0cmluZy5lc2NhcGVcIl0sXG4gICAgICBbLyckLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy8nLywgXCJzdHJpbmdcIiwgXCJAcG9wXCJdLFxuICAgICAgWy8oQHZhcmlhYmxlKS8sIFwidmFyaWFibGVcIl0sXG4gICAgICBbL1xcXFwkLywgXCJzdHJpbmdcIl0sXG4gICAgICBbLyQvLCBcInN0cmluZ1wiLCBcIkBwb3BhbGxcIl1cbiAgICBdLFxuICAgIGRibFN0cmluZ0JvZHk6IFtcbiAgICAgIFtcbiAgICAgICAgL1teXFxcXFxcJFwiXS8sXG4gICAgICAgIHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAZW9zXCI6IHsgdG9rZW46IFwic3RyaW5nXCIsIG5leHQ6IFwiQHBvcGFsbFwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBbL1xcXFwuLywgXCJzdHJpbmcuZXNjYXBlXCJdLFxuICAgICAgWy9cIiQvLCBcInN0cmluZ1wiLCBcIkBwb3BhbGxcIl0sXG4gICAgICBbL1wiLywgXCJzdHJpbmdcIiwgXCJAcG9wXCJdLFxuICAgICAgWy8oQHZhcmlhYmxlKS8sIFwidmFyaWFibGVcIl0sXG4gICAgICBbL1xcXFwkLywgXCJzdHJpbmdcIl0sXG4gICAgICBbLyQvLCBcInN0cmluZ1wiLCBcIkBwb3BhbGxcIl1cbiAgICBdXG4gIH1cbn07XG5leHBvcnQge1xuICBjb25mLFxuICBsYW5ndWFnZVxufTtcbiJdLCJuYW1lcyI6WyJjb25mIiwiYnJhY2tldHMiLCJhdXRvQ2xvc2luZ1BhaXJzIiwib3BlbiIsImNsb3NlIiwic3Vycm91bmRpbmdQYWlycyIsImxhbmd1YWdlIiwiZGVmYXVsdFRva2VuIiwidG9rZW5Qb3N0Zml4IiwidmFyaWFibGUiLCJ0b2tlbml6ZXIiLCJyb290IiwiaW5jbHVkZSIsInRva2VuIiwibmV4dCIsImFyZ3VtZW50cyIsImNhc2VzIiwid2hpdGVzcGFjZSIsImNvbW1lbnQiLCJzdHJpbmdzIiwic3RyaW5nQm9keSIsImRibFN0cmluZ0JvZHkiXSwic291cmNlUm9vdCI6IiJ9