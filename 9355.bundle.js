"use strict";(self.webpackChunktextWandler=self.webpackChunktextWandler||[]).push([[9355],{59355:(e,t,i)=>{i.r(t),i.d(t,{Adapter:()=>f,CodeActionAdaptor:()=>M,DefinitionAdapter:()=>C,DiagnosticsAdapter:()=>_,DocumentHighlightAdapter:()=>v,FormatAdapter:()=>O,FormatHelper:()=>L,FormatOnTypeAdapter:()=>N,InlayHintsAdapter:()=>R,Kind:()=>F,LibFiles:()=>y,OutlineAdapter:()=>A,QuickInfoAdapter:()=>k,ReferenceAdapter:()=>D,RenameAdapter:()=>K,SignatureHelpAdapter:()=>x,SuggestAdapter:()=>w,WorkerManager:()=>p,flattenDiagnosticMessageText:()=>h,getJavaScriptWorker:()=>V,getTypeScriptWorker:()=>W,setupJavaScript:()=>H,setupTypeScript:()=>E});var s,r,n=i(46415),a=i(19664),o=Object.defineProperty,l=Object.getOwnPropertyDescriptor,c=Object.getOwnPropertyNames,d=Object.prototype.hasOwnProperty,u=(e,t,i,s)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let r of c(t))d.call(e,r)||r===i||o(e,r,{get:()=>t[r],enumerable:!(s=l(t,r))||s.enumerable});return e},g={};u(g,s=n,"default"),r&&u(r,s,"default");var p=class{constructor(e,t){this._modeId=e,this._defaults=t,this._worker=null,this._client=null,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker())),this._updateExtraLibsToken=0,this._extraLibsChangeListener=this._defaults.onDidExtraLibsChange((()=>this._updateExtraLibs()))}dispose(){this._configChangeListener.dispose(),this._extraLibsChangeListener.dispose(),this._stopWorker()}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}async _updateExtraLibs(){if(!this._worker)return;const e=++this._updateExtraLibsToken,t=await this._worker.getProxy();this._updateExtraLibsToken===e&&t.updateExtraLibs(this._defaults.getExtraLibs())}_getClient(){return this._client||(this._client=(async()=>(this._worker=g.editor.createWebWorker({moduleId:"vs/language/typescript/tsWorker",label:this._modeId,keepIdleModels:!0,createData:{compilerOptions:this._defaults.getCompilerOptions(),extraLibs:this._defaults.getExtraLibs(),customWorkerPath:this._defaults.workerOptions.customWorkerPath,inlayHintsOptions:this._defaults.inlayHintsOptions}}),this._defaults.getEagerModelSync()?await this._worker.withSyncedResources(g.editor.getModels().filter((e=>e.getLanguageId()===this._modeId)).map((e=>e.uri))):await this._worker.getProxy()))()),this._client}async getLanguageServiceWorker(...e){const t=await this._getClient();return this._worker&&await this._worker.withSyncedResources(e),t}},m={};function h(e,t,i=0){if("string"==typeof e)return e;if(void 0===e)return"";let s="";if(i){s+=t;for(let e=0;e<i;e++)s+="  "}if(s+=e.messageText,i++,e.next)for(const r of e.next)s+=h(r,t,i);return s}function b(e){return e?e.map((e=>e.text)).join(""):""}m["lib.d.ts"]=!0,m["lib.decorators.d.ts"]=!0,m["lib.decorators.legacy.d.ts"]=!0,m["lib.dom.asynciterable.d.ts"]=!0,m["lib.dom.d.ts"]=!0,m["lib.dom.iterable.d.ts"]=!0,m["lib.es2015.collection.d.ts"]=!0,m["lib.es2015.core.d.ts"]=!0,m["lib.es2015.d.ts"]=!0,m["lib.es2015.generator.d.ts"]=!0,m["lib.es2015.iterable.d.ts"]=!0,m["lib.es2015.promise.d.ts"]=!0,m["lib.es2015.proxy.d.ts"]=!0,m["lib.es2015.reflect.d.ts"]=!0,m["lib.es2015.symbol.d.ts"]=!0,m["lib.es2015.symbol.wellknown.d.ts"]=!0,m["lib.es2016.array.include.d.ts"]=!0,m["lib.es2016.d.ts"]=!0,m["lib.es2016.full.d.ts"]=!0,m["lib.es2016.intl.d.ts"]=!0,m["lib.es2017.d.ts"]=!0,m["lib.es2017.date.d.ts"]=!0,m["lib.es2017.full.d.ts"]=!0,m["lib.es2017.intl.d.ts"]=!0,m["lib.es2017.object.d.ts"]=!0,m["lib.es2017.sharedmemory.d.ts"]=!0,m["lib.es2017.string.d.ts"]=!0,m["lib.es2017.typedarrays.d.ts"]=!0,m["lib.es2018.asyncgenerator.d.ts"]=!0,m["lib.es2018.asynciterable.d.ts"]=!0,m["lib.es2018.d.ts"]=!0,m["lib.es2018.full.d.ts"]=!0,m["lib.es2018.intl.d.ts"]=!0,m["lib.es2018.promise.d.ts"]=!0,m["lib.es2018.regexp.d.ts"]=!0,m["lib.es2019.array.d.ts"]=!0,m["lib.es2019.d.ts"]=!0,m["lib.es2019.full.d.ts"]=!0,m["lib.es2019.intl.d.ts"]=!0,m["lib.es2019.object.d.ts"]=!0,m["lib.es2019.string.d.ts"]=!0,m["lib.es2019.symbol.d.ts"]=!0,m["lib.es2020.bigint.d.ts"]=!0,m["lib.es2020.d.ts"]=!0,m["lib.es2020.date.d.ts"]=!0,m["lib.es2020.full.d.ts"]=!0,m["lib.es2020.intl.d.ts"]=!0,m["lib.es2020.number.d.ts"]=!0,m["lib.es2020.promise.d.ts"]=!0,m["lib.es2020.sharedmemory.d.ts"]=!0,m["lib.es2020.string.d.ts"]=!0,m["lib.es2020.symbol.wellknown.d.ts"]=!0,m["lib.es2021.d.ts"]=!0,m["lib.es2021.full.d.ts"]=!0,m["lib.es2021.intl.d.ts"]=!0,m["lib.es2021.promise.d.ts"]=!0,m["lib.es2021.string.d.ts"]=!0,m["lib.es2021.weakref.d.ts"]=!0,m["lib.es2022.array.d.ts"]=!0,m["lib.es2022.d.ts"]=!0,m["lib.es2022.error.d.ts"]=!0,m["lib.es2022.full.d.ts"]=!0,m["lib.es2022.intl.d.ts"]=!0,m["lib.es2022.object.d.ts"]=!0,m["lib.es2022.regexp.d.ts"]=!0,m["lib.es2022.sharedmemory.d.ts"]=!0,m["lib.es2022.string.d.ts"]=!0,m["lib.es2023.array.d.ts"]=!0,m["lib.es2023.collection.d.ts"]=!0,m["lib.es2023.d.ts"]=!0,m["lib.es2023.full.d.ts"]=!0,m["lib.es5.d.ts"]=!0,m["lib.es6.d.ts"]=!0,m["lib.esnext.collection.d.ts"]=!0,m["lib.esnext.d.ts"]=!0,m["lib.esnext.decorators.d.ts"]=!0,m["lib.esnext.disposable.d.ts"]=!0,m["lib.esnext.full.d.ts"]=!0,m["lib.esnext.intl.d.ts"]=!0,m["lib.esnext.object.d.ts"]=!0,m["lib.esnext.promise.d.ts"]=!0,m["lib.scripthost.d.ts"]=!0,m["lib.webworker.asynciterable.d.ts"]=!0,m["lib.webworker.d.ts"]=!0,m["lib.webworker.importscripts.d.ts"]=!0,m["lib.webworker.iterable.d.ts"]=!0;var f=class{constructor(e){this._worker=e}_textSpanToRange(e,t){let i=e.getPositionAt(t.start),s=e.getPositionAt(t.start+t.length),{lineNumber:r,column:n}=i,{lineNumber:a,column:o}=s;return{startLineNumber:r,startColumn:n,endLineNumber:a,endColumn:o}}},y=class{constructor(e){this._worker=e,this._libFiles={},this._hasFetchedLibFiles=!1,this._fetchLibFilesPromise=null}isLibFile(e){return!!e&&(0===e.path.indexOf("/lib.")&&!!m[e.path.slice(1)])}getOrCreateModel(e){const t=g.Uri.parse(e),i=g.editor.getModel(t);if(i)return i;if(this.isLibFile(t)&&this._hasFetchedLibFiles)return g.editor.createModel(this._libFiles[t.path.slice(1)],"typescript",t);const s=a.IF.getExtraLibs()[e];return s?g.editor.createModel(s.content,"typescript",t):null}_containsLibFile(e){for(let t of e)if(this.isLibFile(t))return!0;return!1}async fetchLibFilesIfNecessary(e){this._containsLibFile(e)&&await this._fetchLibFiles()}_fetchLibFiles(){return this._fetchLibFilesPromise||(this._fetchLibFilesPromise=this._worker().then((e=>e.getLibFiles())).then((e=>{this._hasFetchedLibFiles=!0,this._libFiles=e}))),this._fetchLibFilesPromise}},_=class extends f{constructor(e,t,i,s){super(s),this._libFiles=e,this._defaults=t,this._selector=i,this._disposables=[],this._listener=Object.create(null);const r=e=>{if(e.getLanguageId()!==i)return;const t=()=>{const{onlyVisible:t}=this._defaults.getDiagnosticsOptions();t?e.isAttachedToEditor()&&this._doValidate(e):this._doValidate(e)};let s;const r=e.onDidChangeContent((()=>{clearTimeout(s),s=window.setTimeout(t,500)})),n=e.onDidChangeAttached((()=>{const{onlyVisible:i}=this._defaults.getDiagnosticsOptions();i&&(e.isAttachedToEditor()?t():g.editor.setModelMarkers(e,this._selector,[]))}));this._listener[e.uri.toString()]={dispose(){r.dispose(),n.dispose(),clearTimeout(s)}},t()},n=e=>{g.editor.setModelMarkers(e,this._selector,[]);const t=e.uri.toString();this._listener[t]&&(this._listener[t].dispose(),delete this._listener[t])};this._disposables.push(g.editor.onDidCreateModel((e=>r(e)))),this._disposables.push(g.editor.onWillDisposeModel(n)),this._disposables.push(g.editor.onDidChangeModelLanguage((e=>{n(e.model),r(e.model)}))),this._disposables.push({dispose(){for(const e of g.editor.getModels())n(e)}});const a=()=>{for(const e of g.editor.getModels())n(e),r(e)};this._disposables.push(this._defaults.onDidChange(a)),this._disposables.push(this._defaults.onDidExtraLibsChange(a)),g.editor.getModels().forEach((e=>r(e)))}dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables=[]}async _doValidate(e){const t=await this._worker(e.uri);if(e.isDisposed())return;const i=[],{noSyntaxValidation:s,noSemanticValidation:r,noSuggestionDiagnostics:n}=this._defaults.getDiagnosticsOptions();s||i.push(t.getSyntacticDiagnostics(e.uri.toString())),r||i.push(t.getSemanticDiagnostics(e.uri.toString())),n||i.push(t.getSuggestionDiagnostics(e.uri.toString()));const a=await Promise.all(i);if(!a||e.isDisposed())return;const o=a.reduce(((e,t)=>t.concat(e)),[]).filter((e=>-1===(this._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore||[]).indexOf(e.code))),l=o.map((e=>e.relatedInformation||[])).reduce(((e,t)=>t.concat(e)),[]).map((e=>e.file?g.Uri.parse(e.file.fileName):null));await this._libFiles.fetchLibFilesIfNecessary(l),e.isDisposed()||g.editor.setModelMarkers(e,this._selector,o.map((t=>this._convertDiagnostics(e,t))))}_convertDiagnostics(e,t){const i=t.start||0,s=t.length||1,{lineNumber:r,column:n}=e.getPositionAt(i),{lineNumber:a,column:o}=e.getPositionAt(i+s),l=[];return t.reportsUnnecessary&&l.push(g.MarkerTag.Unnecessary),t.reportsDeprecated&&l.push(g.MarkerTag.Deprecated),{severity:this._tsDiagnosticCategoryToMarkerSeverity(t.category),startLineNumber:r,startColumn:n,endLineNumber:a,endColumn:o,message:h(t.messageText,"\n"),code:t.code.toString(),tags:l,relatedInformation:this._convertRelatedInformation(e,t.relatedInformation)}}_convertRelatedInformation(e,t){if(!t)return[];const i=[];return t.forEach((t=>{let s=e;if(t.file&&(s=this._libFiles.getOrCreateModel(t.file.fileName)),!s)return;const r=t.start||0,n=t.length||1,{lineNumber:a,column:o}=s.getPositionAt(r),{lineNumber:l,column:c}=s.getPositionAt(r+n);i.push({resource:s.uri,startLineNumber:a,startColumn:o,endLineNumber:l,endColumn:c,message:h(t.messageText,"\n")})})),i}_tsDiagnosticCategoryToMarkerSeverity(e){switch(e){case 1:return g.MarkerSeverity.Error;case 3:return g.MarkerSeverity.Info;case 0:return g.MarkerSeverity.Warning;case 2:return g.MarkerSeverity.Hint}return g.MarkerSeverity.Info}},w=class e extends f{get triggerCharacters(){return["."]}async provideCompletionItems(t,i,s,r){const n=t.getWordUntilPosition(i),a=new g.Range(i.lineNumber,n.startColumn,i.lineNumber,n.endColumn),o=t.uri,l=t.getOffsetAt(i),c=await this._worker(o);if(t.isDisposed())return;const d=await c.getCompletionsAtPosition(o.toString(),l);if(!d||t.isDisposed())return;return{suggestions:d.entries.map((s=>{let r=a;if(s.replacementSpan){const e=t.getPositionAt(s.replacementSpan.start),i=t.getPositionAt(s.replacementSpan.start+s.replacementSpan.length);r=new g.Range(e.lineNumber,e.column,i.lineNumber,i.column)}const n=[];return void 0!==s.kindModifiers&&-1!==s.kindModifiers.indexOf("deprecated")&&n.push(g.languages.CompletionItemTag.Deprecated),{uri:o,position:i,offset:l,range:r,label:s.name,insertText:s.name,sortText:s.sortText,kind:e.convertKind(s.kind),tags:n}}))}}async resolveCompletionItem(t,i){const s=t,r=s.uri,n=s.position,a=s.offset,o=await this._worker(r),l=await o.getCompletionEntryDetails(r.toString(),a,s.label);return l?{uri:r,position:n,label:l.name,kind:e.convertKind(l.kind),detail:b(l.displayParts),documentation:{value:e.createDocumentationString(l)}}:s}static convertKind(e){switch(e){case F.primitiveType:case F.keyword:return g.languages.CompletionItemKind.Keyword;case F.variable:case F.localVariable:return g.languages.CompletionItemKind.Variable;case F.memberVariable:case F.memberGetAccessor:case F.memberSetAccessor:return g.languages.CompletionItemKind.Field;case F.function:case F.memberFunction:case F.constructSignature:case F.callSignature:case F.indexSignature:return g.languages.CompletionItemKind.Function;case F.enum:return g.languages.CompletionItemKind.Enum;case F.module:return g.languages.CompletionItemKind.Module;case F.class:return g.languages.CompletionItemKind.Class;case F.interface:return g.languages.CompletionItemKind.Interface;case F.warning:return g.languages.CompletionItemKind.File}return g.languages.CompletionItemKind.Property}static createDocumentationString(e){let t=b(e.documentation);if(e.tags)for(const i of e.tags)t+=`\n\n${S(i)}`;return t}};function S(e){let t=`*@${e.name}*`;if("param"===e.name&&e.text){const[i,...s]=e.text;t+=`\`${i.text}\``,s.length>0&&(t+=` — ${s.map((e=>e.text)).join(" ")}`)}else Array.isArray(e.text)?t+=` — ${e.text.map((e=>e.text)).join(" ")}`:e.text&&(t+=` — ${e.text}`);return t}var x=class e extends f{constructor(){super(...arguments),this.signatureHelpTriggerCharacters=["(",","]}static _toSignatureHelpTriggerReason(e){switch(e.triggerKind){case g.languages.SignatureHelpTriggerKind.TriggerCharacter:return e.triggerCharacter?e.isRetrigger?{kind:"retrigger",triggerCharacter:e.triggerCharacter}:{kind:"characterTyped",triggerCharacter:e.triggerCharacter}:{kind:"invoked"};case g.languages.SignatureHelpTriggerKind.ContentChange:return e.isRetrigger?{kind:"retrigger"}:{kind:"invoked"};case g.languages.SignatureHelpTriggerKind.Invoke:default:return{kind:"invoked"}}}async provideSignatureHelp(t,i,s,r){const n=t.uri,a=t.getOffsetAt(i),o=await this._worker(n);if(t.isDisposed())return;const l=await o.getSignatureHelpItems(n.toString(),a,{triggerReason:e._toSignatureHelpTriggerReason(r)});if(!l||t.isDisposed())return;const c={activeSignature:l.selectedItemIndex,activeParameter:l.argumentIndex,signatures:[]};return l.items.forEach((e=>{const t={label:"",parameters:[]};t.documentation={value:b(e.documentation)},t.label+=b(e.prefixDisplayParts),e.parameters.forEach(((i,s,r)=>{const n=b(i.displayParts),a={label:n,documentation:{value:b(i.documentation)}};t.label+=n,t.parameters.push(a),s<r.length-1&&(t.label+=b(e.separatorDisplayParts))})),t.label+=b(e.suffixDisplayParts),c.signatures.push(t)})),{value:c,dispose(){}}}},k=class extends f{async provideHover(e,t,i){const s=e.uri,r=e.getOffsetAt(t),n=await this._worker(s);if(e.isDisposed())return;const a=await n.getQuickInfoAtPosition(s.toString(),r);if(!a||e.isDisposed())return;const o=b(a.documentation),l=a.tags?a.tags.map((e=>S(e))).join("  \n\n"):"",c=b(a.displayParts);return{range:this._textSpanToRange(e,a.textSpan),contents:[{value:"```typescript\n"+c+"\n```\n"},{value:o+(l?"\n\n"+l:"")}]}}},v=class extends f{async provideDocumentHighlights(e,t,i){const s=e.uri,r=e.getOffsetAt(t),n=await this._worker(s);if(e.isDisposed())return;const a=await n.getDocumentHighlights(s.toString(),r,[s.toString()]);return a&&!e.isDisposed()?a.flatMap((t=>t.highlightSpans.map((t=>({range:this._textSpanToRange(e,t.textSpan),kind:"writtenReference"===t.kind?g.languages.DocumentHighlightKind.Write:g.languages.DocumentHighlightKind.Text}))))):void 0}},C=class extends f{constructor(e,t){super(t),this._libFiles=e}async provideDefinition(e,t,i){const s=e.uri,r=e.getOffsetAt(t),n=await this._worker(s);if(e.isDisposed())return;const a=await n.getDefinitionAtPosition(s.toString(),r);if(!a||e.isDisposed())return;if(await this._libFiles.fetchLibFilesIfNecessary(a.map((e=>g.Uri.parse(e.fileName)))),e.isDisposed())return;const o=[];for(let e of a){const t=this._libFiles.getOrCreateModel(e.fileName);t&&o.push({uri:t.uri,range:this._textSpanToRange(t,e.textSpan)})}return o}},D=class extends f{constructor(e,t){super(t),this._libFiles=e}async provideReferences(e,t,i,s){const r=e.uri,n=e.getOffsetAt(t),a=await this._worker(r);if(e.isDisposed())return;const o=await a.getReferencesAtPosition(r.toString(),n);if(!o||e.isDisposed())return;if(await this._libFiles.fetchLibFilesIfNecessary(o.map((e=>g.Uri.parse(e.fileName)))),e.isDisposed())return;const l=[];for(let e of o){const t=this._libFiles.getOrCreateModel(e.fileName);t&&l.push({uri:t.uri,range:this._textSpanToRange(t,e.textSpan)})}return l}},A=class extends f{async provideDocumentSymbols(e,t){const i=e.uri,s=await this._worker(i);if(e.isDisposed())return;const r=await s.getNavigationTree(i.toString());if(!r||e.isDisposed())return;const n=(t,i)=>({name:t.text,detail:"",kind:I[t.kind]||g.languages.SymbolKind.Variable,range:this._textSpanToRange(e,t.spans[0]),selectionRange:this._textSpanToRange(e,t.spans[0]),tags:[],children:t.childItems?.map((e=>n(e,t.text))),containerName:i});return r.childItems?r.childItems.map((e=>n(e))):[]}},F=class{static{this.unknown=""}static{this.keyword="keyword"}static{this.script="script"}static{this.module="module"}static{this.class="class"}static{this.interface="interface"}static{this.type="type"}static{this.enum="enum"}static{this.variable="var"}static{this.localVariable="local var"}static{this.function="function"}static{this.localFunction="local function"}static{this.memberFunction="method"}static{this.memberGetAccessor="getter"}static{this.memberSetAccessor="setter"}static{this.memberVariable="property"}static{this.constructorImplementation="constructor"}static{this.callSignature="call"}static{this.indexSignature="index"}static{this.constructSignature="construct"}static{this.parameter="parameter"}static{this.typeParameter="type parameter"}static{this.primitiveType="primitive type"}static{this.label="label"}static{this.alias="alias"}static{this.const="const"}static{this.let="let"}static{this.warning="warning"}},I=Object.create(null);I[F.module]=g.languages.SymbolKind.Module,I[F.class]=g.languages.SymbolKind.Class,I[F.enum]=g.languages.SymbolKind.Enum,I[F.interface]=g.languages.SymbolKind.Interface,I[F.memberFunction]=g.languages.SymbolKind.Method,I[F.memberVariable]=g.languages.SymbolKind.Property,I[F.memberGetAccessor]=g.languages.SymbolKind.Property,I[F.memberSetAccessor]=g.languages.SymbolKind.Property,I[F.variable]=g.languages.SymbolKind.Variable,I[F.const]=g.languages.SymbolKind.Variable,I[F.localVariable]=g.languages.SymbolKind.Variable,I[F.variable]=g.languages.SymbolKind.Variable,I[F.function]=g.languages.SymbolKind.Function,I[F.localFunction]=g.languages.SymbolKind.Function;var T,P,L=class extends f{static _convertOptions(e){return{ConvertTabsToSpaces:e.insertSpaces,TabSize:e.tabSize,IndentSize:e.tabSize,IndentStyle:2,NewLineCharacter:"\n",InsertSpaceAfterCommaDelimiter:!0,InsertSpaceAfterSemicolonInForStatements:!0,InsertSpaceBeforeAndAfterBinaryOperators:!0,InsertSpaceAfterKeywordsInControlFlowStatements:!0,InsertSpaceAfterFunctionKeywordForAnonymousFunctions:!0,InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis:!1,InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets:!1,InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces:!1,PlaceOpenBraceOnNewLineForControlBlocks:!1,PlaceOpenBraceOnNewLineForFunctions:!1}}_convertTextChanges(e,t){return{text:t.newText,range:this._textSpanToRange(e,t.span)}}},O=class extends L{constructor(){super(...arguments),this.canFormatMultipleRanges=!1}async provideDocumentRangeFormattingEdits(e,t,i,s){const r=e.uri,n=e.getOffsetAt({lineNumber:t.startLineNumber,column:t.startColumn}),a=e.getOffsetAt({lineNumber:t.endLineNumber,column:t.endColumn}),o=await this._worker(r);if(e.isDisposed())return;const l=await o.getFormattingEditsForRange(r.toString(),n,a,L._convertOptions(i));return l&&!e.isDisposed()?l.map((t=>this._convertTextChanges(e,t))):void 0}},N=class extends L{get autoFormatTriggerCharacters(){return[";","}","\n"]}async provideOnTypeFormattingEdits(e,t,i,s,r){const n=e.uri,a=e.getOffsetAt(t),o=await this._worker(n);if(e.isDisposed())return;const l=await o.getFormattingEditsAfterKeystroke(n.toString(),a,i,L._convertOptions(s));return l&&!e.isDisposed()?l.map((t=>this._convertTextChanges(e,t))):void 0}},M=class extends L{async provideCodeActions(e,t,i,s){const r=e.uri,n=e.getOffsetAt({lineNumber:t.startLineNumber,column:t.startColumn}),a=e.getOffsetAt({lineNumber:t.endLineNumber,column:t.endColumn}),o=L._convertOptions(e.getOptions()),l=i.markers.filter((e=>e.code)).map((e=>e.code)).map(Number),c=await this._worker(r);if(e.isDisposed())return;const d=await c.getCodeFixesAtPosition(r.toString(),n,a,l,o);if(!d||e.isDisposed())return{actions:[],dispose:()=>{}};return{actions:d.filter((e=>0===e.changes.filter((e=>e.isNewFile)).length)).map((t=>this._tsCodeFixActionToMonacoCodeAction(e,i,t))),dispose:()=>{}}}_tsCodeFixActionToMonacoCodeAction(e,t,i){const s=[];for(const t of i.changes)for(const i of t.textChanges)s.push({resource:e.uri,versionId:void 0,textEdit:{range:this._textSpanToRange(e,i.span),text:i.newText}});return{title:i.description,edit:{edits:s},diagnostics:t.markers,kind:"quickfix"}}},K=class extends f{constructor(e,t){super(t),this._libFiles=e}async provideRenameEdits(e,t,i,s){const r=e.uri,n=r.toString(),a=e.getOffsetAt(t),o=await this._worker(r);if(e.isDisposed())return;const l=await o.getRenameInfo(n,a,{allowRenameOfImportPath:!1});if(!1===l.canRename)return{edits:[],rejectReason:l.localizedErrorMessage};if(void 0!==l.fileToRename)throw new Error("Renaming files is not supported.");const c=await o.findRenameLocations(n,a,!1,!1,!1);if(!c||e.isDisposed())return;const d=[];for(const e of c){const t=this._libFiles.getOrCreateModel(e.fileName);if(!t)throw new Error(`Unknown file ${e.fileName}.`);d.push({resource:t.uri,versionId:void 0,textEdit:{range:this._textSpanToRange(t,e.textSpan),text:i}})}return{edits:d}}},R=class extends f{async provideInlayHints(e,t,i){const s=e.uri,r=s.toString(),n=e.getOffsetAt({lineNumber:t.startLineNumber,column:t.startColumn}),a=e.getOffsetAt({lineNumber:t.endLineNumber,column:t.endColumn}),o=await this._worker(s);if(e.isDisposed())return null;return{hints:(await o.provideInlayHints(r,n,a)).map((t=>({...t,label:t.text,position:e.getPositionAt(t.position),kind:this._convertHintKind(t.kind)}))),dispose:()=>{}}}_convertHintKind(e){return"Parameter"===e?g.languages.InlayHintKind.Parameter:g.languages.InlayHintKind.Type}};function E(e){P=j(e,"typescript")}function H(e){T=j(e,"javascript")}function V(){return new Promise(((e,t)=>{if(!T)return t("JavaScript not registered!");e(T)}))}function W(){return new Promise(((e,t)=>{if(!P)return t("TypeScript not registered!");e(P)}))}function j(e,t){const i=[],s=[],r=new p(t,e);i.push(r);const n=(...e)=>r.getLanguageServiceWorker(...e),a=new y(n);return function(){const{modeConfiguration:i}=e;B(s),i.completionItems&&s.push(g.languages.registerCompletionItemProvider(t,new w(n))),i.signatureHelp&&s.push(g.languages.registerSignatureHelpProvider(t,new x(n))),i.hovers&&s.push(g.languages.registerHoverProvider(t,new k(n))),i.documentHighlights&&s.push(g.languages.registerDocumentHighlightProvider(t,new v(n))),i.definitions&&s.push(g.languages.registerDefinitionProvider(t,new C(a,n))),i.references&&s.push(g.languages.registerReferenceProvider(t,new D(a,n))),i.documentSymbols&&s.push(g.languages.registerDocumentSymbolProvider(t,new A(n))),i.rename&&s.push(g.languages.registerRenameProvider(t,new K(a,n))),i.documentRangeFormattingEdits&&s.push(g.languages.registerDocumentRangeFormattingEditProvider(t,new O(n))),i.onTypeFormattingEdits&&s.push(g.languages.registerOnTypeFormattingEditProvider(t,new N(n))),i.codeActions&&s.push(g.languages.registerCodeActionProvider(t,new M(n))),i.inlayHints&&s.push(g.languages.registerInlayHintsProvider(t,new R(n))),i.diagnostics&&s.push(new _(a,e,t,n))}(),i.push(function(e){return{dispose:()=>B(e)}}(s)),n}function B(e){for(;e.length;)e.pop().dispose()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,