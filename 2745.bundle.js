"use strict";(self.webpackChunktextWandler=self.webpackChunktextWandler||[]).push([[2745],{52745:(e,t,n)=>{n.r(t),n.d(t,{CompletionAdapter:()=>Ot,DefinitionAdapter:()=>Jt,DiagnosticsAdapter:()=>Wt,DocumentColorAdapter:()=>dn,DocumentFormattingEditProvider:()=>sn,DocumentHighlightAdapter:()=>Qt,DocumentLinkAdapter:()=>an,DocumentRangeFormattingEditProvider:()=>un,DocumentSymbolAdapter:()=>nn,FoldingRangeAdapter:()=>ln,HoverAdapter:()=>Bt,ReferenceAdapter:()=>en,RenameAdapter:()=>tn,SelectionRangeAdapter:()=>gn,WorkerManager:()=>jt,fromPosition:()=>Kt,fromRange:()=>Ht,setupMode:()=>fn,toRange:()=>Xt,toTextEdit:()=>$t});var r,i=n(34732),o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of s(t))u.call(e,i)||i===n||o(e,i,{get:()=>t[i],enumerable:!(r=a(t,i))||r.enumerable});return e},d={};c(d,i,"default"),r="object"==typeof self&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name&&void 0!==globalThis.workerttPolicy?globalThis.workerttPolicy:function(e,t){const n=globalThis.MonacoEnvironment;if(n?.createTrustedTypesPolicy)try{return n.createTrustedTypesPolicy(e,t)}catch(e){return}try{return globalThis.trustedTypes?.createPolicy(e,t)}catch(e){return}}("defaultWorkerFactory",{createScriptURL:e=>e});var l,g,f,h,p,m,v,b,k,y,_,w,x,I,E,C,A,S,R,T,L,M,P,D,F,j,N,U,W,V,O,K,H,X,z,$,B,q,G,Q,Y,J,Z,ee,te,ne,re,ie,oe,ae,se,ue,ce,de,le,ge,fe,he,pe,me,ve,be,ke,ye,_e,we,xe,Ie,Ee,Ce,Ae,Se,Re,Te,Le,Me,Pe,De,Fe,je,Ne,Ue,We,Ve,Oe,Ke,He,Xe,ze,$e,Be,qe,Ge,Qe,Ye,Je,Ze,et,tt,nt,rt,it,ot,at,st,ut,ct,dt,lt,gt,ft,ht,pt,mt,vt,bt,kt,yt,_t,wt,xt,It,Et,Ct,At,St,Rt,Tt,Lt,Mt,Pt,Dt,Ft,jt=class{constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){this._worker&&Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=function(e){const t=Promise.resolve(function(e){const t=e.label,n=globalThis.MonacoEnvironment;if(n){if("function"==typeof n.getWorker)return n.getWorker("workerMain.js",t);if("function"==typeof n.getWorkerUrl){const e=n.getWorkerUrl("workerMain.js",t);return new Worker(r?r.createScriptURL(e):e,{name:t,type:"module"})}}throw new Error("You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker")}({label:e.label??"monaco-editor-worker",moduleId:e.moduleId})).then((t=>(t.postMessage("ignore"),t.postMessage(e.createData),t)));return d.editor.createWebWorker({worker:t,host:e.host,keepIdleModels:e.keepIdleModels})}({moduleId:"vs/language/css/cssWorker",label:this._defaults.languageId,createData:{options:this._defaults.options,languageId:this._defaults.languageId}}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(l||(l={})).is=function(e){return"string"==typeof e},(g||(g={})).is=function(e){return"string"==typeof e},(h=f||(f={})).MIN_VALUE=-2147483648,h.MAX_VALUE=2147483647,h.is=function(e){return"number"==typeof e&&h.MIN_VALUE<=e&&e<=h.MAX_VALUE},(m=p||(p={})).MIN_VALUE=0,m.MAX_VALUE=2147483647,m.is=function(e){return"number"==typeof e&&m.MIN_VALUE<=e&&e<=m.MAX_VALUE},(b=v||(v={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=p.MAX_VALUE),t===Number.MAX_VALUE&&(t=p.MAX_VALUE),{line:e,character:t}},b.is=function(e){let t=e;return Nt.objectLiteral(t)&&Nt.uinteger(t.line)&&Nt.uinteger(t.character)},(y=k||(k={})).create=function(e,t,n,r){if(Nt.uinteger(e)&&Nt.uinteger(t)&&Nt.uinteger(n)&&Nt.uinteger(r))return{start:v.create(e,t),end:v.create(n,r)};if(v.is(e)&&v.is(t))return{start:e,end:t};throw new Error(`Range#create called with invalid arguments[${e}, ${t}, ${n}, ${r}]`)},y.is=function(e){let t=e;return Nt.objectLiteral(t)&&v.is(t.start)&&v.is(t.end)},(w=_||(_={})).create=function(e,t){return{uri:e,range:t}},w.is=function(e){let t=e;return Nt.objectLiteral(t)&&k.is(t.range)&&(Nt.string(t.uri)||Nt.undefined(t.uri))},(I=x||(x={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},I.is=function(e){let t=e;return Nt.objectLiteral(t)&&k.is(t.targetRange)&&Nt.string(t.targetUri)&&k.is(t.targetSelectionRange)&&(k.is(t.originSelectionRange)||Nt.undefined(t.originSelectionRange))},(C=E||(E={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},C.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.numberRange(t.red,0,1)&&Nt.numberRange(t.green,0,1)&&Nt.numberRange(t.blue,0,1)&&Nt.numberRange(t.alpha,0,1)},(S=A||(A={})).create=function(e,t){return{range:e,color:t}},S.is=function(e){const t=e;return Nt.objectLiteral(t)&&k.is(t.range)&&E.is(t.color)},(T=R||(R={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},T.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.label)&&(Nt.undefined(t.textEdit)||$.is(t))&&(Nt.undefined(t.additionalTextEdits)||Nt.typedArray(t.additionalTextEdits,$.is))},(M=L||(L={})).Comment="comment",M.Imports="imports",M.Region="region",(D=P||(P={})).create=function(e,t,n,r,i,o){const a={startLine:e,endLine:t};return Nt.defined(n)&&(a.startCharacter=n),Nt.defined(r)&&(a.endCharacter=r),Nt.defined(i)&&(a.kind=i),Nt.defined(o)&&(a.collapsedText=o),a},D.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.uinteger(t.startLine)&&Nt.uinteger(t.startLine)&&(Nt.undefined(t.startCharacter)||Nt.uinteger(t.startCharacter))&&(Nt.undefined(t.endCharacter)||Nt.uinteger(t.endCharacter))&&(Nt.undefined(t.kind)||Nt.string(t.kind))},(j=F||(F={})).create=function(e,t){return{location:e,message:t}},j.is=function(e){let t=e;return Nt.defined(t)&&_.is(t.location)&&Nt.string(t.message)},(U=N||(N={})).Error=1,U.Warning=2,U.Information=3,U.Hint=4,(V=W||(W={})).Unnecessary=1,V.Deprecated=2,(O||(O={})).is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.href)},(H=K||(K={})).create=function(e,t,n,r,i,o){let a={range:e,message:t};return Nt.defined(n)&&(a.severity=n),Nt.defined(r)&&(a.code=r),Nt.defined(i)&&(a.source=i),Nt.defined(o)&&(a.relatedInformation=o),a},H.is=function(e){var t;let n=e;return Nt.defined(n)&&k.is(n.range)&&Nt.string(n.message)&&(Nt.number(n.severity)||Nt.undefined(n.severity))&&(Nt.integer(n.code)||Nt.string(n.code)||Nt.undefined(n.code))&&(Nt.undefined(n.codeDescription)||Nt.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(Nt.string(n.source)||Nt.undefined(n.source))&&(Nt.undefined(n.relatedInformation)||Nt.typedArray(n.relatedInformation,F.is))},(z=X||(X={})).create=function(e,t,...n){let r={title:e,command:t};return Nt.defined(n)&&n.length>0&&(r.arguments=n),r},z.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.title)&&Nt.string(t.command)},(B=$||($={})).replace=function(e,t){return{range:e,newText:t}},B.insert=function(e,t){return{range:{start:e,end:e},newText:t}},B.del=function(e){return{range:e,newText:""}},B.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.newText)&&k.is(t.range)},(G=q||(q={})).create=function(e,t,n){const r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},G.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.label)&&(Nt.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(Nt.string(t.description)||void 0===t.description)},(Q||(Q={})).is=function(e){const t=e;return Nt.string(t)},(J=Y||(Y={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},J.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},J.del=function(e,t){return{range:e,newText:"",annotationId:t}},J.is=function(e){const t=e;return $.is(t)&&(q.is(t.annotationId)||Q.is(t.annotationId))},(ee=Z||(Z={})).create=function(e,t){return{textDocument:e,edits:t}},ee.is=function(e){let t=e;return Nt.defined(t)&&ge.is(t.textDocument)&&Array.isArray(t.edits)},(ne=te||(te={})).create=function(e,t,n){let r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ne.is=function(e){let t=e;return t&&"create"===t.kind&&Nt.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||Nt.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Nt.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(ie=re||(re={})).create=function(e,t,n,r){let i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},ie.is=function(e){let t=e;return t&&"rename"===t.kind&&Nt.string(t.oldUri)&&Nt.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||Nt.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Nt.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(ae=oe||(oe={})).create=function(e,t,n){let r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ae.is=function(e){let t=e;return t&&"delete"===t.kind&&Nt.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||Nt.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||Nt.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(se||(se={})).is=function(e){let t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((e=>Nt.string(e.kind)?te.is(e)||re.is(e)||oe.is(e):Z.is(e))))},(ce=ue||(ue={})).create=function(e){return{uri:e}},ce.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)},(le=de||(de={})).create=function(e,t){return{uri:e,version:t}},le.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)&&Nt.integer(t.version)},(fe=ge||(ge={})).create=function(e,t){return{uri:e,version:t}},fe.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)&&(null===t.version||Nt.integer(t.version))},(pe=he||(he={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},pe.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)&&Nt.string(t.languageId)&&Nt.integer(t.version)&&Nt.string(t.text)},(ve=me||(me={})).PlainText="plaintext",ve.Markdown="markdown",ve.is=function(e){const t=e;return t===ve.PlainText||t===ve.Markdown},(be||(be={})).is=function(e){const t=e;return Nt.objectLiteral(e)&&me.is(t.kind)&&Nt.string(t.value)},(ye=ke||(ke={})).Text=1,ye.Method=2,ye.Function=3,ye.Constructor=4,ye.Field=5,ye.Variable=6,ye.Class=7,ye.Interface=8,ye.Module=9,ye.Property=10,ye.Unit=11,ye.Value=12,ye.Enum=13,ye.Keyword=14,ye.Snippet=15,ye.Color=16,ye.File=17,ye.Reference=18,ye.Folder=19,ye.EnumMember=20,ye.Constant=21,ye.Struct=22,ye.Event=23,ye.Operator=24,ye.TypeParameter=25,(we=_e||(_e={})).PlainText=1,we.Snippet=2,(xe||(xe={})).Deprecated=1,(Ee=Ie||(Ie={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},Ee.is=function(e){const t=e;return t&&Nt.string(t.newText)&&k.is(t.insert)&&k.is(t.replace)},(Ae=Ce||(Ce={})).asIs=1,Ae.adjustIndentation=2,(Se||(Se={})).is=function(e){const t=e;return t&&(Nt.string(t.detail)||void 0===t.detail)&&(Nt.string(t.description)||void 0===t.description)},(Re||(Re={})).create=function(e){return{label:e}},(Te||(Te={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Me=Le||(Le={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Me.is=function(e){const t=e;return Nt.string(t)||Nt.objectLiteral(t)&&Nt.string(t.language)&&Nt.string(t.value)},(Pe||(Pe={})).is=function(e){let t=e;return!!t&&Nt.objectLiteral(t)&&(be.is(t.contents)||Le.is(t.contents)||Nt.typedArray(t.contents,Le.is))&&(void 0===e.range||k.is(e.range))},(De||(De={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(Fe||(Fe={})).create=function(e,t,...n){let r={label:e};return Nt.defined(t)&&(r.documentation=t),Nt.defined(n)?r.parameters=n:r.parameters=[],r},(Ne=je||(je={})).Text=1,Ne.Read=2,Ne.Write=3,(Ue||(Ue={})).create=function(e,t){let n={range:e};return Nt.number(t)&&(n.kind=t),n},(Ve=We||(We={})).File=1,Ve.Module=2,Ve.Namespace=3,Ve.Package=4,Ve.Class=5,Ve.Method=6,Ve.Property=7,Ve.Field=8,Ve.Constructor=9,Ve.Enum=10,Ve.Interface=11,Ve.Function=12,Ve.Variable=13,Ve.Constant=14,Ve.String=15,Ve.Number=16,Ve.Boolean=17,Ve.Array=18,Ve.Object=19,Ve.Key=20,Ve.Null=21,Ve.EnumMember=22,Ve.Struct=23,Ve.Event=24,Ve.Operator=25,Ve.TypeParameter=26,(Oe||(Oe={})).Deprecated=1,(Ke||(Ke={})).create=function(e,t,n,r,i){let o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(He||(He={})).create=function(e,t,n,r){return void 0!==r?{name:e,kind:t,location:{uri:n,range:r}}:{name:e,kind:t,location:{uri:n}}},(ze=Xe||(Xe={})).create=function(e,t,n,r,i,o){let a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},ze.is=function(e){let t=e;return t&&Nt.string(t.name)&&Nt.number(t.kind)&&k.is(t.range)&&k.is(t.selectionRange)&&(void 0===t.detail||Nt.string(t.detail))&&(void 0===t.deprecated||Nt.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},(Be=$e||($e={})).Empty="",Be.QuickFix="quickfix",Be.Refactor="refactor",Be.RefactorExtract="refactor.extract",Be.RefactorInline="refactor.inline",Be.RefactorRewrite="refactor.rewrite",Be.Source="source",Be.SourceOrganizeImports="source.organizeImports",Be.SourceFixAll="source.fixAll",(Ge=qe||(qe={})).Invoked=1,Ge.Automatic=2,(Ye=Qe||(Qe={})).create=function(e,t,n){let r={diagnostics:e};return null!=t&&(r.only=t),null!=n&&(r.triggerKind=n),r},Ye.is=function(e){let t=e;return Nt.defined(t)&&Nt.typedArray(t.diagnostics,K.is)&&(void 0===t.only||Nt.typedArray(t.only,Nt.string))&&(void 0===t.triggerKind||t.triggerKind===qe.Invoked||t.triggerKind===qe.Automatic)},(Ze=Je||(Je={})).create=function(e,t,n){let r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):X.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},Ze.is=function(e){let t=e;return t&&Nt.string(t.title)&&(void 0===t.diagnostics||Nt.typedArray(t.diagnostics,K.is))&&(void 0===t.kind||Nt.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||X.is(t.command))&&(void 0===t.isPreferred||Nt.boolean(t.isPreferred))&&(void 0===t.edit||se.is(t.edit))},(tt=et||(et={})).create=function(e,t){let n={range:e};return Nt.defined(t)&&(n.data=t),n},tt.is=function(e){let t=e;return Nt.defined(t)&&k.is(t.range)&&(Nt.undefined(t.command)||X.is(t.command))},(rt=nt||(nt={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},rt.is=function(e){let t=e;return Nt.defined(t)&&Nt.uinteger(t.tabSize)&&Nt.boolean(t.insertSpaces)},(ot=it||(it={})).create=function(e,t,n){return{range:e,target:t,data:n}},ot.is=function(e){let t=e;return Nt.defined(t)&&k.is(t.range)&&(Nt.undefined(t.target)||Nt.string(t.target))},(st=at||(at={})).create=function(e,t){return{range:e,parent:t}},st.is=function(e){let t=e;return Nt.objectLiteral(t)&&k.is(t.range)&&(void 0===t.parent||st.is(t.parent))},(ct=ut||(ut={})).namespace="namespace",ct.type="type",ct.class="class",ct.enum="enum",ct.interface="interface",ct.struct="struct",ct.typeParameter="typeParameter",ct.parameter="parameter",ct.variable="variable",ct.property="property",ct.enumMember="enumMember",ct.event="event",ct.function="function",ct.method="method",ct.macro="macro",ct.keyword="keyword",ct.modifier="modifier",ct.comment="comment",ct.string="string",ct.number="number",ct.regexp="regexp",ct.operator="operator",ct.decorator="decorator",(lt=dt||(dt={})).declaration="declaration",lt.definition="definition",lt.readonly="readonly",lt.static="static",lt.deprecated="deprecated",lt.abstract="abstract",lt.async="async",lt.modification="modification",lt.documentation="documentation",lt.defaultLibrary="defaultLibrary",(gt||(gt={})).is=function(e){const t=e;return Nt.objectLiteral(t)&&(void 0===t.resultId||"string"==typeof t.resultId)&&Array.isArray(t.data)&&(0===t.data.length||"number"==typeof t.data[0])},(ht=ft||(ft={})).create=function(e,t){return{range:e,text:t}},ht.is=function(e){const t=e;return null!=t&&k.is(t.range)&&Nt.string(t.text)},(mt=pt||(pt={})).create=function(e,t,n){return{range:e,variableName:t,caseSensitiveLookup:n}},mt.is=function(e){const t=e;return null!=t&&k.is(t.range)&&Nt.boolean(t.caseSensitiveLookup)&&(Nt.string(t.variableName)||void 0===t.variableName)},(bt=vt||(vt={})).create=function(e,t){return{range:e,expression:t}},bt.is=function(e){const t=e;return null!=t&&k.is(t.range)&&(Nt.string(t.expression)||void 0===t.expression)},(yt=kt||(kt={})).create=function(e,t){return{frameId:e,stoppedLocation:t}},yt.is=function(e){const t=e;return Nt.defined(t)&&k.is(e.stoppedLocation)},(wt=_t||(_t={})).Type=1,wt.Parameter=2,wt.is=function(e){return 1===e||2===e},(It=xt||(xt={})).create=function(e){return{value:e}},It.is=function(e){const t=e;return Nt.objectLiteral(t)&&(void 0===t.tooltip||Nt.string(t.tooltip)||be.is(t.tooltip))&&(void 0===t.location||_.is(t.location))&&(void 0===t.command||X.is(t.command))},(Ct=Et||(Et={})).create=function(e,t,n){const r={position:e,label:t};return void 0!==n&&(r.kind=n),r},Ct.is=function(e){const t=e;return Nt.objectLiteral(t)&&v.is(t.position)&&(Nt.string(t.label)||Nt.typedArray(t.label,xt.is))&&(void 0===t.kind||_t.is(t.kind))&&void 0===t.textEdits||Nt.typedArray(t.textEdits,$.is)&&(void 0===t.tooltip||Nt.string(t.tooltip)||be.is(t.tooltip))&&(void 0===t.paddingLeft||Nt.boolean(t.paddingLeft))&&(void 0===t.paddingRight||Nt.boolean(t.paddingRight))},(At||(At={})).createSnippet=function(e){return{kind:"snippet",value:e}},(St||(St={})).create=function(e,t,n,r){return{insertText:e,filterText:t,range:n,command:r}},(Rt||(Rt={})).create=function(e){return{items:e}},(Lt=Tt||(Tt={})).Invoked=0,Lt.Automatic=1,(Mt||(Mt={})).create=function(e,t){return{range:e,text:t}},(Pt||(Pt={})).create=function(e,t){return{triggerKind:e,selectedCompletionInfo:t}},(Dt||(Dt={})).is=function(e){const t=e;return Nt.objectLiteral(t)&&g.is(t.uri)&&Nt.string(t.name)},function(e){function t(e,n){if(e.length<=1)return e;const r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);let a=0,s=0,u=0;for(;a<i.length&&s<o.length;){let t=n(i[a],o[s]);e[u++]=t<=0?i[a++]:o[s++]}for(;a<i.length;)e[u++]=i[a++];for(;s<o.length;)e[u++]=o[s++];return e}e.create=function(e,t,n,r){return new Ut(e,t,n,r)},e.is=function(e){let t=e;return!!(Nt.defined(t)&&Nt.string(t.uri)&&(Nt.undefined(t.languageId)||Nt.string(t.languageId))&&Nt.uinteger(t.lineCount)&&Nt.func(t.getText)&&Nt.func(t.positionAt)&&Nt.func(t.offsetAt))},e.applyEdits=function(e,n){let r=e.getText(),i=t(n,((e,t)=>{let n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length;for(let t=i.length-1;t>=0;t--){let n=i[t],a=e.offsetAt(n.range.start),s=e.offsetAt(n.range.end);if(!(s<=o))throw new Error("Overlapping edit");r=r.substring(0,a)+n.newText+r.substring(s,r.length),o=a}return r}}(Ft||(Ft={}));var Nt,Ut=class{constructor(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}get uri(){return this._uri}get languageId(){return this._languageId}get version(){return this._version}getText(e){if(e){let t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content}update(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0}getLineOffsets(){if(void 0===this._lineOffsets){let e=[],t=this._content,n=!0;for(let r=0;r<t.length;r++){n&&(e.push(r),n=!1);let i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets}positionAt(e){e=Math.max(Math.min(e,this._content.length),0);let t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return v.create(0,e);for(;n<r;){let i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}let i=n-1;return v.create(i,e-t[i])}offsetAt(e){let t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;let n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)}get lineCount(){return this.getLineOffsets().length}};!function(e){const t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.numberRange=function(e,n,r){return"[object Number]"===t.call(e)&&n<=e&&e<=r},e.integer=function(e){return"[object Number]"===t.call(e)&&-2147483648<=e&&e<=2147483647},e.uinteger=function(e){return"[object Number]"===t.call(e)&&0<=e&&e<=2147483647},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(Nt||(Nt={}));var Wt=class{constructor(e,t,n){this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);const r=e=>{let t,n=e.getLanguageId();n===this._languageId&&(this._listener[e.uri.toString()]=e.onDidChangeContent((()=>{window.clearTimeout(t),t=window.setTimeout((()=>this._doValidate(e.uri,n)),500)})),this._doValidate(e.uri,n))},i=e=>{d.editor.setModelMarkers(e,this._languageId,[]);let t=e.uri.toString(),n=this._listener[t];n&&(n.dispose(),delete this._listener[t])};this._disposables.push(d.editor.onDidCreateModel(r)),this._disposables.push(d.editor.onWillDisposeModel(i)),this._disposables.push(d.editor.onDidChangeModelLanguage((e=>{i(e.model),r(e.model)}))),this._disposables.push(n((e=>{d.editor.getModels().forEach((e=>{e.getLanguageId()===this._languageId&&(i(e),r(e))}))}))),this._disposables.push({dispose:()=>{d.editor.getModels().forEach(i);for(let e in this._listener)this._listener[e].dispose()}}),d.editor.getModels().forEach(r)}dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables.length=0}_doValidate(e,t){this._worker(e).then((t=>t.doValidation(e.toString()))).then((n=>{const r=n.map((e=>function(e,t){let n="number"==typeof t.code?String(t.code):t.code;return{severity:Vt(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)));let i=d.editor.getModel(e);i&&i.getLanguageId()===t&&d.editor.setModelMarkers(i,t,r)})).then(void 0,(e=>{}))}};function Vt(e){switch(e){case N.Error:return d.MarkerSeverity.Error;case N.Warning:return d.MarkerSeverity.Warning;case N.Information:return d.MarkerSeverity.Info;case N.Hint:return d.MarkerSeverity.Hint;default:return d.MarkerSeverity.Info}}var Ot=class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),Kt(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new d.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:zt(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:Xt(e.textEdit.insert),replace:Xt(e.textEdit.replace)}:t.range=Xt(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map($t)),e.insertTextFormat===_e.Snippet&&(t.insertTextRules=d.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}};function Kt(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function Ht(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function Xt(e){if(e)return new d.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function zt(e){const t=d.languages.CompletionItemKind;switch(e){case ke.Text:return t.Text;case ke.Method:return t.Method;case ke.Function:return t.Function;case ke.Constructor:return t.Constructor;case ke.Field:return t.Field;case ke.Variable:return t.Variable;case ke.Class:return t.Class;case ke.Interface:return t.Interface;case ke.Module:return t.Module;case ke.Property:return t.Property;case ke.Unit:return t.Unit;case ke.Value:return t.Value;case ke.Enum:return t.Enum;case ke.Keyword:return t.Keyword;case ke.Snippet:return t.Snippet;case ke.Color:return t.Color;case ke.File:return t.File;case ke.Reference:return t.Reference}return t.Property}function $t(e){if(e)return{range:Xt(e.range),text:e.newText}}var Bt=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),Kt(t)))).then((e=>{if(e)return{range:Xt(e.range),contents:Gt(e.contents)}}))}};function qt(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function Gt(e){if(e)return Array.isArray(e)?e.map(qt):[qt(e)]}var Qt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),Kt(t)))).then((e=>{if(e)return e.map((e=>({range:Xt(e.range),kind:Yt(e.kind)})))}))}};function Yt(e){switch(e){case je.Read:return d.languages.DocumentHighlightKind.Read;case je.Write:return d.languages.DocumentHighlightKind.Write;case je.Text:return d.languages.DocumentHighlightKind.Text}return d.languages.DocumentHighlightKind.Text}var Jt=class{constructor(e){this._worker=e}provideDefinition(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDefinition(r.toString(),Kt(t)))).then((e=>{if(e)return[Zt(e)]}))}};function Zt(e){return{uri:d.Uri.parse(e.uri),range:Xt(e.range)}}var en=class{constructor(e){this._worker=e}provideReferences(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.findReferences(i.toString(),Kt(t)))).then((e=>{if(e)return e.map(Zt)}))}},tn=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),Kt(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=d.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,versionId:void 0,textEdit:{range:Xt(i.range),text:i.newText}})}return{edits:t}}(e)))}},nn=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>"children"in e?rn(e):{name:e.name,detail:"",containerName:e.containerName,kind:on(e.kind),range:Xt(e.location.range),selectionRange:Xt(e.location.range),tags:[]}))}))}};function rn(e){return{name:e.name,detail:e.detail??"",kind:on(e.kind),range:Xt(e.range),selectionRange:Xt(e.selectionRange),tags:e.tags??[],children:(e.children??[]).map((e=>rn(e)))}}function on(e){let t=d.languages.SymbolKind;switch(e){case We.File:return t.File;case We.Module:return t.Module;case We.Namespace:return t.Namespace;case We.Package:return t.Package;case We.Class:return t.Class;case We.Method:return t.Method;case We.Property:return t.Property;case We.Field:return t.Field;case We.Constructor:return t.Constructor;case We.Enum:return t.Enum;case We.Interface:return t.Interface;case We.Function:return t.Function;case We.Variable:return t.Variable;case We.Constant:return t.Constant;case We.String:return t.String;case We.Number:return t.Number;case We.Boolean:return t.Boolean;case We.Array:return t.Array}return t.Function}var an=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:Xt(e.range),url:e.target})))}}))}},sn=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,cn(t)).then((e=>{if(e&&0!==e.length)return e.map($t)}))))}},un=class{constructor(e){this._worker=e,this.canFormatMultipleRanges=!1}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),Ht(t),cn(n)).then((e=>{if(e&&0!==e.length)return e.map($t)}))))}};function cn(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var dn=class{constructor(e){this._worker=e}provideDocumentColors(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentColors(n.toString()))).then((e=>{if(e)return e.map((e=>({color:e.color,range:Xt(e.range)})))}))}provideColorPresentations(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getColorPresentations(r.toString(),t.color,Ht(t.range)))).then((e=>{if(e)return e.map((e=>{let t={label:e.label};return e.textEdit&&(t.textEdit=$t(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map($t)),t}))}))}},ln=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case L.Comment:return d.languages.FoldingRangeKind.Comment;case L.Imports:return d.languages.FoldingRangeKind.Imports;case L.Region:return d.languages.FoldingRangeKind.Region}}(e.kind)),t}))}))}},gn=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(Kt)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:Xt(e.range)}),e=e.parent;return t}))}))}};function fn(e){const t=[],n=[],r=new jt(e);t.push(r);const i=(...e)=>r.getLanguageServiceWorker(...e);return function(){const{languageId:t,modeConfiguration:r}=e;pn(n),r.completionItems&&n.push(d.languages.registerCompletionItemProvider(t,new Ot(i,["/","-",":"]))),r.hovers&&n.push(d.languages.registerHoverProvider(t,new Bt(i))),r.documentHighlights&&n.push(d.languages.registerDocumentHighlightProvider(t,new Qt(i))),r.definitions&&n.push(d.languages.registerDefinitionProvider(t,new Jt(i))),r.references&&n.push(d.languages.registerReferenceProvider(t,new en(i))),r.documentSymbols&&n.push(d.languages.registerDocumentSymbolProvider(t,new nn(i))),r.rename&&n.push(d.languages.registerRenameProvider(t,new tn(i))),r.colors&&n.push(d.languages.registerColorProvider(t,new dn(i))),r.foldingRanges&&n.push(d.languages.registerFoldingRangeProvider(t,new ln(i))),r.diagnostics&&n.push(new Wt(t,i,e.onDidChange)),r.selectionRanges&&n.push(d.languages.registerSelectionRangeProvider(t,new gn(i))),r.documentFormattingEdits&&n.push(d.languages.registerDocumentFormattingEditProvider(t,new sn(i))),r.documentRangeFormattingEdits&&n.push(d.languages.registerDocumentRangeFormattingEditProvider(t,new un(i)))}(),t.push(hn(n)),hn(t)}function hn(e){return{dispose:()=>pn(e)}}function pn(e){for(;e.length;)e.pop().dispose()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnpYLEtBSTNCK1ksRUFBa0JrQixlQUNwQnBCLEVBQVV2SixLQUNSL1osRUFBMkI0ZSxVQUFVK0YsNkJBQ25DOVksRUFDQSxJQUFJNlcsR0FBb0JqWSxLQUkxQitZLEVBQWtCNU4sYUFDcEIwTixFQUFVdkosS0FDUixJQUFJZ0IsR0FBbUJsUCxFQUFZcEIsRUFBUW5CLEVBQVNXLGNBR3BEdVosRUFBa0JMLGlCQUNwQkcsRUFBVXZKLEtBQ1IvWixFQUEyQjRlLFVBQVVnRywrQkFDbkMvWSxFQUNBLElBQUlrWCxHQUFzQnRZLEtBSTVCK1ksRUFBa0JxQix5QkFDcEJ2QixFQUFVdkosS0FDUi9aLEVBQTJCNGUsVUFBVWtHLHVDQUNuQ2paLEVBQ0EsSUFBSThWLEdBQStCbFgsS0FJckMrWSxFQUFrQnVCLDhCQUNwQnpCLEVBQVV2SixLQUNSL1osRUFBMkI0ZSxVQUFVb0csNENBQ25DblosRUFDQSxJQUFJa1csR0FBb0N0WCxJQUloRCxDQUNBd2EsR0FDQTVCLEVBQVl0SixLQUFLbUwsR0FBYTVCLElBQ3ZCNEIsR0FBYTdCLEVBQ3RCLENBQ0EsU0FBUzZCLEdBQWE3QixHQUNwQixNQUFPLENBQUVsWixRQUFTLElBQU1zWixHQUFXSixHQUNyQyxDQUNBLFNBQVNJLEdBQVdKLEdBQ2xCLEtBQU9BLEVBQVlsVCxRQUNqQmtULEVBQVk4QixNQUFNaGIsU0FFdEIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RleHRXYW5kbGVyLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL2Nzcy9jc3NNb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFZlcnNpb246IDAuNTMuMCg0ZTQ1YmEwYzVmZjQ1ZmM2MWMwY2NhYzYxYzA5ODczNjlkZjA0YTZlKVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21vbmFjby1lZGl0b3IvYmxvYi9tYWluL0xJQ0VOU0UudHh0XG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xuXG4vLyBzcmMvZmlsbGVycy9tb25hY28tZWRpdG9yLWNvcmUudHNcbnZhciBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cyA9IHt9O1xuX19yZUV4cG9ydChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cywgbW9uYWNvX2VkaXRvcl9jb3JlX3N0YXIpO1xuaW1wb3J0ICogYXMgbW9uYWNvX2VkaXRvcl9jb3JlX3N0YXIgZnJvbSBcIi4uLy4uL2VkaXRvci9lZGl0b3IuYXBpLmpzXCI7XG5cbi8vIHNyYy9jb21tb24vd29ya2Vycy50c1xuZnVuY3Rpb24gY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5KHBvbGljeU5hbWUsIHBvbGljeU9wdGlvbnMpIHtcbiAgY29uc3QgbW9uYWNvRW52aXJvbm1lbnQgPSBnbG9iYWxUaGlzLk1vbmFjb0Vudmlyb25tZW50O1xuICBpZiAobW9uYWNvRW52aXJvbm1lbnQ/LmNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbW9uYWNvRW52aXJvbm1lbnQuY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5KHBvbGljeU5hbWUsIHBvbGljeU9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy50cnVzdGVkVHlwZXM/LmNyZWF0ZVBvbGljeShwb2xpY3lOYW1lLCBwb2xpY3lPcHRpb25zKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbn1cbnZhciB0dFBvbGljeTtcbmlmICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmLmNvbnN0cnVjdG9yICYmIHNlbGYuY29uc3RydWN0b3IubmFtZSA9PT0gXCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZVwiICYmIGdsb2JhbFRoaXMud29ya2VydHRQb2xpY3kgIT09IHZvaWQgMCkge1xuICB0dFBvbGljeSA9IGdsb2JhbFRoaXMud29ya2VydHRQb2xpY3k7XG59IGVsc2Uge1xuICB0dFBvbGljeSA9IGNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeShcImRlZmF1bHRXb3JrZXJGYWN0b3J5XCIsIHtcbiAgICBjcmVhdGVTY3JpcHRVUkw6ICh2YWx1ZSkgPT4gdmFsdWVcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRXb3JrZXIoZGVzY3JpcHRvcikge1xuICBjb25zdCBsYWJlbCA9IGRlc2NyaXB0b3IubGFiZWw7XG4gIGNvbnN0IG1vbmFjb0Vudmlyb25tZW50ID0gZ2xvYmFsVGhpcy5Nb25hY29FbnZpcm9ubWVudDtcbiAgaWYgKG1vbmFjb0Vudmlyb25tZW50KSB7XG4gICAgaWYgKHR5cGVvZiBtb25hY29FbnZpcm9ubWVudC5nZXRXb3JrZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIG1vbmFjb0Vudmlyb25tZW50LmdldFdvcmtlcihcIndvcmtlck1haW4uanNcIiwgbGFiZWwpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1vbmFjb0Vudmlyb25tZW50LmdldFdvcmtlclVybCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCB3b3JrZXJVcmwgPSBtb25hY29FbnZpcm9ubWVudC5nZXRXb3JrZXJVcmwoXCJ3b3JrZXJNYWluLmpzXCIsIGxhYmVsKTtcbiAgICAgIHJldHVybiBuZXcgV29ya2VyKFxuICAgICAgICB0dFBvbGljeSA/IHR0UG9saWN5LmNyZWF0ZVNjcmlwdFVSTCh3b3JrZXJVcmwpIDogd29ya2VyVXJsLFxuICAgICAgICB7IG5hbWU6IGxhYmVsLCB0eXBlOiBcIm1vZHVsZVwiIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBgWW91IG11c3QgZGVmaW5lIGEgZnVuY3Rpb24gTW9uYWNvRW52aXJvbm1lbnQuZ2V0V29ya2VyVXJsIG9yIE1vbmFjb0Vudmlyb25tZW50LmdldFdvcmtlcmBcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdlYldvcmtlcihvcHRzKSB7XG4gIGNvbnN0IHdvcmtlciA9IFByb21pc2UucmVzb2x2ZShcbiAgICBnZXRXb3JrZXIoe1xuICAgICAgbGFiZWw6IG9wdHMubGFiZWwgPz8gXCJtb25hY28tZWRpdG9yLXdvcmtlclwiLFxuICAgICAgbW9kdWxlSWQ6IG9wdHMubW9kdWxlSWRcbiAgICB9KVxuICApLnRoZW4oKHcpID0+IHtcbiAgICB3LnBvc3RNZXNzYWdlKFwiaWdub3JlXCIpO1xuICAgIHcucG9zdE1lc3NhZ2Uob3B0cy5jcmVhdGVEYXRhKTtcbiAgICByZXR1cm4gdztcbiAgfSk7XG4gIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3IuY3JlYXRlV2ViV29ya2VyKHtcbiAgICB3b3JrZXIsXG4gICAgaG9zdDogb3B0cy5ob3N0LFxuICAgIGtlZXBJZGxlTW9kZWxzOiBvcHRzLmtlZXBJZGxlTW9kZWxzXG4gIH0pO1xufVxuXG4vLyBzcmMvbGFuZ3VhZ2UvY3NzL3dvcmtlck1hbmFnZXIudHNcbnZhciBTVE9QX1dIRU5fSURMRV9GT1IgPSAyICogNjAgKiAxZTM7XG52YXIgV29ya2VyTWFuYWdlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICB0aGlzLl9kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgdGhpcy5fY2xpZW50ID0gbnVsbDtcbiAgICB0aGlzLl9pZGxlQ2hlY2tJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB0aGlzLl9jaGVja0lmSWRsZSgpLCAzMCAqIDFlMyk7XG4gICAgdGhpcy5fbGFzdFVzZWRUaW1lID0gMDtcbiAgICB0aGlzLl9jb25maWdDaGFuZ2VMaXN0ZW5lciA9IHRoaXMuX2RlZmF1bHRzLm9uRGlkQ2hhbmdlKCgpID0+IHRoaXMuX3N0b3BXb3JrZXIoKSk7XG4gIH1cbiAgX3N0b3BXb3JrZXIoKSB7XG4gICAgaWYgKHRoaXMuX3dvcmtlcikge1xuICAgICAgdGhpcy5fd29ya2VyLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuX2NsaWVudCA9IG51bGw7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2lkbGVDaGVja0ludGVydmFsKTtcbiAgICB0aGlzLl9jb25maWdDaGFuZ2VMaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICB9XG4gIF9jaGVja0lmSWRsZSgpIHtcbiAgICBpZiAoIXRoaXMuX3dvcmtlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdGltZVBhc3NlZFNpbmNlTGFzdFVzZWQgPSBEYXRlLm5vdygpIC0gdGhpcy5fbGFzdFVzZWRUaW1lO1xuICAgIGlmICh0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA+IFNUT1BfV0hFTl9JRExFX0ZPUikge1xuICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgIH1cbiAgfVxuICBfZ2V0Q2xpZW50KCkge1xuICAgIHRoaXMuX2xhc3RVc2VkVGltZSA9IERhdGUubm93KCk7XG4gICAgaWYgKCF0aGlzLl9jbGllbnQpIHtcbiAgICAgIHRoaXMuX3dvcmtlciA9IGNyZWF0ZVdlYldvcmtlcih7XG4gICAgICAgIC8vIG1vZHVsZSB0aGF0IGV4cG9ydHMgdGhlIGNyZWF0ZSgpIG1ldGhvZCBhbmQgcmV0dXJucyBhIGBDU1NXb3JrZXJgIGluc3RhbmNlXG4gICAgICAgIG1vZHVsZUlkOiBcInZzL2xhbmd1YWdlL2Nzcy9jc3NXb3JrZXJcIixcbiAgICAgICAgbGFiZWw6IHRoaXMuX2RlZmF1bHRzLmxhbmd1YWdlSWQsXG4gICAgICAgIC8vIHBhc3NlZCBpbiB0byB0aGUgY3JlYXRlKCkgbWV0aG9kXG4gICAgICAgIGNyZWF0ZURhdGE6IHtcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLl9kZWZhdWx0cy5vcHRpb25zLFxuICAgICAgICAgIGxhbmd1YWdlSWQ6IHRoaXMuX2RlZmF1bHRzLmxhbmd1YWdlSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9jbGllbnQgPSB0aGlzLl93b3JrZXIuZ2V0UHJveHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudDtcbiAgfVxuICBnZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIoLi4ucmVzb3VyY2VzKSB7XG4gICAgbGV0IF9jbGllbnQ7XG4gICAgcmV0dXJuIHRoaXMuX2dldENsaWVudCgpLnRoZW4oKGNsaWVudCkgPT4ge1xuICAgICAgX2NsaWVudCA9IGNsaWVudDtcbiAgICB9KS50aGVuKChfKSA9PiB7XG4gICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93b3JrZXIud2l0aFN5bmNlZFJlc291cmNlcyhyZXNvdXJjZXMpO1xuICAgICAgfVxuICAgIH0pLnRoZW4oKF8pID0+IF9jbGllbnQpO1xuICB9XG59O1xuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzL2xpYi9lc20vbWFpbi5qc1xudmFyIERvY3VtZW50VXJpO1xuKGZ1bmN0aW9uKERvY3VtZW50VXJpMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG4gIH1cbiAgRG9jdW1lbnRVcmkyLmlzID0gaXM7XG59KShEb2N1bWVudFVyaSB8fCAoRG9jdW1lbnRVcmkgPSB7fSkpO1xudmFyIFVSSTtcbihmdW5jdGlvbihVUkkyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbiAgfVxuICBVUkkyLmlzID0gaXM7XG59KShVUkkgfHwgKFVSSSA9IHt9KSk7XG52YXIgaW50ZWdlcjtcbihmdW5jdGlvbihpbnRlZ2VyMikge1xuICBpbnRlZ2VyMi5NSU5fVkFMVUUgPSAtMjE0NzQ4MzY0ODtcbiAgaW50ZWdlcjIuTUFYX1ZBTFVFID0gMjE0NzQ4MzY0NztcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGludGVnZXIyLk1JTl9WQUxVRSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBpbnRlZ2VyMi5NQVhfVkFMVUU7XG4gIH1cbiAgaW50ZWdlcjIuaXMgPSBpcztcbn0pKGludGVnZXIgfHwgKGludGVnZXIgPSB7fSkpO1xudmFyIHVpbnRlZ2VyO1xuKGZ1bmN0aW9uKHVpbnRlZ2VyMikge1xuICB1aW50ZWdlcjIuTUlOX1ZBTFVFID0gMDtcbiAgdWludGVnZXIyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB1aW50ZWdlcjIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IHVpbnRlZ2VyMi5NQVhfVkFMVUU7XG4gIH1cbiAgdWludGVnZXIyLmlzID0gaXM7XG59KSh1aW50ZWdlciB8fCAodWludGVnZXIgPSB7fSkpO1xudmFyIFBvc2l0aW9uO1xuKGZ1bmN0aW9uKFBvc2l0aW9uMykge1xuICBmdW5jdGlvbiBjcmVhdGUobGluZSwgY2hhcmFjdGVyKSB7XG4gICAgaWYgKGxpbmUgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgIGxpbmUgPSB1aW50ZWdlci5NQVhfVkFMVUU7XG4gICAgfVxuICAgIGlmIChjaGFyYWN0ZXIgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgIGNoYXJhY3RlciA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbGluZSwgY2hhcmFjdGVyIH07XG4gIH1cbiAgUG9zaXRpb24zLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLmNoYXJhY3Rlcik7XG4gIH1cbiAgUG9zaXRpb24zLmlzID0gaXM7XG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xudmFyIFJhbmdlO1xuKGZ1bmN0aW9uKFJhbmdlMykge1xuICBmdW5jdGlvbiBjcmVhdGUob25lLCB0d28sIHRocmVlLCBmb3VyKSB7XG4gICAgaWYgKElzLnVpbnRlZ2VyKG9uZSkgJiYgSXMudWludGVnZXIodHdvKSAmJiBJcy51aW50ZWdlcih0aHJlZSkgJiYgSXMudWludGVnZXIoZm91cikpIHtcbiAgICAgIHJldHVybiB7IHN0YXJ0OiBQb3NpdGlvbi5jcmVhdGUob25lLCB0d28pLCBlbmQ6IFBvc2l0aW9uLmNyZWF0ZSh0aHJlZSwgZm91cikgfTtcbiAgICB9IGVsc2UgaWYgKFBvc2l0aW9uLmlzKG9uZSkgJiYgUG9zaXRpb24uaXModHdvKSkge1xuICAgICAgcmV0dXJuIHsgc3RhcnQ6IG9uZSwgZW5kOiB0d28gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbJHtvbmV9LCAke3R3b30sICR7dGhyZWV9LCAke2ZvdXJ9XWApO1xuICAgIH1cbiAgfVxuICBSYW5nZTMuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5zdGFydCkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLmVuZCk7XG4gIH1cbiAgUmFuZ2UzLmlzID0gaXM7XG59KShSYW5nZSB8fCAoUmFuZ2UgPSB7fSkpO1xudmFyIExvY2F0aW9uO1xuKGZ1bmN0aW9uKExvY2F0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCByYW5nZSkge1xuICAgIHJldHVybiB7IHVyaSwgcmFuZ2UgfTtcbiAgfVxuICBMb2NhdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnVyaSkpO1xuICB9XG4gIExvY2F0aW9uMi5pcyA9IGlzO1xufSkoTG9jYXRpb24gfHwgKExvY2F0aW9uID0ge30pKTtcbnZhciBMb2NhdGlvbkxpbms7XG4oZnVuY3Rpb24oTG9jYXRpb25MaW5rMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlKSB7XG4gICAgcmV0dXJuIHsgdGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlIH07XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldFVyaSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKSAmJiAoUmFuZ2UuaXMoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSk7XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5pcyA9IGlzO1xufSkoTG9jYXRpb25MaW5rIHx8IChMb2NhdGlvbkxpbmsgPSB7fSkpO1xudmFyIENvbG9yO1xuKGZ1bmN0aW9uKENvbG9yMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVkLFxuICAgICAgZ3JlZW4sXG4gICAgICBibHVlLFxuICAgICAgYWxwaGFcbiAgICB9O1xuICB9XG4gIENvbG9yMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUucmVkLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuZ3JlZW4sIDAsIDEpICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5ibHVlLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYWxwaGEsIDAsIDEpO1xuICB9XG4gIENvbG9yMi5pcyA9IGlzO1xufSkoQ29sb3IgfHwgKENvbG9yID0ge30pKTtcbnZhciBDb2xvckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKENvbG9ySW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgY29sb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2UsXG4gICAgICBjb2xvclxuICAgIH07XG4gIH1cbiAgQ29sb3JJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBDb2xvci5pcyhjYW5kaWRhdGUuY29sb3IpO1xuICB9XG4gIENvbG9ySW5mb3JtYXRpb24yLmlzID0gaXM7XG59KShDb2xvckluZm9ybWF0aW9uIHx8IChDb2xvckluZm9ybWF0aW9uID0ge30pKTtcbnZhciBDb2xvclByZXNlbnRhdGlvbjtcbihmdW5jdGlvbihDb2xvclByZXNlbnRhdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCB0ZXh0RWRpdCwgYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbCxcbiAgICAgIHRleHRFZGl0LFxuICAgICAgYWRkaXRpb25hbFRleHRFZGl0c1xuICAgIH07XG4gIH1cbiAgQ29sb3JQcmVzZW50YXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRleHRFZGl0KSB8fCBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzLCBUZXh0RWRpdC5pcykpO1xuICB9XG4gIENvbG9yUHJlc2VudGF0aW9uMi5pcyA9IGlzO1xufSkoQ29sb3JQcmVzZW50YXRpb24gfHwgKENvbG9yUHJlc2VudGF0aW9uID0ge30pKTtcbnZhciBGb2xkaW5nUmFuZ2VLaW5kO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZUtpbmQyKSB7XG4gIEZvbGRpbmdSYW5nZUtpbmQyLkNvbW1lbnQgPSBcImNvbW1lbnRcIjtcbiAgRm9sZGluZ1JhbmdlS2luZDIuSW1wb3J0cyA9IFwiaW1wb3J0c1wiO1xuICBGb2xkaW5nUmFuZ2VLaW5kMi5SZWdpb24gPSBcInJlZ2lvblwiO1xufSkoRm9sZGluZ1JhbmdlS2luZCB8fCAoRm9sZGluZ1JhbmdlS2luZCA9IHt9KSk7XG52YXIgRm9sZGluZ1JhbmdlO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDaGFyYWN0ZXIsIGVuZENoYXJhY3Rlciwga2luZCwgY29sbGFwc2VkVGV4dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHN0YXJ0TGluZSxcbiAgICAgIGVuZExpbmVcbiAgICB9O1xuICAgIGlmIChJcy5kZWZpbmVkKHN0YXJ0Q2hhcmFjdGVyKSkge1xuICAgICAgcmVzdWx0LnN0YXJ0Q2hhcmFjdGVyID0gc3RhcnRDaGFyYWN0ZXI7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGVuZENoYXJhY3RlcikpIHtcbiAgICAgIHJlc3VsdC5lbmRDaGFyYWN0ZXIgPSBlbmRDaGFyYWN0ZXI7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGtpbmQpKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGNvbGxhcHNlZFRleHQpKSB7XG4gICAgICByZXN1bHQuY29sbGFwc2VkVGV4dCA9IGNvbGxhcHNlZFRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRm9sZGluZ1JhbmdlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikgfHwgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0Q2hhcmFjdGVyKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUua2luZCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5raW5kKSk7XG4gIH1cbiAgRm9sZGluZ1JhbmdlMi5pcyA9IGlzO1xufSkoRm9sZGluZ1JhbmdlIHx8IChGb2xkaW5nUmFuZ2UgPSB7fSkpO1xudmFyIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxvY2F0aW9uLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbWVzc2FnZVxuICAgIH07XG4gIH1cbiAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKTtcbiAgfVxuICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uMi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiB8fCAoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgRGlhZ25vc3RpY1NldmVyaXR5O1xuKGZ1bmN0aW9uKERpYWdub3N0aWNTZXZlcml0eTIpIHtcbiAgRGlhZ25vc3RpY1NldmVyaXR5Mi5FcnJvciA9IDE7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuV2FybmluZyA9IDI7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuSW5mb3JtYXRpb24gPSAzO1xuICBEaWFnbm9zdGljU2V2ZXJpdHkyLkhpbnQgPSA0O1xufSkoRGlhZ25vc3RpY1NldmVyaXR5IHx8IChEaWFnbm9zdGljU2V2ZXJpdHkgPSB7fSkpO1xudmFyIERpYWdub3N0aWNUYWc7XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1RhZzIpIHtcbiAgRGlhZ25vc3RpY1RhZzIuVW5uZWNlc3NhcnkgPSAxO1xuICBEaWFnbm9zdGljVGFnMi5EZXByZWNhdGVkID0gMjtcbn0pKERpYWdub3N0aWNUYWcgfHwgKERpYWdub3N0aWNUYWcgPSB7fSkpO1xudmFyIENvZGVEZXNjcmlwdGlvbjtcbihmdW5jdGlvbihDb2RlRGVzY3JpcHRpb24yKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmhyZWYpO1xuICB9XG4gIENvZGVEZXNjcmlwdGlvbjIuaXMgPSBpcztcbn0pKENvZGVEZXNjcmlwdGlvbiB8fCAoQ29kZURlc2NyaXB0aW9uID0ge30pKTtcbnZhciBEaWFnbm9zdGljO1xuKGZ1bmN0aW9uKERpYWdub3N0aWMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHNvdXJjZSwgcmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgcmFuZ2UsIG1lc3NhZ2UgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChzZXZlcml0eSkpIHtcbiAgICAgIHJlc3VsdC5zZXZlcml0eSA9IHNldmVyaXR5O1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChjb2RlKSkge1xuICAgICAgcmVzdWx0LmNvZGUgPSBjb2RlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChyZWxhdGVkSW5mb3JtYXRpb24pKSB7XG4gICAgICByZXN1bHQucmVsYXRlZEluZm9ybWF0aW9uID0gcmVsYXRlZEluZm9ybWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERpYWdub3N0aWMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm1lc3NhZ2UpICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSkgJiYgKElzLmludGVnZXIoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuY29kZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZURlc2NyaXB0aW9uKSB8fCBJcy5zdHJpbmcoKF9hID0gY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhyZWYpKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5zb3VyY2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc291cmNlKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24sIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24uaXMpKTtcbiAgfVxuICBEaWFnbm9zdGljMi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XG52YXIgQ29tbWFuZDtcbihmdW5jdGlvbihDb21tYW5kMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGNvbW1hbmQsIC4uLmFyZ3MpIHtcbiAgICBsZXQgcmVzdWx0ID0geyB0aXRsZSwgY29tbWFuZCB9O1xuICAgIGlmIChJcy5kZWZpbmVkKGFyZ3MpICYmIGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LmFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29tbWFuZDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUuY29tbWFuZCk7XG4gIH1cbiAgQ29tbWFuZDIuaXMgPSBpcztcbn0pKENvbW1hbmQgfHwgKENvbW1hbmQgPSB7fSkpO1xudmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uKFRleHRFZGl0Mikge1xuICBmdW5jdGlvbiByZXBsYWNlKHJhbmdlLCBuZXdUZXh0KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQgfTtcbiAgfVxuICBUZXh0RWRpdDIucmVwbGFjZSA9IHJlcGxhY2U7XG4gIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlOiB7IHN0YXJ0OiBwb3NpdGlvbiwgZW5kOiBwb3NpdGlvbiB9LCBuZXdUZXh0IH07XG4gIH1cbiAgVGV4dEVkaXQyLmluc2VydCA9IGluc2VydDtcbiAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQ6IFwiXCIgfTtcbiAgfVxuICBUZXh0RWRpdDIuZGVsID0gZGVsO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdUZXh0KSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpO1xuICB9XG4gIFRleHRFZGl0Mi5pcyA9IGlzO1xufSkoVGV4dEVkaXQgfHwgKFRleHRFZGl0ID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uO1xuKGZ1bmN0aW9uKENoYW5nZUFubm90YXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgbmVlZHNDb25maXJtYXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyBsYWJlbCB9O1xuICAgIGlmIChuZWVkc0NvbmZpcm1hdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQubmVlZHNDb25maXJtYXRpb24gPSBuZWVkc0NvbmZpcm1hdGlvbjtcbiAgICB9XG4gICAgaWYgKGRlc2NyaXB0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENoYW5nZUFubm90YXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy5ib29sZWFuKGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbikgfHwgY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uID09PSB2b2lkIDApICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmRlc2NyaXB0aW9uKSB8fCBjYW5kaWRhdGUuZGVzY3JpcHRpb24gPT09IHZvaWQgMCk7XG4gIH1cbiAgQ2hhbmdlQW5ub3RhdGlvbjIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb24gfHwgKENoYW5nZUFubm90YXRpb24gPSB7fSkpO1xudmFyIENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyO1xuKGZ1bmN0aW9uKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKTtcbiAgfVxuICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyIHx8IChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciA9IHt9KSk7XG52YXIgQW5ub3RhdGVkVGV4dEVkaXQ7XG4oZnVuY3Rpb24oQW5ub3RhdGVkVGV4dEVkaXQyKSB7XG4gIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLnJlcGxhY2UgPSByZXBsYWNlO1xuICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLmluc2VydCA9IGluc2VydDtcbiAgZnVuY3Rpb24gZGVsKHJhbmdlLCBhbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQ6IFwiXCIsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5kZWwgPSBkZWw7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIFRleHRFZGl0LmlzKGNhbmRpZGF0ZSkgJiYgKENoYW5nZUFubm90YXRpb24uaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5pcyA9IGlzO1xufSkoQW5ub3RhdGVkVGV4dEVkaXQgfHwgKEFubm90YXRlZFRleHRFZGl0ID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnRFZGl0O1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudEVkaXQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgcmV0dXJuIHsgdGV4dERvY3VtZW50LCBlZGl0cyB9O1xuICB9XG4gIFRleHREb2N1bWVudEVkaXQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoY2FuZGlkYXRlLnRleHREb2N1bWVudCkgJiYgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZWRpdHMpO1xuICB9XG4gIFRleHREb2N1bWVudEVkaXQyLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRFZGl0IHx8IChUZXh0RG9jdW1lbnRFZGl0ID0ge30pKTtcbnZhciBDcmVhdGVGaWxlO1xuKGZ1bmN0aW9uKENyZWF0ZUZpbGUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJjcmVhdGVcIixcbiAgICAgIHVyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENyZWF0ZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJjcmVhdGVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHwgKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cykpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdm9pZCAwIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBDcmVhdGVGaWxlMi5pcyA9IGlzO1xufSkoQ3JlYXRlRmlsZSB8fCAoQ3JlYXRlRmlsZSA9IHt9KSk7XG52YXIgUmVuYW1lRmlsZTtcbihmdW5jdGlvbihSZW5hbWVGaWxlMikge1xuICBmdW5jdGlvbiBjcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJyZW5hbWVcIixcbiAgICAgIG9sZFVyaSxcbiAgICAgIG5ld1VyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFJlbmFtZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJyZW5hbWVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm9sZFVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdVcmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdm9pZCAwIHx8IChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHZvaWQgMCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gIH1cbiAgUmVuYW1lRmlsZTIuaXMgPSBpcztcbn0pKFJlbmFtZUZpbGUgfHwgKFJlbmFtZUZpbGUgPSB7fSkpO1xudmFyIERlbGV0ZUZpbGU7XG4oZnVuY3Rpb24oRGVsZXRlRmlsZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICBraW5kOiBcImRlbGV0ZVwiLFxuICAgICAgdXJpXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucyAhPT0gdm9pZCAwICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdm9pZCAwIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHZvaWQgMCkpIHtcbiAgICAgIHJlc3VsdC5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgaWYgKGFubm90YXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRGVsZXRlRmlsZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSBcImRlbGV0ZVwiICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHZvaWQgMCB8fCAoY2FuZGlkYXRlLm9wdGlvbnMucmVjdXJzaXZlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB2b2lkIDAgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIERlbGV0ZUZpbGUyLmlzID0gaXM7XG59KShEZWxldGVGaWxlIHx8IChEZWxldGVGaWxlID0ge30pKTtcbnZhciBXb3Jrc3BhY2VFZGl0O1xuKGZ1bmN0aW9uKFdvcmtzcGFjZUVkaXQyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5jaGFuZ2VzICE9PSB2b2lkIDAgfHwgY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyAhPT0gdm9pZCAwKSAmJiAoY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMuZXZlcnkoKGNoYW5nZSkgPT4ge1xuICAgICAgaWYgKElzLnN0cmluZyhjaGFuZ2Uua2luZCkpIHtcbiAgICAgICAgcmV0dXJuIENyZWF0ZUZpbGUuaXMoY2hhbmdlKSB8fCBSZW5hbWVGaWxlLmlzKGNoYW5nZSkgfHwgRGVsZXRlRmlsZS5pcyhjaGFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRleHREb2N1bWVudEVkaXQuaXMoY2hhbmdlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbiAgV29ya3NwYWNlRWRpdDIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUVkaXQgfHwgKFdvcmtzcGFjZUVkaXQgPSB7fSkpO1xudmFyIFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSkge1xuICAgIHJldHVybiB7IHVyaSB9O1xuICB9XG4gIFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSk7XG4gIH1cbiAgVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgIHJldHVybiB7IHVyaSwgdmVyc2lvbiB9O1xuICB9XG4gIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMuaW50ZWdlcihjYW5kaWRhdGUudmVyc2lvbik7XG4gIH1cbiAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbihPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICByZXR1cm4geyB1cmksIHZlcnNpb24gfTtcbiAgfVxuICBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS52ZXJzaW9uID09PSBudWxsIHx8IElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pKTtcbiAgfVxuICBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmlzID0gaXM7XG59KShPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50SXRlbTtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnRJdGVtMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0KSB7XG4gICAgcmV0dXJuIHsgdXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0IH07XG4gIH1cbiAgVGV4dERvY3VtZW50SXRlbTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gIH1cbiAgVGV4dERvY3VtZW50SXRlbTIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEl0ZW0gfHwgKFRleHREb2N1bWVudEl0ZW0gPSB7fSkpO1xudmFyIE1hcmt1cEtpbmQ7XG4oZnVuY3Rpb24oTWFya3VwS2luZDIpIHtcbiAgTWFya3VwS2luZDIuUGxhaW5UZXh0ID0gXCJwbGFpbnRleHRcIjtcbiAgTWFya3VwS2luZDIuTWFya2Rvd24gPSBcIm1hcmtkb3duXCI7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSA9PT0gTWFya3VwS2luZDIuUGxhaW5UZXh0IHx8IGNhbmRpZGF0ZSA9PT0gTWFya3VwS2luZDIuTWFya2Rvd247XG4gIH1cbiAgTWFya3VwS2luZDIuaXMgPSBpcztcbn0pKE1hcmt1cEtpbmQgfHwgKE1hcmt1cEtpbmQgPSB7fSkpO1xudmFyIE1hcmt1cENvbnRlbnQ7XG4oZnVuY3Rpb24oTWFya3VwQ29udGVudDIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbCh2YWx1ZSkgJiYgTWFya3VwS2luZC5pcyhjYW5kaWRhdGUua2luZCkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS52YWx1ZSk7XG4gIH1cbiAgTWFya3VwQ29udGVudDIuaXMgPSBpcztcbn0pKE1hcmt1cENvbnRlbnQgfHwgKE1hcmt1cENvbnRlbnQgPSB7fSkpO1xudmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbUtpbmQyKSB7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVGV4dCA9IDE7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuTWV0aG9kID0gMjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5GdW5jdGlvbiA9IDM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ29uc3RydWN0b3IgPSA0O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZpZWxkID0gNTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5WYXJpYWJsZSA9IDY7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ2xhc3MgPSA3O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkludGVyZmFjZSA9IDg7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuTW9kdWxlID0gOTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Qcm9wZXJ0eSA9IDEwO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlVuaXQgPSAxMTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5WYWx1ZSA9IDEyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkVudW0gPSAxMztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5LZXl3b3JkID0gMTQ7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuU25pcHBldCA9IDE1O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkNvbG9yID0gMTY7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRmlsZSA9IDE3O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlJlZmVyZW5jZSA9IDE4O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZvbGRlciA9IDE5O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkVudW1NZW1iZXIgPSAyMDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Db25zdGFudCA9IDIxO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlN0cnVjdCA9IDIyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkV2ZW50ID0gMjM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuT3BlcmF0b3IgPSAyNDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5UeXBlUGFyYW1ldGVyID0gMjU7XG59KShDb21wbGV0aW9uSXRlbUtpbmQgfHwgKENvbXBsZXRpb25JdGVtS2luZCA9IHt9KSk7XG52YXIgSW5zZXJ0VGV4dEZvcm1hdDtcbihmdW5jdGlvbihJbnNlcnRUZXh0Rm9ybWF0Mikge1xuICBJbnNlcnRUZXh0Rm9ybWF0Mi5QbGFpblRleHQgPSAxO1xuICBJbnNlcnRUZXh0Rm9ybWF0Mi5TbmlwcGV0ID0gMjtcbn0pKEluc2VydFRleHRGb3JtYXQgfHwgKEluc2VydFRleHRGb3JtYXQgPSB7fSkpO1xudmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uKENvbXBsZXRpb25JdGVtVGFnMikge1xuICBDb21wbGV0aW9uSXRlbVRhZzIuRGVwcmVjYXRlZCA9IDE7XG59KShDb21wbGV0aW9uSXRlbVRhZyB8fCAoQ29tcGxldGlvbkl0ZW1UYWcgPSB7fSkpO1xudmFyIEluc2VydFJlcGxhY2VFZGl0O1xuKGZ1bmN0aW9uKEluc2VydFJlcGxhY2VFZGl0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUobmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlKSB7XG4gICAgcmV0dXJuIHsgbmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlIH07XG4gIH1cbiAgSW5zZXJ0UmVwbGFjZUVkaXQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLmluc2VydCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJlcGxhY2UpO1xuICB9XG4gIEluc2VydFJlcGxhY2VFZGl0Mi5pcyA9IGlzO1xufSkoSW5zZXJ0UmVwbGFjZUVkaXQgfHwgKEluc2VydFJlcGxhY2VFZGl0ID0ge30pKTtcbnZhciBJbnNlcnRUZXh0TW9kZTtcbihmdW5jdGlvbihJbnNlcnRUZXh0TW9kZTIpIHtcbiAgSW5zZXJ0VGV4dE1vZGUyLmFzSXMgPSAxO1xuICBJbnNlcnRUZXh0TW9kZTIuYWRqdXN0SW5kZW50YXRpb24gPSAyO1xufSkoSW5zZXJ0VGV4dE1vZGUgfHwgKEluc2VydFRleHRNb2RlID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscztcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlsczIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmRldGFpbCkgfHwgY2FuZGlkYXRlLmRldGFpbCA9PT0gdm9pZCAwKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB2b2lkIDApO1xuICB9XG4gIENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzMi5pcyA9IGlzO1xufSkoQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMgfHwgKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbTtcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsKSB7XG4gICAgcmV0dXJuIHsgbGFiZWwgfTtcbiAgfVxuICBDb21wbGV0aW9uSXRlbTIuY3JlYXRlID0gY3JlYXRlO1xufSkoQ29tcGxldGlvbkl0ZW0gfHwgKENvbXBsZXRpb25JdGVtID0ge30pKTtcbnZhciBDb21wbGV0aW9uTGlzdDtcbihmdW5jdGlvbihDb21wbGV0aW9uTGlzdDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zLCBpc0luY29tcGxldGUpIHtcbiAgICByZXR1cm4geyBpdGVtczogaXRlbXMgPyBpdGVtcyA6IFtdLCBpc0luY29tcGxldGU6ICEhaXNJbmNvbXBsZXRlIH07XG4gIH1cbiAgQ29tcGxldGlvbkxpc3QyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25MaXN0IHx8IChDb21wbGV0aW9uTGlzdCA9IHt9KSk7XG52YXIgTWFya2VkU3RyaW5nO1xuKGZ1bmN0aW9uKE1hcmtlZFN0cmluZzIpIHtcbiAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcbiAgICByZXR1cm4gcGxhaW5UZXh0LnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCBcIlxcXFwkJlwiKTtcbiAgfVxuICBNYXJrZWRTdHJpbmcyLmZyb21QbGFpblRleHQgPSBmcm9tUGxhaW5UZXh0O1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS52YWx1ZSk7XG4gIH1cbiAgTWFya2VkU3RyaW5nMi5pcyA9IGlzO1xufSkoTWFya2VkU3RyaW5nIHx8IChNYXJrZWRTdHJpbmcgPSB7fSkpO1xudmFyIEhvdmVyO1xuKGZ1bmN0aW9uKEhvdmVyMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gISFjYW5kaWRhdGUgJiYgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHwgTWFya2VkU3RyaW5nLmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuY29udGVudHMsIE1hcmtlZFN0cmluZy5pcykpICYmICh2YWx1ZS5yYW5nZSA9PT0gdm9pZCAwIHx8IFJhbmdlLmlzKHZhbHVlLnJhbmdlKSk7XG4gIH1cbiAgSG92ZXIyLmlzID0gaXM7XG59KShIb3ZlciB8fCAoSG92ZXIgPSB7fSkpO1xudmFyIFBhcmFtZXRlckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKFBhcmFtZXRlckluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcbiAgICByZXR1cm4gZG9jdW1lbnRhdGlvbiA/IHsgbGFiZWwsIGRvY3VtZW50YXRpb24gfSA6IHsgbGFiZWwgfTtcbiAgfVxuICBQYXJhbWV0ZXJJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xufSkoUGFyYW1ldGVySW5mb3JtYXRpb24gfHwgKFBhcmFtZXRlckluZm9ybWF0aW9uID0ge30pKTtcbnZhciBTaWduYXR1cmVJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihTaWduYXR1cmVJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uLCAuLi5wYXJhbWV0ZXJzKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgbGFiZWwgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChkb2N1bWVudGF0aW9uKSkge1xuICAgICAgcmVzdWx0LmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChwYXJhbWV0ZXJzKSkge1xuICAgICAgcmVzdWx0LnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGFyYW1ldGVycyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFNpZ25hdHVyZUluZm9ybWF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG59KShTaWduYXR1cmVJbmZvcm1hdGlvbiB8fCAoU2lnbmF0dXJlSW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIERvY3VtZW50SGlnaGxpZ2h0S2luZDtcbihmdW5jdGlvbihEb2N1bWVudEhpZ2hsaWdodEtpbmQyKSB7XG4gIERvY3VtZW50SGlnaGxpZ2h0S2luZDIuVGV4dCA9IDE7XG4gIERvY3VtZW50SGlnaGxpZ2h0S2luZDIuUmVhZCA9IDI7XG4gIERvY3VtZW50SGlnaGxpZ2h0S2luZDIuV3JpdGUgPSAzO1xufSkoRG9jdW1lbnRIaWdobGlnaHRLaW5kIHx8IChEb2N1bWVudEhpZ2hsaWdodEtpbmQgPSB7fSkpO1xudmFyIERvY3VtZW50SGlnaGxpZ2h0O1xuKGZ1bmN0aW9uKERvY3VtZW50SGlnaGxpZ2h0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGtpbmQpIHtcbiAgICBsZXQgcmVzdWx0ID0geyByYW5nZSB9O1xuICAgIGlmIChJcy5udW1iZXIoa2luZCkpIHtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBEb2N1bWVudEhpZ2hsaWdodDIuY3JlYXRlID0gY3JlYXRlO1xufSkoRG9jdW1lbnRIaWdobGlnaHQgfHwgKERvY3VtZW50SGlnaGxpZ2h0ID0ge30pKTtcbnZhciBTeW1ib2xLaW5kO1xuKGZ1bmN0aW9uKFN5bWJvbEtpbmQyKSB7XG4gIFN5bWJvbEtpbmQyLkZpbGUgPSAxO1xuICBTeW1ib2xLaW5kMi5Nb2R1bGUgPSAyO1xuICBTeW1ib2xLaW5kMi5OYW1lc3BhY2UgPSAzO1xuICBTeW1ib2xLaW5kMi5QYWNrYWdlID0gNDtcbiAgU3ltYm9sS2luZDIuQ2xhc3MgPSA1O1xuICBTeW1ib2xLaW5kMi5NZXRob2QgPSA2O1xuICBTeW1ib2xLaW5kMi5Qcm9wZXJ0eSA9IDc7XG4gIFN5bWJvbEtpbmQyLkZpZWxkID0gODtcbiAgU3ltYm9sS2luZDIuQ29uc3RydWN0b3IgPSA5O1xuICBTeW1ib2xLaW5kMi5FbnVtID0gMTA7XG4gIFN5bWJvbEtpbmQyLkludGVyZmFjZSA9IDExO1xuICBTeW1ib2xLaW5kMi5GdW5jdGlvbiA9IDEyO1xuICBTeW1ib2xLaW5kMi5WYXJpYWJsZSA9IDEzO1xuICBTeW1ib2xLaW5kMi5Db25zdGFudCA9IDE0O1xuICBTeW1ib2xLaW5kMi5TdHJpbmcgPSAxNTtcbiAgU3ltYm9sS2luZDIuTnVtYmVyID0gMTY7XG4gIFN5bWJvbEtpbmQyLkJvb2xlYW4gPSAxNztcbiAgU3ltYm9sS2luZDIuQXJyYXkgPSAxODtcbiAgU3ltYm9sS2luZDIuT2JqZWN0ID0gMTk7XG4gIFN5bWJvbEtpbmQyLktleSA9IDIwO1xuICBTeW1ib2xLaW5kMi5OdWxsID0gMjE7XG4gIFN5bWJvbEtpbmQyLkVudW1NZW1iZXIgPSAyMjtcbiAgU3ltYm9sS2luZDIuU3RydWN0ID0gMjM7XG4gIFN5bWJvbEtpbmQyLkV2ZW50ID0gMjQ7XG4gIFN5bWJvbEtpbmQyLk9wZXJhdG9yID0gMjU7XG4gIFN5bWJvbEtpbmQyLlR5cGVQYXJhbWV0ZXIgPSAyNjtcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xudmFyIFN5bWJvbFRhZztcbihmdW5jdGlvbihTeW1ib2xUYWcyKSB7XG4gIFN5bWJvbFRhZzIuRGVwcmVjYXRlZCA9IDE7XG59KShTeW1ib2xUYWcgfHwgKFN5bWJvbFRhZyA9IHt9KSk7XG52YXIgU3ltYm9sSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oU3ltYm9sSW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCByYW5nZSwgdXJpLCBjb250YWluZXJOYW1lKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBraW5kLFxuICAgICAgbG9jYXRpb246IHsgdXJpLCByYW5nZSB9XG4gICAgfTtcbiAgICBpZiAoY29udGFpbmVyTmFtZSkge1xuICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBjb250YWluZXJOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFN5bWJvbEluZm9ybWF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG59KShTeW1ib2xJbmZvcm1hdGlvbiB8fCAoU3ltYm9sSW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIFdvcmtzcGFjZVN5bWJvbDtcbihmdW5jdGlvbihXb3Jrc3BhY2VTeW1ib2wyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCB1cmksIHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlICE9PSB2b2lkIDAgPyB7IG5hbWUsIGtpbmQsIGxvY2F0aW9uOiB7IHVyaSwgcmFuZ2UgfSB9IDogeyBuYW1lLCBraW5kLCBsb2NhdGlvbjogeyB1cmkgfSB9O1xuICB9XG4gIFdvcmtzcGFjZVN5bWJvbDIuY3JlYXRlID0gY3JlYXRlO1xufSkoV29ya3NwYWNlU3ltYm9sIHx8IChXb3Jrc3BhY2VTeW1ib2wgPSB7fSkpO1xudmFyIERvY3VtZW50U3ltYm9sO1xuKGZ1bmN0aW9uKERvY3VtZW50U3ltYm9sMikge1xuICBmdW5jdGlvbiBjcmVhdGUobmFtZSwgZGV0YWlsLCBraW5kLCByYW5nZSwgc2VsZWN0aW9uUmFuZ2UsIGNoaWxkcmVuKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBkZXRhaWwsXG4gICAgICBraW5kLFxuICAgICAgcmFuZ2UsXG4gICAgICBzZWxlY3Rpb25SYW5nZVxuICAgIH07XG4gICAgaWYgKGNoaWxkcmVuICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERvY3VtZW50U3ltYm9sMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uYW1lKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmtpbmQpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnNlbGVjdGlvblJhbmdlKSAmJiAoY2FuZGlkYXRlLmRldGFpbCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSkgJiYgKGNhbmRpZGF0ZS5kZXByZWNhdGVkID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuZGVwcmVjYXRlZCkpICYmIChjYW5kaWRhdGUuY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5jaGlsZHJlbikpICYmIChjYW5kaWRhdGUudGFncyA9PT0gdm9pZCAwIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLnRhZ3MpKTtcbiAgfVxuICBEb2N1bWVudFN5bWJvbDIuaXMgPSBpcztcbn0pKERvY3VtZW50U3ltYm9sIHx8IChEb2N1bWVudFN5bWJvbCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbktpbmQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvbktpbmQyKSB7XG4gIENvZGVBY3Rpb25LaW5kMi5FbXB0eSA9IFwiXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5RdWlja0ZpeCA9IFwicXVpY2tmaXhcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlJlZmFjdG9yID0gXCJyZWZhY3RvclwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3JFeHRyYWN0ID0gXCJyZWZhY3Rvci5leHRyYWN0XCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvcklubGluZSA9IFwicmVmYWN0b3IuaW5saW5lXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvclJld3JpdGUgPSBcInJlZmFjdG9yLnJld3JpdGVcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlNvdXJjZSA9IFwic291cmNlXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5Tb3VyY2VPcmdhbml6ZUltcG9ydHMgPSBcInNvdXJjZS5vcmdhbml6ZUltcG9ydHNcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlNvdXJjZUZpeEFsbCA9IFwic291cmNlLmZpeEFsbFwiO1xufSkoQ29kZUFjdGlvbktpbmQgfHwgKENvZGVBY3Rpb25LaW5kID0ge30pKTtcbnZhciBDb2RlQWN0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvblRyaWdnZXJLaW5kMikge1xuICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQyLkludm9rZWQgPSAxO1xuICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQyLkF1dG9tYXRpYyA9IDI7XG59KShDb2RlQWN0aW9uVHJpZ2dlcktpbmQgfHwgKENvZGVBY3Rpb25UcmlnZ2VyS2luZCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvbkNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShkaWFnbm9zdGljcywgb25seSwgdHJpZ2dlcktpbmQpIHtcbiAgICBsZXQgcmVzdWx0ID0geyBkaWFnbm9zdGljcyB9O1xuICAgIGlmIChvbmx5ICE9PSB2b2lkIDAgJiYgb25seSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0Lm9ubHkgPSBvbmx5O1xuICAgIH1cbiAgICBpZiAodHJpZ2dlcktpbmQgIT09IHZvaWQgMCAmJiB0cmlnZ2VyS2luZCAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnRyaWdnZXJLaW5kID0gdHJpZ2dlcktpbmQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUFjdGlvbkNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5kaWFnbm9zdGljcywgRGlhZ25vc3RpYy5pcykgJiYgKGNhbmRpZGF0ZS5vbmx5ID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUub25seSwgSXMuc3RyaW5nKSkgJiYgKGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gQ29kZUFjdGlvblRyaWdnZXJLaW5kLkludm9rZWQgfHwgY2FuZGlkYXRlLnRyaWdnZXJLaW5kID09PSBDb2RlQWN0aW9uVHJpZ2dlcktpbmQuQXV0b21hdGljKTtcbiAgfVxuICBDb2RlQWN0aW9uQ29udGV4dDIuaXMgPSBpcztcbn0pKENvZGVBY3Rpb25Db250ZXh0IHx8IChDb2RlQWN0aW9uQ29udGV4dCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbjtcbihmdW5jdGlvbihDb2RlQWN0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGtpbmRPckNvbW1hbmRPckVkaXQsIGtpbmQpIHtcbiAgICBsZXQgcmVzdWx0ID0geyB0aXRsZSB9O1xuICAgIGxldCBjaGVja0tpbmQgPSB0cnVlO1xuICAgIGlmICh0eXBlb2Yga2luZE9yQ29tbWFuZE9yRWRpdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY2hlY2tLaW5kID0gZmFsc2U7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmRPckNvbW1hbmRPckVkaXQ7XG4gICAgfSBlbHNlIGlmIChDb21tYW5kLmlzKGtpbmRPckNvbW1hbmRPckVkaXQpKSB7XG4gICAgICByZXN1bHQuY29tbWFuZCA9IGtpbmRPckNvbW1hbmRPckVkaXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5lZGl0ID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICB9XG4gICAgaWYgKGNoZWNrS2luZCAmJiBraW5kICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDb2RlQWN0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50aXRsZSkgJiYgKGNhbmRpZGF0ZS5kaWFnbm9zdGljcyA9PT0gdm9pZCAwIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKSkgJiYgKGNhbmRpZGF0ZS5raW5kID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5raW5kKSkgJiYgKGNhbmRpZGF0ZS5lZGl0ICE9PSB2b2lkIDAgfHwgY2FuZGlkYXRlLmNvbW1hbmQgIT09IHZvaWQgMCkgJiYgKGNhbmRpZGF0ZS5jb21tYW5kID09PSB2b2lkIDAgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpICYmIChjYW5kaWRhdGUuaXNQcmVmZXJyZWQgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5pc1ByZWZlcnJlZCkpICYmIChjYW5kaWRhdGUuZWRpdCA9PT0gdm9pZCAwIHx8IFdvcmtzcGFjZUVkaXQuaXMoY2FuZGlkYXRlLmVkaXQpKTtcbiAgfVxuICBDb2RlQWN0aW9uMi5pcyA9IGlzO1xufSkoQ29kZUFjdGlvbiB8fCAoQ29kZUFjdGlvbiA9IHt9KSk7XG52YXIgQ29kZUxlbnM7XG4oZnVuY3Rpb24oQ29kZUxlbnMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgZGF0YSkge1xuICAgIGxldCByZXN1bHQgPSB7IHJhbmdlIH07XG4gICAgaWYgKElzLmRlZmluZWQoZGF0YSkpIHtcbiAgICAgIHJlc3VsdC5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDb2RlTGVuczIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29tbWFuZCkgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpO1xuICB9XG4gIENvZGVMZW5zMi5pcyA9IGlzO1xufSkoQ29kZUxlbnMgfHwgKENvZGVMZW5zID0ge30pKTtcbnZhciBGb3JtYXR0aW5nT3B0aW9ucztcbihmdW5jdGlvbihGb3JtYXR0aW5nT3B0aW9uczIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHRhYlNpemUsIGluc2VydFNwYWNlcykge1xuICAgIHJldHVybiB7IHRhYlNpemUsIGluc2VydFNwYWNlcyB9O1xuICB9XG4gIEZvcm1hdHRpbmdPcHRpb25zMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnRhYlNpemUpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmluc2VydFNwYWNlcyk7XG4gIH1cbiAgRm9ybWF0dGluZ09wdGlvbnMyLmlzID0gaXM7XG59KShGb3JtYXR0aW5nT3B0aW9ucyB8fCAoRm9ybWF0dGluZ09wdGlvbnMgPSB7fSkpO1xudmFyIERvY3VtZW50TGluaztcbihmdW5jdGlvbihEb2N1bWVudExpbmsyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgdGFyZ2V0LCBkYXRhKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIHRhcmdldCwgZGF0YSB9O1xuICB9XG4gIERvY3VtZW50TGluazIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xuICB9XG4gIERvY3VtZW50TGluazIuaXMgPSBpcztcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcbnZhciBTZWxlY3Rpb25SYW5nZTtcbihmdW5jdGlvbihTZWxlY3Rpb25SYW5nZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBwYXJlbnQpIHtcbiAgICByZXR1cm4geyByYW5nZSwgcGFyZW50IH07XG4gIH1cbiAgU2VsZWN0aW9uUmFuZ2UyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChjYW5kaWRhdGUucGFyZW50ID09PSB2b2lkIDAgfHwgU2VsZWN0aW9uUmFuZ2UyLmlzKGNhbmRpZGF0ZS5wYXJlbnQpKTtcbiAgfVxuICBTZWxlY3Rpb25SYW5nZTIuaXMgPSBpcztcbn0pKFNlbGVjdGlvblJhbmdlIHx8IChTZWxlY3Rpb25SYW5nZSA9IHt9KSk7XG52YXIgU2VtYW50aWNUb2tlblR5cGVzO1xuKGZ1bmN0aW9uKFNlbWFudGljVG9rZW5UeXBlczIpIHtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm5hbWVzcGFjZVwiXSA9IFwibmFtZXNwYWNlXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJ0eXBlXCJdID0gXCJ0eXBlXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJjbGFzc1wiXSA9IFwiY2xhc3NcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImVudW1cIl0gPSBcImVudW1cIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImludGVyZmFjZVwiXSA9IFwiaW50ZXJmYWNlXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJzdHJ1Y3RcIl0gPSBcInN0cnVjdFwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1widHlwZVBhcmFtZXRlclwiXSA9IFwidHlwZVBhcmFtZXRlclwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wicGFyYW1ldGVyXCJdID0gXCJwYXJhbWV0ZXJcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInZhcmlhYmxlXCJdID0gXCJ2YXJpYWJsZVwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wicHJvcGVydHlcIl0gPSBcInByb3BlcnR5XCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJlbnVtTWVtYmVyXCJdID0gXCJlbnVtTWVtYmVyXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJldmVudFwiXSA9IFwiZXZlbnRcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImZ1bmN0aW9uXCJdID0gXCJmdW5jdGlvblwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wibWV0aG9kXCJdID0gXCJtZXRob2RcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm1hY3JvXCJdID0gXCJtYWNyb1wiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wia2V5d29yZFwiXSA9IFwia2V5d29yZFwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wibW9kaWZpZXJcIl0gPSBcIm1vZGlmaWVyXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJjb21tZW50XCJdID0gXCJjb21tZW50XCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJzdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wibnVtYmVyXCJdID0gXCJudW1iZXJcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInJlZ2V4cFwiXSA9IFwicmVnZXhwXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJvcGVyYXRvclwiXSA9IFwib3BlcmF0b3JcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImRlY29yYXRvclwiXSA9IFwiZGVjb3JhdG9yXCI7XG59KShTZW1hbnRpY1Rva2VuVHlwZXMgfHwgKFNlbWFudGljVG9rZW5UeXBlcyA9IHt9KSk7XG52YXIgU2VtYW50aWNUb2tlbk1vZGlmaWVycztcbihmdW5jdGlvbihTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMikge1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRlY2xhcmF0aW9uXCJdID0gXCJkZWNsYXJhdGlvblwiO1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRlZmluaXRpb25cIl0gPSBcImRlZmluaXRpb25cIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJyZWFkb25seVwiXSA9IFwicmVhZG9ubHlcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJzdGF0aWNcIl0gPSBcInN0YXRpY1wiO1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRlcHJlY2F0ZWRcIl0gPSBcImRlcHJlY2F0ZWRcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJhYnN0cmFjdFwiXSA9IFwiYWJzdHJhY3RcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJhc3luY1wiXSA9IFwiYXN5bmNcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJtb2RpZmljYXRpb25cIl0gPSBcIm1vZGlmaWNhdGlvblwiO1xuICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzMltcImRvY3VtZW50YXRpb25cIl0gPSBcImRvY3VtZW50YXRpb25cIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJkZWZhdWx0TGlicmFyeVwiXSA9IFwiZGVmYXVsdExpYnJhcnlcIjtcbn0pKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgfHwgKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgPSB7fSkpO1xudmFyIFNlbWFudGljVG9rZW5zO1xuKGZ1bmN0aW9uKFNlbWFudGljVG9rZW5zMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKGNhbmRpZGF0ZS5yZXN1bHRJZCA9PT0gdm9pZCAwIHx8IHR5cGVvZiBjYW5kaWRhdGUucmVzdWx0SWQgPT09IFwic3RyaW5nXCIpICYmIEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmRhdGEpICYmIChjYW5kaWRhdGUuZGF0YS5sZW5ndGggPT09IDAgfHwgdHlwZW9mIGNhbmRpZGF0ZS5kYXRhWzBdID09PSBcIm51bWJlclwiKTtcbiAgfVxuICBTZW1hbnRpY1Rva2VuczIuaXMgPSBpcztcbn0pKFNlbWFudGljVG9rZW5zIHx8IChTZW1hbnRpY1Rva2VucyA9IHt9KSk7XG52YXIgSW5saW5lVmFsdWVUZXh0O1xuKGZ1bmN0aW9uKElubGluZVZhbHVlVGV4dDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0ZXh0KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQgfTtcbiAgfVxuICBJbmxpbmVWYWx1ZVRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50ZXh0KTtcbiAgfVxuICBJbmxpbmVWYWx1ZVRleHQyLmlzID0gaXM7XG59KShJbmxpbmVWYWx1ZVRleHQgfHwgKElubGluZVZhbHVlVGV4dCA9IHt9KSk7XG52YXIgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cDtcbihmdW5jdGlvbihJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHZhcmlhYmxlTmFtZSwgY2FzZVNlbnNpdGl2ZUxvb2t1cCkge1xuICAgIHJldHVybiB7IHJhbmdlLCB2YXJpYWJsZU5hbWUsIGNhc2VTZW5zaXRpdmVMb29rdXAgfTtcbiAgfVxuICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmNhc2VTZW5zaXRpdmVMb29rdXApICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSkgfHwgY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSA9PT0gdm9pZCAwKTtcbiAgfVxuICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwMi5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCB8fCAoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCA9IHt9KSk7XG52YXIgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb247XG4oZnVuY3Rpb24oSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgZXhwcmVzc2lvbikge1xuICAgIHJldHVybiB7IHJhbmdlLCBleHByZXNzaW9uIH07XG4gIH1cbiAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuZXhwcmVzc2lvbikgfHwgY2FuZGlkYXRlLmV4cHJlc3Npb24gPT09IHZvaWQgMCk7XG4gIH1cbiAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24yLmlzID0gaXM7XG59KShJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiB8fCAoSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24gPSB7fSkpO1xudmFyIElubGluZVZhbHVlQ29udGV4dDtcbihmdW5jdGlvbihJbmxpbmVWYWx1ZUNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb24pIHtcbiAgICByZXR1cm4geyBmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb24gfTtcbiAgfVxuICBJbmxpbmVWYWx1ZUNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKHZhbHVlLnN0b3BwZWRMb2NhdGlvbik7XG4gIH1cbiAgSW5saW5lVmFsdWVDb250ZXh0Mi5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVDb250ZXh0IHx8IChJbmxpbmVWYWx1ZUNvbnRleHQgPSB7fSkpO1xudmFyIElubGF5SGludEtpbmQ7XG4oZnVuY3Rpb24oSW5sYXlIaW50S2luZDIpIHtcbiAgSW5sYXlIaW50S2luZDIuVHlwZSA9IDE7XG4gIElubGF5SGludEtpbmQyLlBhcmFtZXRlciA9IDI7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyO1xuICB9XG4gIElubGF5SGludEtpbmQyLmlzID0gaXM7XG59KShJbmxheUhpbnRLaW5kIHx8IChJbmxheUhpbnRLaW5kID0ge30pKTtcbnZhciBJbmxheUhpbnRMYWJlbFBhcnQ7XG4oZnVuY3Rpb24oSW5sYXlIaW50TGFiZWxQYXJ0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICByZXR1cm4geyB2YWx1ZSB9O1xuICB9XG4gIElubGF5SGludExhYmVsUGFydDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKGNhbmRpZGF0ZS50b29sdGlwID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50b29sdGlwKSB8fCBNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS50b29sdGlwKSkgJiYgKGNhbmRpZGF0ZS5sb2NhdGlvbiA9PT0gdm9pZCAwIHx8IExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikpICYmIChjYW5kaWRhdGUuY29tbWFuZCA9PT0gdm9pZCAwIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgfVxuICBJbmxheUhpbnRMYWJlbFBhcnQyLmlzID0gaXM7XG59KShJbmxheUhpbnRMYWJlbFBhcnQgfHwgKElubGF5SGludExhYmVsUGFydCA9IHt9KSk7XG52YXIgSW5sYXlIaW50O1xuKGZ1bmN0aW9uKElubGF5SGludDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHBvc2l0aW9uLCBsYWJlbCwga2luZCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcG9zaXRpb24sIGxhYmVsIH07XG4gICAgaWYgKGtpbmQgIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIElubGF5SGludDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLnBvc2l0aW9uKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUubGFiZWwsIElubGF5SGludExhYmVsUGFydC5pcykpICYmIChjYW5kaWRhdGUua2luZCA9PT0gdm9pZCAwIHx8IElubGF5SGludEtpbmQuaXMoY2FuZGlkYXRlLmtpbmQpKSAmJiBjYW5kaWRhdGUudGV4dEVkaXRzID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUudGV4dEVkaXRzLCBUZXh0RWRpdC5pcykgJiYgKGNhbmRpZGF0ZS50b29sdGlwID09PSB2b2lkIDAgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50b29sdGlwKSB8fCBNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS50b29sdGlwKSkgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nTGVmdCA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnBhZGRpbmdMZWZ0KSkgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nUmlnaHQgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5wYWRkaW5nUmlnaHQpKTtcbiAgfVxuICBJbmxheUhpbnQyLmlzID0gaXM7XG59KShJbmxheUhpbnQgfHwgKElubGF5SGludCA9IHt9KSk7XG52YXIgU3RyaW5nVmFsdWU7XG4oZnVuY3Rpb24oU3RyaW5nVmFsdWUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZVNuaXBwZXQodmFsdWUpIHtcbiAgICByZXR1cm4geyBraW5kOiBcInNuaXBwZXRcIiwgdmFsdWUgfTtcbiAgfVxuICBTdHJpbmdWYWx1ZTIuY3JlYXRlU25pcHBldCA9IGNyZWF0ZVNuaXBwZXQ7XG59KShTdHJpbmdWYWx1ZSB8fCAoU3RyaW5nVmFsdWUgPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25JdGVtO1xuKGZ1bmN0aW9uKElubGluZUNvbXBsZXRpb25JdGVtMikge1xuICBmdW5jdGlvbiBjcmVhdGUoaW5zZXJ0VGV4dCwgZmlsdGVyVGV4dCwgcmFuZ2UsIGNvbW1hbmQpIHtcbiAgICByZXR1cm4geyBpbnNlcnRUZXh0LCBmaWx0ZXJUZXh0LCByYW5nZSwgY29tbWFuZCB9O1xuICB9XG4gIElubGluZUNvbXBsZXRpb25JdGVtMi5jcmVhdGUgPSBjcmVhdGU7XG59KShJbmxpbmVDb21wbGV0aW9uSXRlbSB8fCAoSW5saW5lQ29tcGxldGlvbkl0ZW0gPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25MaXN0O1xuKGZ1bmN0aW9uKElubGluZUNvbXBsZXRpb25MaXN0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUoaXRlbXMpIHtcbiAgICByZXR1cm4geyBpdGVtcyB9O1xuICB9XG4gIElubGluZUNvbXBsZXRpb25MaXN0Mi5jcmVhdGUgPSBjcmVhdGU7XG59KShJbmxpbmVDb21wbGV0aW9uTGlzdCB8fCAoSW5saW5lQ29tcGxldGlvbkxpc3QgPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDtcbihmdW5jdGlvbihJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQyKSB7XG4gIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDIuSW52b2tlZCA9IDA7XG4gIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZDIuQXV0b21hdGljID0gMTtcbn0pKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcbnZhciBTZWxlY3RlZENvbXBsZXRpb25JbmZvO1xuKGZ1bmN0aW9uKFNlbGVjdGVkQ29tcGxldGlvbkluZm8yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgdGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlLCB0ZXh0IH07XG4gIH1cbiAgU2VsZWN0ZWRDb21wbGV0aW9uSW5mbzIuY3JlYXRlID0gY3JlYXRlO1xufSkoU2VsZWN0ZWRDb21wbGV0aW9uSW5mbyB8fCAoU2VsZWN0ZWRDb21wbGV0aW9uSW5mbyA9IHt9KSk7XG52YXIgSW5saW5lQ29tcGxldGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24oSW5saW5lQ29tcGxldGlvbkNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0cmlnZ2VyS2luZCwgc2VsZWN0ZWRDb21wbGV0aW9uSW5mbykge1xuICAgIHJldHVybiB7IHRyaWdnZXJLaW5kLCBzZWxlY3RlZENvbXBsZXRpb25JbmZvIH07XG4gIH1cbiAgSW5saW5lQ29tcGxldGlvbkNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKElubGluZUNvbXBsZXRpb25Db250ZXh0IHx8IChJbmxpbmVDb21wbGV0aW9uQ29udGV4dCA9IHt9KSk7XG52YXIgV29ya3NwYWNlRm9sZGVyO1xuKGZ1bmN0aW9uKFdvcmtzcGFjZUZvbGRlcjIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFVSSS5pcyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpO1xuICB9XG4gIFdvcmtzcGFjZUZvbGRlcjIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUZvbGRlciB8fCAoV29ya3NwYWNlRm9sZGVyID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50Mikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBGdWxsVGV4dERvY3VtZW50KHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCk7XG4gIH1cbiAgVGV4dERvY3VtZW50Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmxhbmd1YWdlSWQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2VJZCkpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lQ291bnQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLmdldFRleHQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLnBvc2l0aW9uQXQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9mZnNldEF0KSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuICBUZXh0RG9jdW1lbnQyLmlzID0gaXM7XG4gIGZ1bmN0aW9uIGFwcGx5RWRpdHMoZG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgbGV0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgbGV0IHNvcnRlZEVkaXRzID0gbWVyZ2VTb3J0KGVkaXRzLCAoYSwgYikgPT4ge1xuICAgICAgbGV0IGRpZmYgPSBhLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYS5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgLSBiLnJhbmdlLnN0YXJ0LmNoYXJhY3RlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaWZmO1xuICAgIH0pO1xuICAgIGxldCBsYXN0TW9kaWZpZWRPZmZzZXQgPSB0ZXh0Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gc29ydGVkRWRpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCBlID0gc29ydGVkRWRpdHNbaV07XG4gICAgICBsZXQgc3RhcnRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLnN0YXJ0KTtcbiAgICAgIGxldCBlbmRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLmVuZCk7XG4gICAgICBpZiAoZW5kT2Zmc2V0IDw9IGxhc3RNb2RpZmllZE9mZnNldCkge1xuICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpICsgZS5uZXdUZXh0ICsgdGV4dC5zdWJzdHJpbmcoZW5kT2Zmc2V0LCB0ZXh0Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPdmVybGFwcGluZyBlZGl0XCIpO1xuICAgICAgfVxuICAgICAgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gc3RhcnRPZmZzZXQ7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9XG4gIFRleHREb2N1bWVudDIuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG4gIGZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjb25zdCBwID0gZGF0YS5sZW5ndGggLyAyIHwgMDtcbiAgICBjb25zdCBsZWZ0ID0gZGF0YS5zbGljZSgwLCBwKTtcbiAgICBjb25zdCByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gICAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICAgIG1lcmdlU29ydChyaWdodCwgY29tcGFyZSk7XG4gICAgbGV0IGxlZnRJZHggPSAwO1xuICAgIGxldCByaWdodElkeCA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGggJiYgcmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgIGxldCByZXQgPSBjb21wYXJlKGxlZnRbbGVmdElkeF0sIHJpZ2h0W3JpZ2h0SWR4XSk7XG4gICAgICBpZiAocmV0IDw9IDApIHtcbiAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcbiAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICB9XG4gICAgd2hpbGUgKHJpZ2h0SWR4IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICBkYXRhW2krK10gPSByaWdodFtyaWdodElkeCsrXTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn0pKFRleHREb2N1bWVudCB8fCAoVGV4dERvY3VtZW50ID0ge30pKTtcbnZhciBGdWxsVGV4dERvY3VtZW50ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcih1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICB0aGlzLl91cmkgPSB1cmk7XG4gICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XG4gICAgdGhpcy5fbGluZU9mZnNldHMgPSB2b2lkIDA7XG4gIH1cbiAgZ2V0IHVyaSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJpO1xuICB9XG4gIGdldCBsYW5ndWFnZUlkKCkge1xuICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZUlkO1xuICB9XG4gIGdldCB2ZXJzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICB9XG4gIGdldFRleHQocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIGxldCBzdGFydCA9IHRoaXMub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgbGV0IGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gIH1cbiAgdXBkYXRlKGV2ZW50LCB2ZXJzaW9uKSB7XG4gICAgdGhpcy5fY29udGVudCA9IGV2ZW50LnRleHQ7XG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy5fbGluZU9mZnNldHMgPSB2b2lkIDA7XG4gIH1cbiAgZ2V0TGluZU9mZnNldHMoKSB7XG4gICAgaWYgKHRoaXMuX2xpbmVPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICAgIGxldCBsaW5lT2Zmc2V0cyA9IFtdO1xuICAgICAgbGV0IHRleHQgPSB0aGlzLl9jb250ZW50O1xuICAgICAgbGV0IGlzTGluZVN0YXJ0ID0gdHJ1ZTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXNMaW5lU3RhcnQpIHtcbiAgICAgICAgICBsaW5lT2Zmc2V0cy5wdXNoKGkpO1xuICAgICAgICAgIGlzTGluZVN0YXJ0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoID0gdGV4dC5jaGFyQXQoaSk7XG4gICAgICAgIGlzTGluZVN0YXJ0ID0gY2ggPT09IFwiXFxyXCIgfHwgY2ggPT09IFwiXFxuXCI7XG4gICAgICAgIGlmIChjaCA9PT0gXCJcXHJcIiAmJiBpICsgMSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckF0KGkgKyAxKSA9PT0gXCJcXG5cIikge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzTGluZVN0YXJ0ICYmIHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBsaW5lT2Zmc2V0cy5wdXNoKHRleHQubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9saW5lT2Zmc2V0cztcbiAgfVxuICBwb3NpdGlvbkF0KG9mZnNldCkge1xuICAgIG9mZnNldCA9IE1hdGgubWF4KE1hdGgubWluKG9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpLCAwKTtcbiAgICBsZXQgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgbGV0IGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUoMCwgb2Zmc2V0KTtcbiAgICB9XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBsaW5lID0gbG93IC0gMTtcbiAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKGxpbmUsIG9mZnNldCAtIGxpbmVPZmZzZXRzW2xpbmVdKTtcbiAgfVxuICBvZmZzZXRBdChwb3NpdGlvbikge1xuICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgbGV0IGxpbmVPZmZzZXQgPSBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lXTtcbiAgICBsZXQgbmV4dExpbmVPZmZzZXQgPSBwb3NpdGlvbi5saW5lICsgMSA8IGxpbmVPZmZzZXRzLmxlbmd0aCA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xuICB9XG4gIGdldCBsaW5lQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGluZU9mZnNldHMoKS5sZW5ndGg7XG4gIH1cbn07XG52YXIgSXM7XG4oZnVuY3Rpb24oSXMyKSB7XG4gIGNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCI7XG4gIH1cbiAgSXMyLmRlZmluZWQgPSBkZWZpbmVkO1xuICBmdW5jdGlvbiB1bmRlZmluZWQyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbiAgfVxuICBJczIudW5kZWZpbmVkID0gdW5kZWZpbmVkMjtcbiAgZnVuY3Rpb24gYm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG4gIH1cbiAgSXMyLmJvb2xlYW4gPSBib29sZWFuO1xuICBmdW5jdGlvbiBzdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBTdHJpbmddXCI7XG4gIH1cbiAgSXMyLnN0cmluZyA9IHN0cmluZztcbiAgZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiO1xuICB9XG4gIElzMi5udW1iZXIgPSBudW1iZXI7XG4gIGZ1bmN0aW9uIG51bWJlclJhbmdlKHZhbHVlLCBtaW4sIG1heCkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIiAmJiBtaW4gPD0gdmFsdWUgJiYgdmFsdWUgPD0gbWF4O1xuICB9XG4gIElzMi5udW1iZXJSYW5nZSA9IG51bWJlclJhbmdlO1xuICBmdW5jdGlvbiBpbnRlZ2VyMih2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIiAmJiAtMjE0NzQ4MzY0OCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAyMTQ3NDgzNjQ3O1xuICB9XG4gIElzMi5pbnRlZ2VyID0gaW50ZWdlcjI7XG4gIGZ1bmN0aW9uIHVpbnRlZ2VyMih2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIiAmJiAwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDIxNDc0ODM2NDc7XG4gIH1cbiAgSXMyLnVpbnRlZ2VyID0gdWludGVnZXIyO1xuICBmdW5jdGlvbiBmdW5jKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgRnVuY3Rpb25dXCI7XG4gIH1cbiAgSXMyLmZ1bmMgPSBmdW5jO1xuICBmdW5jdGlvbiBvYmplY3RMaXRlcmFsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbiAgfVxuICBJczIub2JqZWN0TGl0ZXJhbCA9IG9iamVjdExpdGVyYWw7XG4gIGZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGNoZWNrKTtcbiAgfVxuICBJczIudHlwZWRBcnJheSA9IHR5cGVkQXJyYXk7XG59KShJcyB8fCAoSXMgPSB7fSkpO1xuXG4vLyBzcmMvbGFuZ3VhZ2UvY29tbW9uL2xzcExhbmd1YWdlRmVhdHVyZXMudHNcbnZhciBEaWFnbm9zdGljc0FkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF9sYW5ndWFnZUlkLCBfd29ya2VyLCBjb25maWdDaGFuZ2VFdmVudCkge1xuICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBfbGFuZ3VhZ2VJZDtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgdGhpcy5fbGlzdGVuZXIgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBvbk1vZGVsQWRkID0gKG1vZGVsKSA9PiB7XG4gICAgICBsZXQgbW9kZUlkID0gbW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpO1xuICAgICAgaWYgKG1vZGVJZCAhPT0gdGhpcy5fbGFuZ3VhZ2VJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgaGFuZGxlO1xuICAgICAgdGhpcy5fbGlzdGVuZXJbbW9kZWwudXJpLnRvU3RyaW5nKCldID0gbW9kZWwub25EaWRDaGFuZ2VDb250ZW50KCgpID0+IHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICBoYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB0aGlzLl9kb1ZhbGlkYXRlKG1vZGVsLnVyaSwgbW9kZUlkKSwgNTAwKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZG9WYWxpZGF0ZShtb2RlbC51cmksIG1vZGVJZCk7XG4gICAgfTtcbiAgICBjb25zdCBvbk1vZGVsUmVtb3ZlZCA9IChtb2RlbCkgPT4ge1xuICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuZWRpdG9yLnNldE1vZGVsTWFya2Vycyhtb2RlbCwgdGhpcy5fbGFuZ3VhZ2VJZCwgW10pO1xuICAgICAgbGV0IHVyaVN0ciA9IG1vZGVsLnVyaS50b1N0cmluZygpO1xuICAgICAgbGV0IGxpc3RlbmVyID0gdGhpcy5fbGlzdGVuZXJbdXJpU3RyXTtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lclt1cmlTdHJdO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3Iub25EaWRDcmVhdGVNb2RlbChvbk1vZGVsQWRkKSk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3Iub25XaWxsRGlzcG9zZU1vZGVsKG9uTW9kZWxSZW1vdmVkKSk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChcbiAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5vbkRpZENoYW5nZU1vZGVsTGFuZ3VhZ2UoKGV2ZW50KSA9PiB7XG4gICAgICAgIG9uTW9kZWxSZW1vdmVkKGV2ZW50Lm1vZGVsKTtcbiAgICAgICAgb25Nb2RlbEFkZChldmVudC5tb2RlbCk7XG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChcbiAgICAgIGNvbmZpZ0NoYW5nZUV2ZW50KChfKSA9PiB7XG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKChtb2RlbCkgPT4ge1xuICAgICAgICAgIGlmIChtb2RlbC5nZXRMYW5ndWFnZUlkKCkgPT09IHRoaXMuX2xhbmd1YWdlSWQpIHtcbiAgICAgICAgICAgIG9uTW9kZWxSZW1vdmVkKG1vZGVsKTtcbiAgICAgICAgICAgIG9uTW9kZWxBZGQobW9kZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaCh7XG4gICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKG9uTW9kZWxSZW1vdmVkKTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJba2V5XS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3IuZ2V0TW9kZWxzKCkuZm9yRWFjaChvbk1vZGVsQWRkKTtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmZvckVhY2goKGQpID0+IGQgJiYgZC5kaXNwb3NlKCkpO1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmxlbmd0aCA9IDA7XG4gIH1cbiAgX2RvVmFsaWRhdGUocmVzb3VyY2UsIGxhbmd1YWdlSWQpIHtcbiAgICB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5kb1ZhbGlkYXRpb24ocmVzb3VyY2UudG9TdHJpbmcoKSk7XG4gICAgfSkudGhlbigoZGlhZ25vc3RpY3MpID0+IHtcbiAgICAgIGNvbnN0IG1hcmtlcnMgPSBkaWFnbm9zdGljcy5tYXAoKGQpID0+IHRvRGlhZ25vc3RpY3MocmVzb3VyY2UsIGQpKTtcbiAgICAgIGxldCBtb2RlbCA9IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5nZXRNb2RlbChyZXNvdXJjZSk7XG4gICAgICBpZiAobW9kZWwgJiYgbW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpID09PSBsYW5ndWFnZUlkKSB7XG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5zZXRNb2RlbE1hcmtlcnMobW9kZWwsIGxhbmd1YWdlSWQsIG1hcmtlcnMpO1xuICAgICAgfVxuICAgIH0pLnRoZW4odm9pZCAwLCAoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiB0b1NldmVyaXR5KGxzU2V2ZXJpdHkpIHtcbiAgc3dpdGNoIChsc1NldmVyaXR5KSB7XG4gICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuTWFya2VyU2V2ZXJpdHkuRXJyb3I7XG4gICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZzpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5NYXJrZXJTZXZlcml0eS5XYXJuaW5nO1xuICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkluZm9ybWF0aW9uOlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLk1hcmtlclNldmVyaXR5LkluZm87XG4gICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuSGludDpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5NYXJrZXJTZXZlcml0eS5IaW50O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuTWFya2VyU2V2ZXJpdHkuSW5mbztcbiAgfVxufVxuZnVuY3Rpb24gdG9EaWFnbm9zdGljcyhyZXNvdXJjZSwgZGlhZykge1xuICBsZXQgY29kZSA9IHR5cGVvZiBkaWFnLmNvZGUgPT09IFwibnVtYmVyXCIgPyBTdHJpbmcoZGlhZy5jb2RlKSA6IGRpYWcuY29kZTtcbiAgcmV0dXJuIHtcbiAgICBzZXZlcml0eTogdG9TZXZlcml0eShkaWFnLnNldmVyaXR5KSxcbiAgICBzdGFydExpbmVOdW1iZXI6IGRpYWcucmFuZ2Uuc3RhcnQubGluZSArIDEsXG4gICAgc3RhcnRDb2x1bW46IGRpYWcucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgMSxcbiAgICBlbmRMaW5lTnVtYmVyOiBkaWFnLnJhbmdlLmVuZC5saW5lICsgMSxcbiAgICBlbmRDb2x1bW46IGRpYWcucmFuZ2UuZW5kLmNoYXJhY3RlciArIDEsXG4gICAgbWVzc2FnZTogZGlhZy5tZXNzYWdlLFxuICAgIGNvZGUsXG4gICAgc291cmNlOiBkaWFnLnNvdXJjZVxuICB9O1xufVxudmFyIENvbXBsZXRpb25BZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyLCBfdHJpZ2dlckNoYXJhY3RlcnMpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIHRoaXMuX3RyaWdnZXJDaGFyYWN0ZXJzID0gX3RyaWdnZXJDaGFyYWN0ZXJzO1xuICB9XG4gIGdldCB0cmlnZ2VyQ2hhcmFjdGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJpZ2dlckNoYXJhY3RlcnM7XG4gIH1cbiAgcHJvdmlkZUNvbXBsZXRpb25JdGVtcyhtb2RlbCwgcG9zaXRpb24sIGNvbnRleHQsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmRvQ29tcGxldGUocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSk7XG4gICAgfSkudGhlbigoaW5mbykgPT4ge1xuICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdvcmRJbmZvID0gbW9kZWwuZ2V0V29yZFVudGlsUG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgY29uc3Qgd29yZFJhbmdlID0gbmV3IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLlJhbmdlKFxuICAgICAgICBwb3NpdGlvbi5saW5lTnVtYmVyLFxuICAgICAgICB3b3JkSW5mby5zdGFydENvbHVtbixcbiAgICAgICAgcG9zaXRpb24ubGluZU51bWJlcixcbiAgICAgICAgd29yZEluZm8uZW5kQ29sdW1uXG4gICAgICApO1xuICAgICAgY29uc3QgaXRlbXMgPSBpbmZvLml0ZW1zLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgICBsYWJlbDogZW50cnkubGFiZWwsXG4gICAgICAgICAgaW5zZXJ0VGV4dDogZW50cnkuaW5zZXJ0VGV4dCB8fCBlbnRyeS5sYWJlbCxcbiAgICAgICAgICBzb3J0VGV4dDogZW50cnkuc29ydFRleHQsXG4gICAgICAgICAgZmlsdGVyVGV4dDogZW50cnkuZmlsdGVyVGV4dCxcbiAgICAgICAgICBkb2N1bWVudGF0aW9uOiBlbnRyeS5kb2N1bWVudGF0aW9uLFxuICAgICAgICAgIGRldGFpbDogZW50cnkuZGV0YWlsLFxuICAgICAgICAgIGNvbW1hbmQ6IHRvQ29tbWFuZChlbnRyeS5jb21tYW5kKSxcbiAgICAgICAgICByYW5nZTogd29yZFJhbmdlLFxuICAgICAgICAgIGtpbmQ6IHRvQ29tcGxldGlvbkl0ZW1LaW5kKGVudHJ5LmtpbmQpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlbnRyeS50ZXh0RWRpdCkge1xuICAgICAgICAgIGlmIChpc0luc2VydFJlcGxhY2VFZGl0KGVudHJ5LnRleHRFZGl0KSkge1xuICAgICAgICAgICAgaXRlbS5yYW5nZSA9IHtcbiAgICAgICAgICAgICAgaW5zZXJ0OiB0b1JhbmdlKGVudHJ5LnRleHRFZGl0Lmluc2VydCksXG4gICAgICAgICAgICAgIHJlcGxhY2U6IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQucmVwbGFjZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0ucmFuZ2UgPSB0b1JhbmdlKGVudHJ5LnRleHRFZGl0LnJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS5pbnNlcnRUZXh0ID0gZW50cnkudGV4dEVkaXQubmV3VGV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICAgIGl0ZW0uYWRkaXRpb25hbFRleHRFZGl0cyA9IGVudHJ5LmFkZGl0aW9uYWxUZXh0RWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5pbnNlcnRUZXh0Rm9ybWF0ID09PSBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQpIHtcbiAgICAgICAgICBpdGVtLmluc2VydFRleHRSdWxlcyA9IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlLkluc2VydEFzU25pcHBldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNJbmNvbXBsZXRlOiBpbmZvLmlzSW5jb21wbGV0ZSxcbiAgICAgICAgc3VnZ2VzdGlvbnM6IGl0ZW1zXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGlmICghcG9zaXRpb24pIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiB7IGNoYXJhY3RlcjogcG9zaXRpb24uY29sdW1uIC0gMSwgbGluZTogcG9zaXRpb24ubGluZU51bWJlciAtIDEgfTtcbn1cbmZ1bmN0aW9uIGZyb21SYW5nZShyYW5nZSkge1xuICBpZiAoIXJhbmdlKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiB7XG4gICAgICBsaW5lOiByYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxLFxuICAgICAgY2hhcmFjdGVyOiByYW5nZS5zdGFydENvbHVtbiAtIDFcbiAgICB9LFxuICAgIGVuZDogeyBsaW5lOiByYW5nZS5lbmRMaW5lTnVtYmVyIC0gMSwgY2hhcmFjdGVyOiByYW5nZS5lbmRDb2x1bW4gLSAxIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHRvUmFuZ2UocmFuZ2UpIHtcbiAgaWYgKCFyYW5nZSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIG5ldyBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5SYW5nZShcbiAgICByYW5nZS5zdGFydC5saW5lICsgMSxcbiAgICByYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxLFxuICAgIHJhbmdlLmVuZC5saW5lICsgMSxcbiAgICByYW5nZS5lbmQuY2hhcmFjdGVyICsgMVxuICApO1xufVxuZnVuY3Rpb24gaXNJbnNlcnRSZXBsYWNlRWRpdChlZGl0KSB7XG4gIHJldHVybiB0eXBlb2YgZWRpdC5pbnNlcnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGVkaXQucmVwbGFjZSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIHRvQ29tcGxldGlvbkl0ZW1LaW5kKGtpbmQpIHtcbiAgY29uc3QgbUl0ZW1LaW5kID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZDtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVGV4dDpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuVGV4dDtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2Q6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLk1ldGhvZDtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbjpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuRnVuY3Rpb247XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RydWN0b3I6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkNvbnN0cnVjdG9yO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5GaWVsZDtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuVmFyaWFibGU7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuQ2xhc3M6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkNsYXNzO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuSW50ZXJmYWNlO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLk1vZHVsZTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuTW9kdWxlO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5OlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5Qcm9wZXJ0eTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Vbml0OlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5Vbml0O1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5WYWx1ZTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5FbnVtOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5FbnVtO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQ6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLktleXdvcmQ7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldDpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuU25pcHBldDtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Db2xvcjpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuQ29sb3I7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRmlsZTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuRmlsZTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5SZWZlcmVuY2U6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlJlZmVyZW5jZTtcbiAgfVxuICByZXR1cm4gbUl0ZW1LaW5kLlByb3BlcnR5O1xufVxuZnVuY3Rpb24gdG9UZXh0RWRpdCh0ZXh0RWRpdCkge1xuICBpZiAoIXRleHRFZGl0KSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJhbmdlOiB0b1JhbmdlKHRleHRFZGl0LnJhbmdlKSxcbiAgICB0ZXh0OiB0ZXh0RWRpdC5uZXdUZXh0XG4gIH07XG59XG5mdW5jdGlvbiB0b0NvbW1hbmQoYykge1xuICByZXR1cm4gYyAmJiBjLmNvbW1hbmQgPT09IFwiZWRpdG9yLmFjdGlvbi50cmlnZ2VyU3VnZ2VzdFwiID8geyBpZDogYy5jb21tYW5kLCB0aXRsZTogYy50aXRsZSwgYXJndW1lbnRzOiBjLmFyZ3VtZW50cyB9IDogdm9pZCAwO1xufVxudmFyIEhvdmVyQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZUhvdmVyKG1vZGVsLCBwb3NpdGlvbiwgdG9rZW4pIHtcbiAgICBsZXQgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmRvSG92ZXIocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSk7XG4gICAgfSkudGhlbigoaW5mbykgPT4ge1xuICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKGluZm8ucmFuZ2UpLFxuICAgICAgICBjb250ZW50czogdG9NYXJrZWRTdHJpbmdBcnJheShpbmZvLmNvbnRlbnRzKVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzTWFya3VwQ29udGVudCh0aGluZykge1xuICByZXR1cm4gdGhpbmcgJiYgdHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB0aGluZy5raW5kID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gdG9NYXJrZG93blN0cmluZyhlbnRyeSkge1xuICBpZiAodHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBlbnRyeVxuICAgIH07XG4gIH1cbiAgaWYgKGlzTWFya3VwQ29udGVudChlbnRyeSkpIHtcbiAgICBpZiAoZW50cnkua2luZCA9PT0gXCJwbGFpbnRleHRcIikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGVudHJ5LnZhbHVlLnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCBcIlxcXFwkJlwiKVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBlbnRyeS52YWx1ZVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHsgdmFsdWU6IFwiYGBgXCIgKyBlbnRyeS5sYW5ndWFnZSArIFwiXFxuXCIgKyBlbnRyeS52YWx1ZSArIFwiXFxuYGBgXFxuXCIgfTtcbn1cbmZ1bmN0aW9uIHRvTWFya2VkU3RyaW5nQXJyYXkoY29udGVudHMpIHtcbiAgaWYgKCFjb250ZW50cykge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudHMpKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRzLm1hcCh0b01hcmtkb3duU3RyaW5nKTtcbiAgfVxuICByZXR1cm4gW3RvTWFya2Rvd25TdHJpbmcoY29udGVudHMpXTtcbn1cbnZhciBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVEb2N1bWVudEhpZ2hsaWdodHMobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudEhpZ2hsaWdodHMocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSkpLnRoZW4oKGVudHJpZXMpID0+IHtcbiAgICAgIGlmICghZW50cmllcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gZW50cmllcy5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoZW50cnkucmFuZ2UpLFxuICAgICAgICAgIGtpbmQ6IHRvRG9jdW1lbnRIaWdobGlnaHRLaW5kKGVudHJ5LmtpbmQpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvRG9jdW1lbnRIaWdobGlnaHRLaW5kKGtpbmQpIHtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSBEb2N1bWVudEhpZ2hsaWdodEtpbmQuUmVhZDpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQ7XG4gICAgY2FzZSBEb2N1bWVudEhpZ2hsaWdodEtpbmQuV3JpdGU6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5Xcml0ZTtcbiAgICBjYXNlIERvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0OlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dDtcbiAgfVxuICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0O1xufVxudmFyIERlZmluaXRpb25BZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlRGVmaW5pdGlvbihtb2RlbCwgcG9zaXRpb24sIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmZpbmREZWZpbml0aW9uKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpO1xuICAgIH0pLnRoZW4oKGRlZmluaXRpb24pID0+IHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gW3RvTG9jYXRpb24oZGVmaW5pdGlvbildO1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gdG9Mb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4ge1xuICAgIHVyaTogbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuVXJpLnBhcnNlKGxvY2F0aW9uLnVyaSksXG4gICAgcmFuZ2U6IHRvUmFuZ2UobG9jYXRpb24ucmFuZ2UpXG4gIH07XG59XG52YXIgUmVmZXJlbmNlQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZVJlZmVyZW5jZXMobW9kZWwsIHBvc2l0aW9uLCBjb250ZXh0LCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5maW5kUmVmZXJlbmNlcyhyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICB9KS50aGVuKChlbnRyaWVzKSA9PiB7XG4gICAgICBpZiAoIWVudHJpZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVudHJpZXMubWFwKHRvTG9jYXRpb24pO1xuICAgIH0pO1xuICB9XG59O1xudmFyIFJlbmFtZUFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVSZW5hbWVFZGl0cyhtb2RlbCwgcG9zaXRpb24sIG5ld05hbWUsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmRvUmVuYW1lKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbiksIG5ld05hbWUpO1xuICAgIH0pLnRoZW4oKGVkaXQpID0+IHtcbiAgICAgIHJldHVybiB0b1dvcmtzcGFjZUVkaXQoZWRpdCk7XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiB0b1dvcmtzcGFjZUVkaXQoZWRpdCkge1xuICBpZiAoIWVkaXQgfHwgIWVkaXQuY2hhbmdlcykge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlc291cmNlRWRpdHMgPSBbXTtcbiAgZm9yIChsZXQgdXJpIGluIGVkaXQuY2hhbmdlcykge1xuICAgIGNvbnN0IF91cmkgPSBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5VcmkucGFyc2UodXJpKTtcbiAgICBmb3IgKGxldCBlIG9mIGVkaXQuY2hhbmdlc1t1cmldKSB7XG4gICAgICByZXNvdXJjZUVkaXRzLnB1c2goe1xuICAgICAgICByZXNvdXJjZTogX3VyaSxcbiAgICAgICAgdmVyc2lvbklkOiB2b2lkIDAsXG4gICAgICAgIHRleHRFZGl0OiB7XG4gICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoZS5yYW5nZSksXG4gICAgICAgICAgdGV4dDogZS5uZXdUZXh0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGVkaXRzOiByZXNvdXJjZUVkaXRzXG4gIH07XG59XG52YXIgRG9jdW1lbnRTeW1ib2xBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlRG9jdW1lbnRTeW1ib2xzKG1vZGVsLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudFN5bWJvbHMocmVzb3VyY2UudG9TdHJpbmcoKSkpLnRoZW4oKGl0ZW1zKSA9PiB7XG4gICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGlzRG9jdW1lbnRTeW1ib2woaXRlbSkpIHtcbiAgICAgICAgICByZXR1cm4gdG9Eb2N1bWVudFN5bWJvbChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICBkZXRhaWw6IFwiXCIsXG4gICAgICAgICAgY29udGFpbmVyTmFtZTogaXRlbS5jb250YWluZXJOYW1lLFxuICAgICAgICAgIGtpbmQ6IHRvU3ltYm9sS2luZChpdGVtLmtpbmQpLFxuICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ubG9jYXRpb24ucmFuZ2UpLFxuICAgICAgICAgIHNlbGVjdGlvblJhbmdlOiB0b1JhbmdlKGl0ZW0ubG9jYXRpb24ucmFuZ2UpLFxuICAgICAgICAgIHRhZ3M6IFtdXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzRG9jdW1lbnRTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBcImNoaWxkcmVuXCIgaW4gc3ltYm9sO1xufVxuZnVuY3Rpb24gdG9Eb2N1bWVudFN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBzeW1ib2wubmFtZSxcbiAgICBkZXRhaWw6IHN5bWJvbC5kZXRhaWwgPz8gXCJcIixcbiAgICBraW5kOiB0b1N5bWJvbEtpbmQoc3ltYm9sLmtpbmQpLFxuICAgIHJhbmdlOiB0b1JhbmdlKHN5bWJvbC5yYW5nZSksXG4gICAgc2VsZWN0aW9uUmFuZ2U6IHRvUmFuZ2Uoc3ltYm9sLnNlbGVjdGlvblJhbmdlKSxcbiAgICB0YWdzOiBzeW1ib2wudGFncyA/PyBbXSxcbiAgICBjaGlsZHJlbjogKHN5bWJvbC5jaGlsZHJlbiA/PyBbXSkubWFwKChpdGVtKSA9PiB0b0RvY3VtZW50U3ltYm9sKGl0ZW0pKVxuICB9O1xufVxuZnVuY3Rpb24gdG9TeW1ib2xLaW5kKGtpbmQpIHtcbiAgbGV0IG1LaW5kID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLlN5bWJvbEtpbmQ7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgU3ltYm9sS2luZC5GaWxlOlxuICAgICAgcmV0dXJuIG1LaW5kLkZpbGU7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk1vZHVsZTpcbiAgICAgIHJldHVybiBtS2luZC5Nb2R1bGU7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk5hbWVzcGFjZTpcbiAgICAgIHJldHVybiBtS2luZC5OYW1lc3BhY2U7XG4gICAgY2FzZSBTeW1ib2xLaW5kLlBhY2thZ2U6XG4gICAgICByZXR1cm4gbUtpbmQuUGFja2FnZTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQ2xhc3M6XG4gICAgICByZXR1cm4gbUtpbmQuQ2xhc3M7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk1ldGhvZDpcbiAgICAgIHJldHVybiBtS2luZC5NZXRob2Q7XG4gICAgY2FzZSBTeW1ib2xLaW5kLlByb3BlcnR5OlxuICAgICAgcmV0dXJuIG1LaW5kLlByb3BlcnR5O1xuICAgIGNhc2UgU3ltYm9sS2luZC5GaWVsZDpcbiAgICAgIHJldHVybiBtS2luZC5GaWVsZDtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQ29uc3RydWN0b3I6XG4gICAgICByZXR1cm4gbUtpbmQuQ29uc3RydWN0b3I7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkVudW06XG4gICAgICByZXR1cm4gbUtpbmQuRW51bTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuSW50ZXJmYWNlOlxuICAgICAgcmV0dXJuIG1LaW5kLkludGVyZmFjZTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuRnVuY3Rpb246XG4gICAgICByZXR1cm4gbUtpbmQuRnVuY3Rpb247XG4gICAgY2FzZSBTeW1ib2xLaW5kLlZhcmlhYmxlOlxuICAgICAgcmV0dXJuIG1LaW5kLlZhcmlhYmxlO1xuICAgIGNhc2UgU3ltYm9sS2luZC5Db25zdGFudDpcbiAgICAgIHJldHVybiBtS2luZC5Db25zdGFudDtcbiAgICBjYXNlIFN5bWJvbEtpbmQuU3RyaW5nOlxuICAgICAgcmV0dXJuIG1LaW5kLlN0cmluZztcbiAgICBjYXNlIFN5bWJvbEtpbmQuTnVtYmVyOlxuICAgICAgcmV0dXJuIG1LaW5kLk51bWJlcjtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQm9vbGVhbjpcbiAgICAgIHJldHVybiBtS2luZC5Cb29sZWFuO1xuICAgIGNhc2UgU3ltYm9sS2luZC5BcnJheTpcbiAgICAgIHJldHVybiBtS2luZC5BcnJheTtcbiAgfVxuICByZXR1cm4gbUtpbmQuRnVuY3Rpb247XG59XG52YXIgRG9jdW1lbnRMaW5rQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZUxpbmtzKG1vZGVsLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudExpbmtzKHJlc291cmNlLnRvU3RyaW5nKCkpKS50aGVuKChpdGVtcykgPT4ge1xuICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5rczogaXRlbXMubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpLFxuICAgICAgICAgIHVybDogaXRlbS50YXJnZXRcbiAgICAgICAgfSkpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59O1xudmFyIERvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURvY3VtZW50Rm9ybWF0dGluZ0VkaXRzKG1vZGVsLCBvcHRpb25zLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5mb3JtYXQocmVzb3VyY2UudG9TdHJpbmcoKSwgbnVsbCwgZnJvbUZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMpKS50aGVuKChlZGl0cykgPT4ge1xuICAgICAgICBpZiAoIWVkaXRzIHx8IGVkaXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIHRoaXMuY2FuRm9ybWF0TXVsdGlwbGVSYW5nZXMgPSBmYWxzZTtcbiAgfVxuICBwcm92aWRlRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyhtb2RlbCwgcmFuZ2UsIG9wdGlvbnMsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmZvcm1hdChyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUmFuZ2UocmFuZ2UpLCBmcm9tRm9ybWF0dGluZ09wdGlvbnMob3B0aW9ucykpLnRoZW4oKGVkaXRzKSA9PiB7XG4gICAgICAgIGlmICghZWRpdHMgfHwgZWRpdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlZGl0cy5tYXAodG9UZXh0RWRpdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZyb21Gb3JtYXR0aW5nT3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgdGFiU2l6ZTogb3B0aW9ucy50YWJTaXplLFxuICAgIGluc2VydFNwYWNlczogb3B0aW9ucy5pbnNlcnRTcGFjZXNcbiAgfTtcbn1cbnZhciBEb2N1bWVudENvbG9yQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURvY3VtZW50Q29sb3JzKG1vZGVsLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudENvbG9ycyhyZXNvdXJjZS50b1N0cmluZygpKSkudGhlbigoaW5mb3MpID0+IHtcbiAgICAgIGlmICghaW5mb3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluZm9zLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgY29sb3I6IGl0ZW0uY29sb3IsXG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH1cbiAgcHJvdmlkZUNvbG9yUHJlc2VudGF0aW9ucyhtb2RlbCwgaW5mbywgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKFxuICAgICAgKHdvcmtlcikgPT4gd29ya2VyLmdldENvbG9yUHJlc2VudGF0aW9ucyhyZXNvdXJjZS50b1N0cmluZygpLCBpbmZvLmNvbG9yLCBmcm9tUmFuZ2UoaW5mby5yYW5nZSkpXG4gICAgKS50aGVuKChwcmVzZW50YXRpb25zKSA9PiB7XG4gICAgICBpZiAoIXByZXNlbnRhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXNlbnRhdGlvbnMubWFwKChwcmVzZW50YXRpb24pID0+IHtcbiAgICAgICAgbGV0IGl0ZW0gPSB7XG4gICAgICAgICAgbGFiZWw6IHByZXNlbnRhdGlvbi5sYWJlbFxuICAgICAgICB9O1xuICAgICAgICBpZiAocHJlc2VudGF0aW9uLnRleHRFZGl0KSB7XG4gICAgICAgICAgaXRlbS50ZXh0RWRpdCA9IHRvVGV4dEVkaXQocHJlc2VudGF0aW9uLnRleHRFZGl0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlc2VudGF0aW9uLmFkZGl0aW9uYWxUZXh0RWRpdHMpIHtcbiAgICAgICAgICBpdGVtLmFkZGl0aW9uYWxUZXh0RWRpdHMgPSBwcmVzZW50YXRpb24uYWRkaXRpb25hbFRleHRFZGl0cy5tYXAodG9UZXh0RWRpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBGb2xkaW5nUmFuZ2VBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlRm9sZGluZ1Jhbmdlcyhtb2RlbCwgY29udGV4dCwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHdvcmtlci5nZXRGb2xkaW5nUmFuZ2VzKHJlc291cmNlLnRvU3RyaW5nKCksIGNvbnRleHQpKS50aGVuKChyYW5nZXMpID0+IHtcbiAgICAgIGlmICghcmFuZ2VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByYW5nZXMubWFwKChyYW5nZSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgc3RhcnQ6IHJhbmdlLnN0YXJ0TGluZSArIDEsXG4gICAgICAgICAgZW5kOiByYW5nZS5lbmRMaW5lICsgMVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHJhbmdlLmtpbmQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICByZXN1bHQua2luZCA9IHRvRm9sZGluZ1JhbmdlS2luZChyYW5nZS5raW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiB0b0ZvbGRpbmdSYW5nZUtpbmQoa2luZCkge1xuICBzd2l0Y2ggKGtpbmQpIHtcbiAgICBjYXNlIEZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudDpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRm9sZGluZ1JhbmdlS2luZC5Db21tZW50O1xuICAgIGNhc2UgRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzOlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Gb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHM7XG4gICAgY2FzZSBGb2xkaW5nUmFuZ2VLaW5kLlJlZ2lvbjpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRm9sZGluZ1JhbmdlS2luZC5SZWdpb247XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbnZhciBTZWxlY3Rpb25SYW5nZUFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVTZWxlY3Rpb25SYW5nZXMobW9kZWwsIHBvc2l0aW9ucywgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKFxuICAgICAgKHdvcmtlcikgPT4gd29ya2VyLmdldFNlbGVjdGlvblJhbmdlcyhcbiAgICAgICAgcmVzb3VyY2UudG9TdHJpbmcoKSxcbiAgICAgICAgcG9zaXRpb25zLm1hcChmcm9tUG9zaXRpb24pXG4gICAgICApXG4gICAgKS50aGVuKChzZWxlY3Rpb25SYW5nZXMpID0+IHtcbiAgICAgIGlmICghc2VsZWN0aW9uUmFuZ2VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3Rpb25SYW5nZXMubWFwKChzZWxlY3Rpb25SYW5nZSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgd2hpbGUgKHNlbGVjdGlvblJhbmdlKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goeyByYW5nZTogdG9SYW5nZShzZWxlY3Rpb25SYW5nZS5yYW5nZSkgfSk7XG4gICAgICAgICAgc2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3Rpb25SYW5nZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBzcmMvbGFuZ3VhZ2UvY3NzL2Nzc01vZGUudHNcbmZ1bmN0aW9uIHNldHVwTW9kZShkZWZhdWx0cykge1xuICBjb25zdCBkaXNwb3NhYmxlcyA9IFtdO1xuICBjb25zdCBwcm92aWRlcnMgPSBbXTtcbiAgY29uc3QgY2xpZW50ID0gbmV3IFdvcmtlck1hbmFnZXIoZGVmYXVsdHMpO1xuICBkaXNwb3NhYmxlcy5wdXNoKGNsaWVudCk7XG4gIGNvbnN0IHdvcmtlciA9ICguLi51cmlzKSA9PiB7XG4gICAgcmV0dXJuIGNsaWVudC5nZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIoLi4udXJpcyk7XG4gIH07XG4gIGZ1bmN0aW9uIHJlZ2lzdGVyUHJvdmlkZXJzKCkge1xuICAgIGNvbnN0IHsgbGFuZ3VhZ2VJZCwgbW9kZUNvbmZpZ3VyYXRpb24gfSA9IGRlZmF1bHRzO1xuICAgIGRpc3Bvc2VBbGwocHJvdmlkZXJzKTtcbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uY29tcGxldGlvbkl0ZW1zKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChcbiAgICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlcihcbiAgICAgICAgICBsYW5ndWFnZUlkLFxuICAgICAgICAgIG5ldyBDb21wbGV0aW9uQWRhcHRlcih3b3JrZXIsIFtcIi9cIiwgXCItXCIsIFwiOlwiXSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmhvdmVycykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckhvdmVyUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IEhvdmVyQWRhcHRlcih3b3JrZXIpKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmRvY3VtZW50SGlnaGxpZ2h0cykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIoXG4gICAgICAgICAgbGFuZ3VhZ2VJZCxcbiAgICAgICAgICBuZXcgRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyKHdvcmtlcilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmRlZmluaXRpb25zKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChcbiAgICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRGVmaW5pdGlvblByb3ZpZGVyKFxuICAgICAgICAgIGxhbmd1YWdlSWQsXG4gICAgICAgICAgbmV3IERlZmluaXRpb25BZGFwdGVyKHdvcmtlcilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLnJlZmVyZW5jZXMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKFxuICAgICAgICBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJSZWZlcmVuY2VQcm92aWRlcihcbiAgICAgICAgICBsYW5ndWFnZUlkLFxuICAgICAgICAgIG5ldyBSZWZlcmVuY2VBZGFwdGVyKHdvcmtlcilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmRvY3VtZW50U3ltYm9scykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50U3ltYm9sUHJvdmlkZXIoXG4gICAgICAgICAgbGFuZ3VhZ2VJZCxcbiAgICAgICAgICBuZXcgRG9jdW1lbnRTeW1ib2xBZGFwdGVyKHdvcmtlcilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLnJlbmFtZSkge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlclJlbmFtZVByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBSZW5hbWVBZGFwdGVyKHdvcmtlcikpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uY29sb3JzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChcbiAgICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyQ29sb3JQcm92aWRlcihcbiAgICAgICAgICBsYW5ndWFnZUlkLFxuICAgICAgICAgIG5ldyBEb2N1bWVudENvbG9yQWRhcHRlcih3b3JrZXIpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5mb2xkaW5nUmFuZ2VzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChcbiAgICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyRm9sZGluZ1JhbmdlUHJvdmlkZXIoXG4gICAgICAgICAgbGFuZ3VhZ2VJZCxcbiAgICAgICAgICBuZXcgRm9sZGluZ1JhbmdlQWRhcHRlcih3b3JrZXIpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5kaWFnbm9zdGljcykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG5ldyBEaWFnbm9zdGljc0FkYXB0ZXIobGFuZ3VhZ2VJZCwgd29ya2VyLCBkZWZhdWx0cy5vbkRpZENoYW5nZSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5zZWxlY3Rpb25SYW5nZXMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKFxuICAgICAgICBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJTZWxlY3Rpb25SYW5nZVByb3ZpZGVyKFxuICAgICAgICAgIGxhbmd1YWdlSWQsXG4gICAgICAgICAgbmV3IFNlbGVjdGlvblJhbmdlQWRhcHRlcih3b3JrZXIpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5kb2N1bWVudEZvcm1hdHRpbmdFZGl0cykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlcihcbiAgICAgICAgICBsYW5ndWFnZUlkLFxuICAgICAgICAgIG5ldyBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIod29ya2VyKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cykge1xuICAgICAgcHJvdmlkZXJzLnB1c2goXG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKFxuICAgICAgICAgIGxhbmd1YWdlSWQsXG4gICAgICAgICAgbmV3IERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKHdvcmtlcilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJQcm92aWRlcnMoKTtcbiAgZGlzcG9zYWJsZXMucHVzaChhc0Rpc3Bvc2FibGUocHJvdmlkZXJzKSk7XG4gIHJldHVybiBhc0Rpc3Bvc2FibGUoZGlzcG9zYWJsZXMpO1xufVxuZnVuY3Rpb24gYXNEaXNwb3NhYmxlKGRpc3Bvc2FibGVzKSB7XG4gIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IGRpc3Bvc2VBbGwoZGlzcG9zYWJsZXMpIH07XG59XG5mdW5jdGlvbiBkaXNwb3NlQWxsKGRpc3Bvc2FibGVzKSB7XG4gIHdoaWxlIChkaXNwb3NhYmxlcy5sZW5ndGgpIHtcbiAgICBkaXNwb3NhYmxlcy5wb3AoKS5kaXNwb3NlKCk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIENvbXBsZXRpb25BZGFwdGVyLFxuICBEZWZpbml0aW9uQWRhcHRlcixcbiAgRGlhZ25vc3RpY3NBZGFwdGVyLFxuICBEb2N1bWVudENvbG9yQWRhcHRlcixcbiAgRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyLFxuICBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIsXG4gIERvY3VtZW50TGlua0FkYXB0ZXIsXG4gIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyLFxuICBEb2N1bWVudFN5bWJvbEFkYXB0ZXIsXG4gIEZvbGRpbmdSYW5nZUFkYXB0ZXIsXG4gIEhvdmVyQWRhcHRlcixcbiAgUmVmZXJlbmNlQWRhcHRlcixcbiAgUmVuYW1lQWRhcHRlcixcbiAgU2VsZWN0aW9uUmFuZ2VBZGFwdGVyLFxuICBXb3JrZXJNYW5hZ2VyLFxuICBmcm9tUG9zaXRpb24sXG4gIGZyb21SYW5nZSxcbiAgc2V0dXBNb2RlLFxuICB0b1JhbmdlLFxuICB0b1RleHRFZGl0XG59O1xuIl0sIm5hbWVzIjpbInR0UG9saWN5IiwiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiZ2V0IiwiZW51bWVyYWJsZSIsIm1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzIiwic2VsZiIsImNvbnN0cnVjdG9yIiwibmFtZSIsImdsb2JhbFRoaXMiLCJ3b3JrZXJ0dFBvbGljeSIsInBvbGljeU5hbWUiLCJwb2xpY3lPcHRpb25zIiwibW9uYWNvRW52aXJvbm1lbnQiLCJNb25hY29FbnZpcm9ubWVudCIsImNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSIsImVyciIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZVNjcmlwdFVSTCIsInZhbHVlIiwiRG9jdW1lbnRVcmkiLCJVUkkiLCJpbnRlZ2VyIiwiaW50ZWdlcjIiLCJ1aW50ZWdlciIsInVpbnRlZ2VyMiIsIlBvc2l0aW9uIiwiUG9zaXRpb24zIiwiUmFuZ2UiLCJSYW5nZTMiLCJMb2NhdGlvbiIsIkxvY2F0aW9uMiIsIkxvY2F0aW9uTGluayIsIkxvY2F0aW9uTGluazIiLCJDb2xvciIsIkNvbG9yMiIsIkNvbG9ySW5mb3JtYXRpb24iLCJDb2xvckluZm9ybWF0aW9uMiIsIkNvbG9yUHJlc2VudGF0aW9uIiwiQ29sb3JQcmVzZW50YXRpb24yIiwiRm9sZGluZ1JhbmdlS2luZCIsIkZvbGRpbmdSYW5nZUtpbmQyIiwiRm9sZGluZ1JhbmdlIiwiRm9sZGluZ1JhbmdlMiIsIkRpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24iLCJEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uMiIsIkRpYWdub3N0aWNTZXZlcml0eSIsIkRpYWdub3N0aWNTZXZlcml0eTIiLCJEaWFnbm9zdGljVGFnIiwiRGlhZ25vc3RpY1RhZzIiLCJDb2RlRGVzY3JpcHRpb24iLCJEaWFnbm9zdGljIiwiRGlhZ25vc3RpYzIiLCJDb21tYW5kIiwiQ29tbWFuZDIiLCJUZXh0RWRpdCIsIlRleHRFZGl0MiIsIkNoYW5nZUFubm90YXRpb24iLCJDaGFuZ2VBbm5vdGF0aW9uMiIsIkNoYW5nZUFubm90YXRpb25JZGVudGlmaWVyIiwiQW5ub3RhdGVkVGV4dEVkaXQiLCJBbm5vdGF0ZWRUZXh0RWRpdDIiLCJUZXh0RG9jdW1lbnRFZGl0IiwiVGV4dERvY3VtZW50RWRpdDIiLCJDcmVhdGVGaWxlIiwiQ3JlYXRlRmlsZTIiLCJSZW5hbWVGaWxlIiwiUmVuYW1lRmlsZTIiLCJEZWxldGVGaWxlIiwiRGVsZXRlRmlsZTIiLCJXb3Jrc3BhY2VFZGl0IiwiVGV4dERvY3VtZW50SWRlbnRpZmllciIsIlRleHREb2N1bWVudElkZW50aWZpZXIyIiwiVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsIlZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyIiwiT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMiIsIlRleHREb2N1bWVudEl0ZW0iLCJUZXh0RG9jdW1lbnRJdGVtMiIsIk1hcmt1cEtpbmQiLCJNYXJrdXBLaW5kMiIsIk1hcmt1cENvbnRlbnQiLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJDb21wbGV0aW9uSXRlbUtpbmQyIiwiSW5zZXJ0VGV4dEZvcm1hdCIsIkluc2VydFRleHRGb3JtYXQyIiwiQ29tcGxldGlvbkl0ZW1UYWciLCJJbnNlcnRSZXBsYWNlRWRpdCIsIkluc2VydFJlcGxhY2VFZGl0MiIsIkluc2VydFRleHRNb2RlIiwiSW5zZXJ0VGV4dE1vZGUyIiwiQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMiLCJDb21wbGV0aW9uSXRlbSIsIkNvbXBsZXRpb25MaXN0IiwiTWFya2VkU3RyaW5nIiwiTWFya2VkU3RyaW5nMiIsIkhvdmVyIiwiUGFyYW1ldGVySW5mb3JtYXRpb24iLCJTaWduYXR1cmVJbmZvcm1hdGlvbiIsIkRvY3VtZW50SGlnaGxpZ2h0S2luZCIsIkRvY3VtZW50SGlnaGxpZ2h0S2luZDIiLCJEb2N1bWVudEhpZ2hsaWdodCIsIlN5bWJvbEtpbmQiLCJTeW1ib2xLaW5kMiIsIlN5bWJvbFRhZyIsIlN5bWJvbEluZm9ybWF0aW9uIiwiV29ya3NwYWNlU3ltYm9sIiwiRG9jdW1lbnRTeW1ib2wiLCJEb2N1bWVudFN5bWJvbDIiLCJDb2RlQWN0aW9uS2luZCIsIkNvZGVBY3Rpb25LaW5kMiIsIkNvZGVBY3Rpb25UcmlnZ2VyS2luZCIsIkNvZGVBY3Rpb25UcmlnZ2VyS2luZDIiLCJDb2RlQWN0aW9uQ29udGV4dCIsIkNvZGVBY3Rpb25Db250ZXh0MiIsIkNvZGVBY3Rpb24iLCJDb2RlQWN0aW9uMiIsIkNvZGVMZW5zIiwiQ29kZUxlbnMyIiwiRm9ybWF0dGluZ09wdGlvbnMiLCJGb3JtYXR0aW5nT3B0aW9uczIiLCJEb2N1bWVudExpbmsiLCJEb2N1bWVudExpbmsyIiwiU2VsZWN0aW9uUmFuZ2UiLCJTZWxlY3Rpb25SYW5nZTIiLCJTZW1hbnRpY1Rva2VuVHlwZXMiLCJTZW1hbnRpY1Rva2VuVHlwZXMyIiwiU2VtYW50aWNUb2tlbk1vZGlmaWVycyIsIlNlbWFudGljVG9rZW5Nb2RpZmllcnMyIiwiU2VtYW50aWNUb2tlbnMiLCJJbmxpbmVWYWx1ZVRleHQiLCJJbmxpbmVWYWx1ZVRleHQyIiwiSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCIsIklubGluZVZhbHVlVmFyaWFibGVMb29rdXAyIiwiSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24iLCJJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbjIiLCJJbmxpbmVWYWx1ZUNvbnRleHQiLCJJbmxpbmVWYWx1ZUNvbnRleHQyIiwiSW5sYXlIaW50S2luZCIsIklubGF5SGludEtpbmQyIiwiSW5sYXlIaW50TGFiZWxQYXJ0IiwiSW5sYXlIaW50TGFiZWxQYXJ0MiIsIklubGF5SGludCIsIklubGF5SGludDIiLCJTdHJpbmdWYWx1ZSIsIklubGluZUNvbXBsZXRpb25JdGVtIiwiSW5saW5lQ29tcGxldGlvbkxpc3QiLCJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQyIiwiU2VsZWN0ZWRDb21wbGV0aW9uSW5mbyIsIklubGluZUNvbXBsZXRpb25Db250ZXh0IiwiV29ya3NwYWNlRm9sZGVyIiwiVGV4dERvY3VtZW50IiwiV29ya2VyTWFuYWdlciIsImRlZmF1bHRzIiwidGhpcyIsIl9kZWZhdWx0cyIsIl93b3JrZXIiLCJfY2xpZW50IiwiX2lkbGVDaGVja0ludGVydmFsIiwid2luZG93Iiwic2V0SW50ZXJ2YWwiLCJfY2hlY2tJZklkbGUiLCJfbGFzdFVzZWRUaW1lIiwiX2NvbmZpZ0NoYW5nZUxpc3RlbmVyIiwib25EaWRDaGFuZ2UiLCJfc3RvcFdvcmtlciIsImRpc3Bvc2UiLCJjbGVhckludGVydmFsIiwiRGF0ZSIsIm5vdyIsIl9nZXRDbGllbnQiLCJvcHRzIiwid29ya2VyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkZXNjcmlwdG9yIiwibGFiZWwiLCJnZXRXb3JrZXIiLCJnZXRXb3JrZXJVcmwiLCJ3b3JrZXJVcmwiLCJXb3JrZXIiLCJ0eXBlIiwiRXJyb3IiLCJtb2R1bGVJZCIsInRoZW4iLCJ3IiwicG9zdE1lc3NhZ2UiLCJjcmVhdGVEYXRhIiwiZWRpdG9yIiwiY3JlYXRlV2ViV29ya2VyIiwiaG9zdCIsImtlZXBJZGxlTW9kZWxzIiwibGFuZ3VhZ2VJZCIsIm9wdGlvbnMiLCJnZXRQcm94eSIsImdldExhbmd1YWdlU2VydmljZVdvcmtlciIsInJlc291cmNlcyIsImNsaWVudCIsIl8iLCJ3aXRoU3luY2VkUmVzb3VyY2VzIiwiaXMiLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJjcmVhdGUiLCJsaW5lIiwiY2hhcmFjdGVyIiwiTnVtYmVyIiwiY2FuZGlkYXRlIiwiSXMiLCJvYmplY3RMaXRlcmFsIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic3RhcnQiLCJlbmQiLCJ1cmkiLCJyYW5nZSIsInN0cmluZyIsInVuZGVmaW5lZCIsInRhcmdldFVyaSIsInRhcmdldFJhbmdlIiwidGFyZ2V0U2VsZWN0aW9uUmFuZ2UiLCJvcmlnaW5TZWxlY3Rpb25SYW5nZSIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwibnVtYmVyUmFuZ2UiLCJjb2xvciIsInRleHRFZGl0IiwiYWRkaXRpb25hbFRleHRFZGl0cyIsInR5cGVkQXJyYXkiLCJDb21tZW50IiwiSW1wb3J0cyIsIlJlZ2lvbiIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzdGFydENoYXJhY3RlciIsImVuZENoYXJhY3RlciIsImtpbmQiLCJjb2xsYXBzZWRUZXh0IiwicmVzdWx0IiwiZGVmaW5lZCIsImxvY2F0aW9uIiwibWVzc2FnZSIsIldhcm5pbmciLCJJbmZvcm1hdGlvbiIsIkhpbnQiLCJVbm5lY2Vzc2FyeSIsIkRlcHJlY2F0ZWQiLCJocmVmIiwic2V2ZXJpdHkiLCJjb2RlIiwic291cmNlIiwicmVsYXRlZEluZm9ybWF0aW9uIiwiX2EiLCJudW1iZXIiLCJjb2RlRGVzY3JpcHRpb24iLCJ0aXRsZSIsImNvbW1hbmQiLCJhcmdzIiwibGVuZ3RoIiwiYXJndW1lbnRzIiwicmVwbGFjZSIsIm5ld1RleHQiLCJpbnNlcnQiLCJwb3NpdGlvbiIsImRlbCIsIm5lZWRzQ29uZmlybWF0aW9uIiwiZGVzY3JpcHRpb24iLCJib29sZWFuIiwiYW5ub3RhdGlvbiIsImFubm90YXRpb25JZCIsInRleHREb2N1bWVudCIsImVkaXRzIiwiQXJyYXkiLCJpc0FycmF5Iiwib3ZlcndyaXRlIiwiaWdub3JlSWZFeGlzdHMiLCJvbGRVcmkiLCJuZXdVcmkiLCJyZWN1cnNpdmUiLCJpZ25vcmVJZk5vdEV4aXN0cyIsImNoYW5nZXMiLCJkb2N1bWVudENoYW5nZXMiLCJldmVyeSIsImNoYW5nZSIsInZlcnNpb24iLCJ0ZXh0IiwiUGxhaW5UZXh0IiwiTWFya2Rvd24iLCJUZXh0IiwiTWV0aG9kIiwiRnVuY3Rpb24iLCJDb25zdHJ1Y3RvciIsIkZpZWxkIiwiVmFyaWFibGUiLCJDbGFzcyIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlByb3BlcnR5IiwiVW5pdCIsIlZhbHVlIiwiRW51bSIsIktleXdvcmQiLCJTbmlwcGV0IiwiRmlsZSIsIlJlZmVyZW5jZSIsIkZvbGRlciIsIkVudW1NZW1iZXIiLCJDb25zdGFudCIsIlN0cnVjdCIsIkV2ZW50IiwiT3BlcmF0b3IiLCJUeXBlUGFyYW1ldGVyIiwiYXNJcyIsImFkanVzdEluZGVudGF0aW9uIiwiZGV0YWlsIiwiaXRlbXMiLCJpc0luY29tcGxldGUiLCJmcm9tUGxhaW5UZXh0IiwicGxhaW5UZXh0IiwibGFuZ3VhZ2UiLCJjb250ZW50cyIsImRvY3VtZW50YXRpb24iLCJwYXJhbWV0ZXJzIiwiUmVhZCIsIldyaXRlIiwiTmFtZXNwYWNlIiwiUGFja2FnZSIsIlN0cmluZyIsIkJvb2xlYW4iLCJLZXkiLCJOdWxsIiwiY29udGFpbmVyTmFtZSIsInNlbGVjdGlvblJhbmdlIiwiY2hpbGRyZW4iLCJkZXByZWNhdGVkIiwidGFncyIsIkVtcHR5IiwiUXVpY2tGaXgiLCJSZWZhY3RvciIsIlJlZmFjdG9yRXh0cmFjdCIsIlJlZmFjdG9ySW5saW5lIiwiUmVmYWN0b3JSZXdyaXRlIiwiU291cmNlIiwiU291cmNlT3JnYW5pemVJbXBvcnRzIiwiU291cmNlRml4QWxsIiwiSW52b2tlZCIsIkF1dG9tYXRpYyIsImRpYWdub3N0aWNzIiwib25seSIsInRyaWdnZXJLaW5kIiwia2luZE9yQ29tbWFuZE9yRWRpdCIsImNoZWNrS2luZCIsImVkaXQiLCJpc1ByZWZlcnJlZCIsImRhdGEiLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwidGFyZ2V0IiwicGFyZW50IiwicmVzdWx0SWQiLCJ2YXJpYWJsZU5hbWUiLCJjYXNlU2Vuc2l0aXZlTG9va3VwIiwiZXhwcmVzc2lvbiIsImZyYW1lSWQiLCJzdG9wcGVkTG9jYXRpb24iLCJUeXBlIiwiUGFyYW1ldGVyIiwidG9vbHRpcCIsInRleHRFZGl0cyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiY3JlYXRlU25pcHBldCIsImluc2VydFRleHQiLCJmaWx0ZXJUZXh0Iiwic2VsZWN0ZWRDb21wbGV0aW9uSW5mbyIsIlRleHREb2N1bWVudDIiLCJtZXJnZVNvcnQiLCJjb21wYXJlIiwicCIsImxlZnQiLCJzbGljZSIsInJpZ2h0IiwibGVmdElkeCIsInJpZ2h0SWR4IiwiaSIsInJldCIsImNvbnRlbnQiLCJGdWxsVGV4dERvY3VtZW50IiwibGluZUNvdW50IiwiZnVuYyIsImdldFRleHQiLCJwb3NpdGlvbkF0Iiwib2Zmc2V0QXQiLCJhcHBseUVkaXRzIiwiZG9jdW1lbnQiLCJzb3J0ZWRFZGl0cyIsImEiLCJiIiwiZGlmZiIsImxhc3RNb2RpZmllZE9mZnNldCIsImUiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInN1YnN0cmluZyIsIl91cmkiLCJfbGFuZ3VhZ2VJZCIsIl92ZXJzaW9uIiwiX2NvbnRlbnQiLCJfbGluZU9mZnNldHMiLCJ1cGRhdGUiLCJldmVudCIsImdldExpbmVPZmZzZXRzIiwibGluZU9mZnNldHMiLCJpc0xpbmVTdGFydCIsInB1c2giLCJjaCIsImNoYXJBdCIsIm9mZnNldCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJsb3ciLCJoaWdoIiwibWlkIiwiZmxvb3IiLCJsaW5lT2Zmc2V0IiwibmV4dExpbmVPZmZzZXQiLCJJczIiLCJ0b1N0cmluZyIsImNoZWNrIiwiRGlhZ25vc3RpY3NBZGFwdGVyIiwiY29uZmlnQ2hhbmdlRXZlbnQiLCJfZGlzcG9zYWJsZXMiLCJfbGlzdGVuZXIiLCJvbk1vZGVsQWRkIiwibW9kZWwiLCJoYW5kbGUiLCJtb2RlSWQiLCJnZXRMYW5ndWFnZUlkIiwib25EaWRDaGFuZ2VDb250ZW50IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIl9kb1ZhbGlkYXRlIiwib25Nb2RlbFJlbW92ZWQiLCJzZXRNb2RlbE1hcmtlcnMiLCJ1cmlTdHIiLCJsaXN0ZW5lciIsIm9uRGlkQ3JlYXRlTW9kZWwiLCJvbldpbGxEaXNwb3NlTW9kZWwiLCJvbkRpZENoYW5nZU1vZGVsTGFuZ3VhZ2UiLCJnZXRNb2RlbHMiLCJmb3JFYWNoIiwiZCIsInJlc291cmNlIiwiZG9WYWxpZGF0aW9uIiwibWFya2VycyIsIm1hcCIsImRpYWciLCJ0b1NldmVyaXR5Iiwic3RhcnRMaW5lTnVtYmVyIiwic3RhcnRDb2x1bW4iLCJlbmRMaW5lTnVtYmVyIiwiZW5kQ29sdW1uIiwidG9EaWFnbm9zdGljcyIsImdldE1vZGVsIiwibHNTZXZlcml0eSIsIk1hcmtlclNldmVyaXR5IiwiSW5mbyIsIkNvbXBsZXRpb25BZGFwdGVyIiwiX3RyaWdnZXJDaGFyYWN0ZXJzIiwidHJpZ2dlckNoYXJhY3RlcnMiLCJwcm92aWRlQ29tcGxldGlvbkl0ZW1zIiwiY29udGV4dCIsInRva2VuIiwiZG9Db21wbGV0ZSIsImZyb21Qb3NpdGlvbiIsImluZm8iLCJ3b3JkSW5mbyIsImdldFdvcmRVbnRpbFBvc2l0aW9uIiwid29yZFJhbmdlIiwibGluZU51bWJlciIsImVudHJ5IiwiaXRlbSIsInNvcnRUZXh0IiwiYyIsImlkIiwidG9Db21wbGV0aW9uSXRlbUtpbmQiLCJ0b1JhbmdlIiwidG9UZXh0RWRpdCIsImluc2VydFRleHRGb3JtYXQiLCJpbnNlcnRUZXh0UnVsZXMiLCJsYW5ndWFnZXMiLCJDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIiwiSW5zZXJ0QXNTbmlwcGV0Iiwic3VnZ2VzdGlvbnMiLCJjb2x1bW4iLCJmcm9tUmFuZ2UiLCJtSXRlbUtpbmQiLCJIb3ZlckFkYXB0ZXIiLCJwcm92aWRlSG92ZXIiLCJkb0hvdmVyIiwidG9NYXJrZWRTdHJpbmdBcnJheSIsInRvTWFya2Rvd25TdHJpbmciLCJ0aGluZyIsIkRvY3VtZW50SGlnaGxpZ2h0QWRhcHRlciIsInByb3ZpZGVEb2N1bWVudEhpZ2hsaWdodHMiLCJmaW5kRG9jdW1lbnRIaWdobGlnaHRzIiwiZW50cmllcyIsInRvRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwiRGVmaW5pdGlvbkFkYXB0ZXIiLCJwcm92aWRlRGVmaW5pdGlvbiIsImZpbmREZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsInRvTG9jYXRpb24iLCJVcmkiLCJwYXJzZSIsIlJlZmVyZW5jZUFkYXB0ZXIiLCJwcm92aWRlUmVmZXJlbmNlcyIsImZpbmRSZWZlcmVuY2VzIiwiUmVuYW1lQWRhcHRlciIsInByb3ZpZGVSZW5hbWVFZGl0cyIsIm5ld05hbWUiLCJkb1JlbmFtZSIsInJlc291cmNlRWRpdHMiLCJ2ZXJzaW9uSWQiLCJ0b1dvcmtzcGFjZUVkaXQiLCJEb2N1bWVudFN5bWJvbEFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRTeW1ib2xzIiwiZmluZERvY3VtZW50U3ltYm9scyIsInRvRG9jdW1lbnRTeW1ib2wiLCJ0b1N5bWJvbEtpbmQiLCJzeW1ib2wiLCJtS2luZCIsIkRvY3VtZW50TGlua0FkYXB0ZXIiLCJwcm92aWRlTGlua3MiLCJmaW5kRG9jdW1lbnRMaW5rcyIsImxpbmtzIiwidXJsIiwiRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwicHJvdmlkZURvY3VtZW50Rm9ybWF0dGluZ0VkaXRzIiwiZm9ybWF0IiwiZnJvbUZvcm1hdHRpbmdPcHRpb25zIiwiRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJjYW5Gb3JtYXRNdWx0aXBsZVJhbmdlcyIsInByb3ZpZGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzIiwiRG9jdW1lbnRDb2xvckFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRDb2xvcnMiLCJmaW5kRG9jdW1lbnRDb2xvcnMiLCJpbmZvcyIsInByb3ZpZGVDb2xvclByZXNlbnRhdGlvbnMiLCJnZXRDb2xvclByZXNlbnRhdGlvbnMiLCJwcmVzZW50YXRpb25zIiwicHJlc2VudGF0aW9uIiwiRm9sZGluZ1JhbmdlQWRhcHRlciIsInByb3ZpZGVGb2xkaW5nUmFuZ2VzIiwiZ2V0Rm9sZGluZ1JhbmdlcyIsInJhbmdlcyIsInRvRm9sZGluZ1JhbmdlS2luZCIsIlNlbGVjdGlvblJhbmdlQWRhcHRlciIsInByb3ZpZGVTZWxlY3Rpb25SYW5nZXMiLCJwb3NpdGlvbnMiLCJnZXRTZWxlY3Rpb25SYW5nZXMiLCJzZWxlY3Rpb25SYW5nZXMiLCJzZXR1cE1vZGUiLCJkaXNwb3NhYmxlcyIsInByb3ZpZGVycyIsInVyaXMiLCJtb2RlQ29uZmlndXJhdGlvbiIsImRpc3Bvc2VBbGwiLCJjb21wbGV0aW9uSXRlbXMiLCJyZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIiLCJob3ZlcnMiLCJyZWdpc3RlckhvdmVyUHJvdmlkZXIiLCJkb2N1bWVudEhpZ2hsaWdodHMiLCJyZWdpc3RlckRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIiLCJkZWZpbml0aW9ucyIsInJlZ2lzdGVyRGVmaW5pdGlvblByb3ZpZGVyIiwicmVmZXJlbmNlcyIsInJlZ2lzdGVyUmVmZXJlbmNlUHJvdmlkZXIiLCJkb2N1bWVudFN5bWJvbHMiLCJyZWdpc3RlckRvY3VtZW50U3ltYm9sUHJvdmlkZXIiLCJyZW5hbWUiLCJyZWdpc3RlclJlbmFtZVByb3ZpZGVyIiwiY29sb3JzIiwicmVnaXN0ZXJDb2xvclByb3ZpZGVyIiwiZm9sZGluZ1JhbmdlcyIsInJlZ2lzdGVyRm9sZGluZ1JhbmdlUHJvdmlkZXIiLCJyZWdpc3RlclNlbGVjdGlvblJhbmdlUHJvdmlkZXIiLCJkb2N1bWVudEZvcm1hdHRpbmdFZGl0cyIsInJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwiZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyIsInJlZ2lzdGVyRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJyZWdpc3RlclByb3ZpZGVycyIsImFzRGlzcG9zYWJsZSIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=