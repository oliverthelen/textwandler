"use strict";
(self["webpackChunktext_wandler"] = self["webpackChunktext_wandler"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_sparql_sparql_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conf: () => (/* binding */ conf),
/* harmony export */   language: () => (/* binding */ language)
/* harmony export */ });
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/


// src/basic-languages/sparql/sparql.ts
var conf = {
  comments: {
    lineComment: "#"
  },
  brackets: [
    ["{", "}"],
    ["[", "]"],
    ["(", ")"]
  ],
  autoClosingPairs: [
    { open: "'", close: "'", notIn: ["string"] },
    { open: '"', close: '"', notIn: ["string"] },
    { open: "{", close: "}" },
    { open: "[", close: "]" },
    { open: "(", close: ")" }
  ]
};
var language = {
  defaultToken: "",
  tokenPostfix: ".rq",
  brackets: [
    { token: "delimiter.curly", open: "{", close: "}" },
    { token: "delimiter.parenthesis", open: "(", close: ")" },
    { token: "delimiter.square", open: "[", close: "]" },
    { token: "delimiter.angle", open: "<", close: ">" }
  ],
  keywords: [
    "add",
    "as",
    "asc",
    "ask",
    "base",
    "by",
    "clear",
    "construct",
    "copy",
    "create",
    "data",
    "delete",
    "desc",
    "describe",
    "distinct",
    "drop",
    "false",
    "filter",
    "from",
    "graph",
    "group",
    "having",
    "in",
    "insert",
    "limit",
    "load",
    "minus",
    "move",
    "named",
    "not",
    "offset",
    "optional",
    "order",
    "prefix",
    "reduced",
    "select",
    "service",
    "silent",
    "to",
    "true",
    "undef",
    "union",
    "using",
    "values",
    "where",
    "with"
  ],
  builtinFunctions: [
    "a",
    "abs",
    "avg",
    "bind",
    "bnode",
    "bound",
    "ceil",
    "coalesce",
    "concat",
    "contains",
    "count",
    "datatype",
    "day",
    "encode_for_uri",
    "exists",
    "floor",
    "group_concat",
    "hours",
    "if",
    "iri",
    "isblank",
    "isiri",
    "isliteral",
    "isnumeric",
    "isuri",
    "lang",
    "langmatches",
    "lcase",
    "max",
    "md5",
    "min",
    "minutes",
    "month",
    "now",
    "rand",
    "regex",
    "replace",
    "round",
    "sameterm",
    "sample",
    "seconds",
    "sha1",
    "sha256",
    "sha384",
    "sha512",
    "str",
    "strafter",
    "strbefore",
    "strdt",
    "strends",
    "strlang",
    "strlen",
    "strstarts",
    "struuid",
    "substr",
    "sum",
    "timezone",
    "tz",
    "ucase",
    "uri",
    "uuid",
    "year"
  ],
  // describe tokens
  ignoreCase: true,
  tokenizer: {
    root: [
      // resource indicators
      [/<[^\s\u00a0>]*>?/, "tag"],
      // strings
      { include: "@strings" },
      // line comment
      [/#.*/, "comment"],
      // special chars with special meaning
      [/[{}()\[\]]/, "@brackets"],
      [/[;,.]/, "delimiter"],
      // (prefixed) name
      [/[_\w\d]+:(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])*/, "tag"],
      [/:(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/, "tag"],
      // identifiers, builtinFunctions and keywords
      [
        /[$?]?[_\w\d]+/,
        {
          cases: {
            "@keywords": { token: "keyword" },
            "@builtinFunctions": { token: "predefined.sql" },
            "@default": "identifier"
          }
        }
      ],
      // operators
      [/\^\^/, "operator.sql"],
      [/\^[*+\-<>=&|^\/!?]*/, "operator.sql"],
      [/[*+\-<>=&|\/!?]/, "operator.sql"],
      // symbol
      [/@[a-z\d\-]*/, "metatag.html"],
      // whitespaces
      [/\s+/, "white"]
    ],
    strings: [
      [/'([^'\\]|\\.)*$/, "string.invalid"],
      // non-terminated single-quoted string
      [/'$/, "string.sql", "@pop"],
      [/'/, "string.sql", "@stringBody"],
      [/"([^"\\]|\\.)*$/, "string.invalid"],
      // non-terminated single-quoted string
      [/"$/, "string.sql", "@pop"],
      [/"/, "string.sql", "@dblStringBody"]
    ],
    // single-quoted strings
    stringBody: [
      [/[^\\']+/, "string.sql"],
      [/\\./, "string.escape"],
      [/'/, "string.sql", "@pop"]
    ],
    // double-quoted strings
    dblStringBody: [
      [/[^\\"]+/, "string.sql"],
      [/\\./, "string.escape"],
      [/"/, "string.sql", "@pop"]
    ]
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19zcGFycWxfc3BhcnFsX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEtBQUs7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sMENBQTBDO0FBQ2hELE1BQU0sMENBQTBDO0FBQ2hELE1BQU0sUUFBUSxZQUFZLEdBQUc7QUFDN0IsTUFBTSx1QkFBdUI7QUFDN0IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sa0NBQWtDLFlBQVksR0FBRztBQUN2RCxNQUFNLHVEQUF1RDtBQUM3RCxNQUFNLGtEQUFrRDtBQUN4RCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxQkFBcUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBLDhEQUE4RDtBQUM5RCxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixrQkFBa0I7QUFDN0MsbUNBQW1DLHlCQUF5QjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGV4dC13YW5kbGVyLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9zcGFycWwvc3BhcnFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFZlcnNpb246IDAuNDguMCgwMDM3YjEzZmI1ZDE4NmZkZjFlN2RmNTFhOTQxNmEyZGUyYjhjNjcwKVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21vbmFjby1lZGl0b3IvYmxvYi9tYWluL0xJQ0VOU0UudHh0XG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXG4vLyBzcmMvYmFzaWMtbGFuZ3VhZ2VzL3NwYXJxbC9zcGFycWwudHNcbnZhciBjb25mID0ge1xuICBjb21tZW50czoge1xuICAgIGxpbmVDb21tZW50OiBcIiNcIlxuICB9LFxuICBicmFja2V0czogW1xuICAgIFtcIntcIiwgXCJ9XCJdLFxuICAgIFtcIltcIiwgXCJdXCJdLFxuICAgIFtcIihcIiwgXCIpXCJdXG4gIF0sXG4gIGF1dG9DbG9zaW5nUGFpcnM6IFtcbiAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIsIG5vdEluOiBbXCJzdHJpbmdcIl0gfSxcbiAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInLCBub3RJbjogW1wic3RyaW5nXCJdIH0sXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiIH0sXG4gICAgeyBvcGVuOiBcIltcIiwgY2xvc2U6IFwiXVwiIH0sXG4gICAgeyBvcGVuOiBcIihcIiwgY2xvc2U6IFwiKVwiIH1cbiAgXVxufTtcbnZhciBsYW5ndWFnZSA9IHtcbiAgZGVmYXVsdFRva2VuOiBcIlwiLFxuICB0b2tlblBvc3RmaXg6IFwiLnJxXCIsXG4gIGJyYWNrZXRzOiBbXG4gICAgeyB0b2tlbjogXCJkZWxpbWl0ZXIuY3VybHlcIiwgb3BlbjogXCJ7XCIsIGNsb3NlOiBcIn1cIiB9LFxuICAgIHsgdG9rZW46IFwiZGVsaW1pdGVyLnBhcmVudGhlc2lzXCIsIG9wZW46IFwiKFwiLCBjbG9zZTogXCIpXCIgfSxcbiAgICB7IHRva2VuOiBcImRlbGltaXRlci5zcXVhcmVcIiwgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiB9LFxuICAgIHsgdG9rZW46IFwiZGVsaW1pdGVyLmFuZ2xlXCIsIG9wZW46IFwiPFwiLCBjbG9zZTogXCI+XCIgfVxuICBdLFxuICBrZXl3b3JkczogW1xuICAgIFwiYWRkXCIsXG4gICAgXCJhc1wiLFxuICAgIFwiYXNjXCIsXG4gICAgXCJhc2tcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJ5XCIsXG4gICAgXCJjbGVhclwiLFxuICAgIFwiY29uc3RydWN0XCIsXG4gICAgXCJjb3B5XCIsXG4gICAgXCJjcmVhdGVcIixcbiAgICBcImRhdGFcIixcbiAgICBcImRlbGV0ZVwiLFxuICAgIFwiZGVzY1wiLFxuICAgIFwiZGVzY3JpYmVcIixcbiAgICBcImRpc3RpbmN0XCIsXG4gICAgXCJkcm9wXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJmcm9tXCIsXG4gICAgXCJncmFwaFwiLFxuICAgIFwiZ3JvdXBcIixcbiAgICBcImhhdmluZ1wiLFxuICAgIFwiaW5cIixcbiAgICBcImluc2VydFwiLFxuICAgIFwibGltaXRcIixcbiAgICBcImxvYWRcIixcbiAgICBcIm1pbnVzXCIsXG4gICAgXCJtb3ZlXCIsXG4gICAgXCJuYW1lZFwiLFxuICAgIFwibm90XCIsXG4gICAgXCJvZmZzZXRcIixcbiAgICBcIm9wdGlvbmFsXCIsXG4gICAgXCJvcmRlclwiLFxuICAgIFwicHJlZml4XCIsXG4gICAgXCJyZWR1Y2VkXCIsXG4gICAgXCJzZWxlY3RcIixcbiAgICBcInNlcnZpY2VcIixcbiAgICBcInNpbGVudFwiLFxuICAgIFwidG9cIixcbiAgICBcInRydWVcIixcbiAgICBcInVuZGVmXCIsXG4gICAgXCJ1bmlvblwiLFxuICAgIFwidXNpbmdcIixcbiAgICBcInZhbHVlc1wiLFxuICAgIFwid2hlcmVcIixcbiAgICBcIndpdGhcIlxuICBdLFxuICBidWlsdGluRnVuY3Rpb25zOiBbXG4gICAgXCJhXCIsXG4gICAgXCJhYnNcIixcbiAgICBcImF2Z1wiLFxuICAgIFwiYmluZFwiLFxuICAgIFwiYm5vZGVcIixcbiAgICBcImJvdW5kXCIsXG4gICAgXCJjZWlsXCIsXG4gICAgXCJjb2FsZXNjZVwiLFxuICAgIFwiY29uY2F0XCIsXG4gICAgXCJjb250YWluc1wiLFxuICAgIFwiY291bnRcIixcbiAgICBcImRhdGF0eXBlXCIsXG4gICAgXCJkYXlcIixcbiAgICBcImVuY29kZV9mb3JfdXJpXCIsXG4gICAgXCJleGlzdHNcIixcbiAgICBcImZsb29yXCIsXG4gICAgXCJncm91cF9jb25jYXRcIixcbiAgICBcImhvdXJzXCIsXG4gICAgXCJpZlwiLFxuICAgIFwiaXJpXCIsXG4gICAgXCJpc2JsYW5rXCIsXG4gICAgXCJpc2lyaVwiLFxuICAgIFwiaXNsaXRlcmFsXCIsXG4gICAgXCJpc251bWVyaWNcIixcbiAgICBcImlzdXJpXCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJsYW5nbWF0Y2hlc1wiLFxuICAgIFwibGNhc2VcIixcbiAgICBcIm1heFwiLFxuICAgIFwibWQ1XCIsXG4gICAgXCJtaW5cIixcbiAgICBcIm1pbnV0ZXNcIixcbiAgICBcIm1vbnRoXCIsXG4gICAgXCJub3dcIixcbiAgICBcInJhbmRcIixcbiAgICBcInJlZ2V4XCIsXG4gICAgXCJyZXBsYWNlXCIsXG4gICAgXCJyb3VuZFwiLFxuICAgIFwic2FtZXRlcm1cIixcbiAgICBcInNhbXBsZVwiLFxuICAgIFwic2Vjb25kc1wiLFxuICAgIFwic2hhMVwiLFxuICAgIFwic2hhMjU2XCIsXG4gICAgXCJzaGEzODRcIixcbiAgICBcInNoYTUxMlwiLFxuICAgIFwic3RyXCIsXG4gICAgXCJzdHJhZnRlclwiLFxuICAgIFwic3RyYmVmb3JlXCIsXG4gICAgXCJzdHJkdFwiLFxuICAgIFwic3RyZW5kc1wiLFxuICAgIFwic3RybGFuZ1wiLFxuICAgIFwic3RybGVuXCIsXG4gICAgXCJzdHJzdGFydHNcIixcbiAgICBcInN0cnV1aWRcIixcbiAgICBcInN1YnN0clwiLFxuICAgIFwic3VtXCIsXG4gICAgXCJ0aW1lem9uZVwiLFxuICAgIFwidHpcIixcbiAgICBcInVjYXNlXCIsXG4gICAgXCJ1cmlcIixcbiAgICBcInV1aWRcIixcbiAgICBcInllYXJcIlxuICBdLFxuICAvLyBkZXNjcmliZSB0b2tlbnNcbiAgaWdub3JlQ2FzZTogdHJ1ZSxcbiAgdG9rZW5pemVyOiB7XG4gICAgcm9vdDogW1xuICAgICAgLy8gcmVzb3VyY2UgaW5kaWNhdG9yc1xuICAgICAgWy88W15cXHNcXHUwMGEwPl0qPj8vLCBcInRhZ1wiXSxcbiAgICAgIC8vIHN0cmluZ3NcbiAgICAgIHsgaW5jbHVkZTogXCJAc3RyaW5nc1wiIH0sXG4gICAgICAvLyBsaW5lIGNvbW1lbnRcbiAgICAgIFsvIy4qLywgXCJjb21tZW50XCJdLFxuICAgICAgLy8gc3BlY2lhbCBjaGFycyB3aXRoIHNwZWNpYWwgbWVhbmluZ1xuICAgICAgWy9be30oKVxcW1xcXV0vLCBcIkBicmFja2V0c1wiXSxcbiAgICAgIFsvWzssLl0vLCBcImRlbGltaXRlclwiXSxcbiAgICAgIC8vIChwcmVmaXhlZCkgbmFtZVxuICAgICAgWy9bX1xcd1xcZF0rOihcXC4oPz1bXFx3X1xcLVxcXFwlXSl8WzpcXHdfLV18XFxcXFstXFxcXF9+LiEkJicoKSorLDs9Lz8jQCVdfCVbYS1mXFxkXVthLWZcXGRdKSovLCBcInRhZ1wiXSxcbiAgICAgIFsvOihcXC4oPz1bXFx3X1xcLVxcXFwlXSl8WzpcXHdfLV18XFxcXFstXFxcXF9+LiEkJicoKSorLDs9Lz8jQCVdfCVbYS1mXFxkXVthLWZcXGRdKSsvLCBcInRhZ1wiXSxcbiAgICAgIC8vIGlkZW50aWZpZXJzLCBidWlsdGluRnVuY3Rpb25zIGFuZCBrZXl3b3Jkc1xuICAgICAgW1xuICAgICAgICAvWyQ/XT9bX1xcd1xcZF0rLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBrZXl3b3Jkc1wiOiB7IHRva2VuOiBcImtleXdvcmRcIiB9LFxuICAgICAgICAgICAgXCJAYnVpbHRpbkZ1bmN0aW9uc1wiOiB7IHRva2VuOiBcInByZWRlZmluZWQuc3FsXCIgfSxcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJpZGVudGlmaWVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICAvLyBvcGVyYXRvcnNcbiAgICAgIFsvXFxeXFxeLywgXCJvcGVyYXRvci5zcWxcIl0sXG4gICAgICBbL1xcXlsqK1xcLTw+PSZ8XlxcLyE/XSovLCBcIm9wZXJhdG9yLnNxbFwiXSxcbiAgICAgIFsvWyorXFwtPD49JnxcXC8hP10vLCBcIm9wZXJhdG9yLnNxbFwiXSxcbiAgICAgIC8vIHN5bWJvbFxuICAgICAgWy9AW2EtelxcZFxcLV0qLywgXCJtZXRhdGFnLmh0bWxcIl0sXG4gICAgICAvLyB3aGl0ZXNwYWNlc1xuICAgICAgWy9cXHMrLywgXCJ3aGl0ZVwiXVxuICAgIF0sXG4gICAgc3RyaW5nczogW1xuICAgICAgWy8nKFteJ1xcXFxdfFxcXFwuKSokLywgXCJzdHJpbmcuaW52YWxpZFwiXSxcbiAgICAgIC8vIG5vbi10ZXJtaW5hdGVkIHNpbmdsZS1xdW90ZWQgc3RyaW5nXG4gICAgICBbLyckLywgXCJzdHJpbmcuc3FsXCIsIFwiQHBvcFwiXSxcbiAgICAgIFsvJy8sIFwic3RyaW5nLnNxbFwiLCBcIkBzdHJpbmdCb2R5XCJdLFxuICAgICAgWy9cIihbXlwiXFxcXF18XFxcXC4pKiQvLCBcInN0cmluZy5pbnZhbGlkXCJdLFxuICAgICAgLy8gbm9uLXRlcm1pbmF0ZWQgc2luZ2xlLXF1b3RlZCBzdHJpbmdcbiAgICAgIFsvXCIkLywgXCJzdHJpbmcuc3FsXCIsIFwiQHBvcFwiXSxcbiAgICAgIFsvXCIvLCBcInN0cmluZy5zcWxcIiwgXCJAZGJsU3RyaW5nQm9keVwiXVxuICAgIF0sXG4gICAgLy8gc2luZ2xlLXF1b3RlZCBzdHJpbmdzXG4gICAgc3RyaW5nQm9keTogW1xuICAgICAgWy9bXlxcXFwnXSsvLCBcInN0cmluZy5zcWxcIl0sXG4gICAgICBbL1xcXFwuLywgXCJzdHJpbmcuZXNjYXBlXCJdLFxuICAgICAgWy8nLywgXCJzdHJpbmcuc3FsXCIsIFwiQHBvcFwiXVxuICAgIF0sXG4gICAgLy8gZG91YmxlLXF1b3RlZCBzdHJpbmdzXG4gICAgZGJsU3RyaW5nQm9keTogW1xuICAgICAgWy9bXlxcXFxcIl0rLywgXCJzdHJpbmcuc3FsXCJdLFxuICAgICAgWy9cXFxcLi8sIFwic3RyaW5nLmVzY2FwZVwiXSxcbiAgICAgIFsvXCIvLCBcInN0cmluZy5zcWxcIiwgXCJAcG9wXCJdXG4gICAgXVxuICB9XG59O1xuZXhwb3J0IHtcbiAgY29uZixcbiAgbGFuZ3VhZ2Vcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=