"use strict";(self.webpackChunktextWandler=self.webpackChunktextWandler||[]).push([[2077],{72077:(e,t,n)=>{n.r(t),n.d(t,{CompletionAdapter:()=>Ot,DefinitionAdapter:()=>Jt,DiagnosticsAdapter:()=>Wt,DocumentColorAdapter:()=>dn,DocumentFormattingEditProvider:()=>sn,DocumentHighlightAdapter:()=>Qt,DocumentLinkAdapter:()=>an,DocumentRangeFormattingEditProvider:()=>un,DocumentSymbolAdapter:()=>nn,FoldingRangeAdapter:()=>ln,HoverAdapter:()=>Bt,ReferenceAdapter:()=>en,RenameAdapter:()=>tn,SelectionRangeAdapter:()=>gn,WorkerManager:()=>jt,fromPosition:()=>Ht,fromRange:()=>Kt,setupMode:()=>hn,setupMode1:()=>mn,toRange:()=>Xt,toTextEdit:()=>$t});var r,i=n(34732),o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of s(t))u.call(e,i)||i===n||o(e,i,{get:()=>t[i],enumerable:!(r=a(t,i))||r.enumerable});return e},d={};c(d,i,"default"),r="object"==typeof self&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name&&void 0!==globalThis.workerttPolicy?globalThis.workerttPolicy:function(e,t){const n=globalThis.MonacoEnvironment;if(n?.createTrustedTypesPolicy)try{return n.createTrustedTypesPolicy(e,t)}catch(e){return}try{return globalThis.trustedTypes?.createPolicy(e,t)}catch(e){return}}("defaultWorkerFactory",{createScriptURL:e=>e});var l,g,f,m,h,p,v,b,k,w,y,_,x,I,E,S,A,C,R,L,T,M,P,D,F,j,N,U,W,V,O,H,K,X,z,$,B,q,G,Q,Y,J,Z,ee,te,ne,re,ie,oe,ae,se,ue,ce,de,le,ge,fe,me,he,pe,ve,be,ke,we,ye,_e,xe,Ie,Ee,Se,Ae,Ce,Re,Le,Te,Me,Pe,De,Fe,je,Ne,Ue,We,Ve,Oe,He,Ke,Xe,ze,$e,Be,qe,Ge,Qe,Ye,Je,Ze,et,tt,nt,rt,it,ot,at,st,ut,ct,dt,lt,gt,ft,mt,ht,pt,vt,bt,kt,wt,yt,_t,xt,It,Et,St,At,Ct,Rt,Lt,Tt,Mt,Pt,Dt,Ft,jt=class{constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){this._worker&&Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=function(e){const t=Promise.resolve(function(e){const t=e.label,n=globalThis.MonacoEnvironment;if(n){if("function"==typeof n.getWorker)return n.getWorker("workerMain.js",t);if("function"==typeof n.getWorkerUrl){const e=n.getWorkerUrl("workerMain.js",t);return new Worker(r?r.createScriptURL(e):e,{name:t,type:"module"})}}throw new Error("You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker")}({label:e.label??"monaco-editor-worker",moduleId:e.moduleId})).then((t=>(t.postMessage("ignore"),t.postMessage(e.createData),t)));return d.editor.createWebWorker({worker:t,host:e.host,keepIdleModels:e.keepIdleModels})}({moduleId:"vs/language/html/htmlWorker",createData:{languageSettings:this._defaults.options,languageId:this._defaults.languageId},label:this._defaults.languageId}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(l||(l={})).is=function(e){return"string"==typeof e},(g||(g={})).is=function(e){return"string"==typeof e},(m=f||(f={})).MIN_VALUE=-2147483648,m.MAX_VALUE=2147483647,m.is=function(e){return"number"==typeof e&&m.MIN_VALUE<=e&&e<=m.MAX_VALUE},(p=h||(h={})).MIN_VALUE=0,p.MAX_VALUE=2147483647,p.is=function(e){return"number"==typeof e&&p.MIN_VALUE<=e&&e<=p.MAX_VALUE},(b=v||(v={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=h.MAX_VALUE),t===Number.MAX_VALUE&&(t=h.MAX_VALUE),{line:e,character:t}},b.is=function(e){let t=e;return Nt.objectLiteral(t)&&Nt.uinteger(t.line)&&Nt.uinteger(t.character)},(w=k||(k={})).create=function(e,t,n,r){if(Nt.uinteger(e)&&Nt.uinteger(t)&&Nt.uinteger(n)&&Nt.uinteger(r))return{start:v.create(e,t),end:v.create(n,r)};if(v.is(e)&&v.is(t))return{start:e,end:t};throw new Error(`Range#create called with invalid arguments[${e}, ${t}, ${n}, ${r}]`)},w.is=function(e){let t=e;return Nt.objectLiteral(t)&&v.is(t.start)&&v.is(t.end)},(_=y||(y={})).create=function(e,t){return{uri:e,range:t}},_.is=function(e){let t=e;return Nt.objectLiteral(t)&&k.is(t.range)&&(Nt.string(t.uri)||Nt.undefined(t.uri))},(I=x||(x={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},I.is=function(e){let t=e;return Nt.objectLiteral(t)&&k.is(t.targetRange)&&Nt.string(t.targetUri)&&k.is(t.targetSelectionRange)&&(k.is(t.originSelectionRange)||Nt.undefined(t.originSelectionRange))},(S=E||(E={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},S.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.numberRange(t.red,0,1)&&Nt.numberRange(t.green,0,1)&&Nt.numberRange(t.blue,0,1)&&Nt.numberRange(t.alpha,0,1)},(C=A||(A={})).create=function(e,t){return{range:e,color:t}},C.is=function(e){const t=e;return Nt.objectLiteral(t)&&k.is(t.range)&&E.is(t.color)},(L=R||(R={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},L.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.label)&&(Nt.undefined(t.textEdit)||$.is(t))&&(Nt.undefined(t.additionalTextEdits)||Nt.typedArray(t.additionalTextEdits,$.is))},(M=T||(T={})).Comment="comment",M.Imports="imports",M.Region="region",(D=P||(P={})).create=function(e,t,n,r,i,o){const a={startLine:e,endLine:t};return Nt.defined(n)&&(a.startCharacter=n),Nt.defined(r)&&(a.endCharacter=r),Nt.defined(i)&&(a.kind=i),Nt.defined(o)&&(a.collapsedText=o),a},D.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.uinteger(t.startLine)&&Nt.uinteger(t.startLine)&&(Nt.undefined(t.startCharacter)||Nt.uinteger(t.startCharacter))&&(Nt.undefined(t.endCharacter)||Nt.uinteger(t.endCharacter))&&(Nt.undefined(t.kind)||Nt.string(t.kind))},(j=F||(F={})).create=function(e,t){return{location:e,message:t}},j.is=function(e){let t=e;return Nt.defined(t)&&y.is(t.location)&&Nt.string(t.message)},(U=N||(N={})).Error=1,U.Warning=2,U.Information=3,U.Hint=4,(V=W||(W={})).Unnecessary=1,V.Deprecated=2,(O||(O={})).is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.href)},(K=H||(H={})).create=function(e,t,n,r,i,o){let a={range:e,message:t};return Nt.defined(n)&&(a.severity=n),Nt.defined(r)&&(a.code=r),Nt.defined(i)&&(a.source=i),Nt.defined(o)&&(a.relatedInformation=o),a},K.is=function(e){var t;let n=e;return Nt.defined(n)&&k.is(n.range)&&Nt.string(n.message)&&(Nt.number(n.severity)||Nt.undefined(n.severity))&&(Nt.integer(n.code)||Nt.string(n.code)||Nt.undefined(n.code))&&(Nt.undefined(n.codeDescription)||Nt.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(Nt.string(n.source)||Nt.undefined(n.source))&&(Nt.undefined(n.relatedInformation)||Nt.typedArray(n.relatedInformation,F.is))},(z=X||(X={})).create=function(e,t,...n){let r={title:e,command:t};return Nt.defined(n)&&n.length>0&&(r.arguments=n),r},z.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.title)&&Nt.string(t.command)},(B=$||($={})).replace=function(e,t){return{range:e,newText:t}},B.insert=function(e,t){return{range:{start:e,end:e},newText:t}},B.del=function(e){return{range:e,newText:""}},B.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.newText)&&k.is(t.range)},(G=q||(q={})).create=function(e,t,n){const r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},G.is=function(e){const t=e;return Nt.objectLiteral(t)&&Nt.string(t.label)&&(Nt.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(Nt.string(t.description)||void 0===t.description)},(Q||(Q={})).is=function(e){const t=e;return Nt.string(t)},(J=Y||(Y={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},J.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},J.del=function(e,t){return{range:e,newText:"",annotationId:t}},J.is=function(e){const t=e;return $.is(t)&&(q.is(t.annotationId)||Q.is(t.annotationId))},(ee=Z||(Z={})).create=function(e,t){return{textDocument:e,edits:t}},ee.is=function(e){let t=e;return Nt.defined(t)&&ge.is(t.textDocument)&&Array.isArray(t.edits)},(ne=te||(te={})).create=function(e,t,n){let r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ne.is=function(e){let t=e;return t&&"create"===t.kind&&Nt.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||Nt.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Nt.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(ie=re||(re={})).create=function(e,t,n,r){let i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},ie.is=function(e){let t=e;return t&&"rename"===t.kind&&Nt.string(t.oldUri)&&Nt.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||Nt.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||Nt.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(ae=oe||(oe={})).create=function(e,t,n){let r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},ae.is=function(e){let t=e;return t&&"delete"===t.kind&&Nt.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||Nt.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||Nt.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||Q.is(t.annotationId))},(se||(se={})).is=function(e){let t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((e=>Nt.string(e.kind)?te.is(e)||re.is(e)||oe.is(e):Z.is(e))))},(ce=ue||(ue={})).create=function(e){return{uri:e}},ce.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)},(le=de||(de={})).create=function(e,t){return{uri:e,version:t}},le.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)&&Nt.integer(t.version)},(fe=ge||(ge={})).create=function(e,t){return{uri:e,version:t}},fe.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)&&(null===t.version||Nt.integer(t.version))},(he=me||(me={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},he.is=function(e){let t=e;return Nt.defined(t)&&Nt.string(t.uri)&&Nt.string(t.languageId)&&Nt.integer(t.version)&&Nt.string(t.text)},(ve=pe||(pe={})).PlainText="plaintext",ve.Markdown="markdown",ve.is=function(e){const t=e;return t===ve.PlainText||t===ve.Markdown},(be||(be={})).is=function(e){const t=e;return Nt.objectLiteral(e)&&pe.is(t.kind)&&Nt.string(t.value)},(we=ke||(ke={})).Text=1,we.Method=2,we.Function=3,we.Constructor=4,we.Field=5,we.Variable=6,we.Class=7,we.Interface=8,we.Module=9,we.Property=10,we.Unit=11,we.Value=12,we.Enum=13,we.Keyword=14,we.Snippet=15,we.Color=16,we.File=17,we.Reference=18,we.Folder=19,we.EnumMember=20,we.Constant=21,we.Struct=22,we.Event=23,we.Operator=24,we.TypeParameter=25,(_e=ye||(ye={})).PlainText=1,_e.Snippet=2,(xe||(xe={})).Deprecated=1,(Ee=Ie||(Ie={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},Ee.is=function(e){const t=e;return t&&Nt.string(t.newText)&&k.is(t.insert)&&k.is(t.replace)},(Ae=Se||(Se={})).asIs=1,Ae.adjustIndentation=2,(Ce||(Ce={})).is=function(e){const t=e;return t&&(Nt.string(t.detail)||void 0===t.detail)&&(Nt.string(t.description)||void 0===t.description)},(Re||(Re={})).create=function(e){return{label:e}},(Le||(Le={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Me=Te||(Te={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Me.is=function(e){const t=e;return Nt.string(t)||Nt.objectLiteral(t)&&Nt.string(t.language)&&Nt.string(t.value)},(Pe||(Pe={})).is=function(e){let t=e;return!!t&&Nt.objectLiteral(t)&&(be.is(t.contents)||Te.is(t.contents)||Nt.typedArray(t.contents,Te.is))&&(void 0===e.range||k.is(e.range))},(De||(De={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(Fe||(Fe={})).create=function(e,t,...n){let r={label:e};return Nt.defined(t)&&(r.documentation=t),Nt.defined(n)?r.parameters=n:r.parameters=[],r},(Ne=je||(je={})).Text=1,Ne.Read=2,Ne.Write=3,(Ue||(Ue={})).create=function(e,t){let n={range:e};return Nt.number(t)&&(n.kind=t),n},(Ve=We||(We={})).File=1,Ve.Module=2,Ve.Namespace=3,Ve.Package=4,Ve.Class=5,Ve.Method=6,Ve.Property=7,Ve.Field=8,Ve.Constructor=9,Ve.Enum=10,Ve.Interface=11,Ve.Function=12,Ve.Variable=13,Ve.Constant=14,Ve.String=15,Ve.Number=16,Ve.Boolean=17,Ve.Array=18,Ve.Object=19,Ve.Key=20,Ve.Null=21,Ve.EnumMember=22,Ve.Struct=23,Ve.Event=24,Ve.Operator=25,Ve.TypeParameter=26,(Oe||(Oe={})).Deprecated=1,(He||(He={})).create=function(e,t,n,r,i){let o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(Ke||(Ke={})).create=function(e,t,n,r){return void 0!==r?{name:e,kind:t,location:{uri:n,range:r}}:{name:e,kind:t,location:{uri:n}}},(ze=Xe||(Xe={})).create=function(e,t,n,r,i,o){let a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},ze.is=function(e){let t=e;return t&&Nt.string(t.name)&&Nt.number(t.kind)&&k.is(t.range)&&k.is(t.selectionRange)&&(void 0===t.detail||Nt.string(t.detail))&&(void 0===t.deprecated||Nt.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},(Be=$e||($e={})).Empty="",Be.QuickFix="quickfix",Be.Refactor="refactor",Be.RefactorExtract="refactor.extract",Be.RefactorInline="refactor.inline",Be.RefactorRewrite="refactor.rewrite",Be.Source="source",Be.SourceOrganizeImports="source.organizeImports",Be.SourceFixAll="source.fixAll",(Ge=qe||(qe={})).Invoked=1,Ge.Automatic=2,(Ye=Qe||(Qe={})).create=function(e,t,n){let r={diagnostics:e};return null!=t&&(r.only=t),null!=n&&(r.triggerKind=n),r},Ye.is=function(e){let t=e;return Nt.defined(t)&&Nt.typedArray(t.diagnostics,H.is)&&(void 0===t.only||Nt.typedArray(t.only,Nt.string))&&(void 0===t.triggerKind||t.triggerKind===qe.Invoked||t.triggerKind===qe.Automatic)},(Ze=Je||(Je={})).create=function(e,t,n){let r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):X.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},Ze.is=function(e){let t=e;return t&&Nt.string(t.title)&&(void 0===t.diagnostics||Nt.typedArray(t.diagnostics,H.is))&&(void 0===t.kind||Nt.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||X.is(t.command))&&(void 0===t.isPreferred||Nt.boolean(t.isPreferred))&&(void 0===t.edit||se.is(t.edit))},(tt=et||(et={})).create=function(e,t){let n={range:e};return Nt.defined(t)&&(n.data=t),n},tt.is=function(e){let t=e;return Nt.defined(t)&&k.is(t.range)&&(Nt.undefined(t.command)||X.is(t.command))},(rt=nt||(nt={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},rt.is=function(e){let t=e;return Nt.defined(t)&&Nt.uinteger(t.tabSize)&&Nt.boolean(t.insertSpaces)},(ot=it||(it={})).create=function(e,t,n){return{range:e,target:t,data:n}},ot.is=function(e){let t=e;return Nt.defined(t)&&k.is(t.range)&&(Nt.undefined(t.target)||Nt.string(t.target))},(st=at||(at={})).create=function(e,t){return{range:e,parent:t}},st.is=function(e){let t=e;return Nt.objectLiteral(t)&&k.is(t.range)&&(void 0===t.parent||st.is(t.parent))},(ct=ut||(ut={})).namespace="namespace",ct.type="type",ct.class="class",ct.enum="enum",ct.interface="interface",ct.struct="struct",ct.typeParameter="typeParameter",ct.parameter="parameter",ct.variable="variable",ct.property="property",ct.enumMember="enumMember",ct.event="event",ct.function="function",ct.method="method",ct.macro="macro",ct.keyword="keyword",ct.modifier="modifier",ct.comment="comment",ct.string="string",ct.number="number",ct.regexp="regexp",ct.operator="operator",ct.decorator="decorator",(lt=dt||(dt={})).declaration="declaration",lt.definition="definition",lt.readonly="readonly",lt.static="static",lt.deprecated="deprecated",lt.abstract="abstract",lt.async="async",lt.modification="modification",lt.documentation="documentation",lt.defaultLibrary="defaultLibrary",(gt||(gt={})).is=function(e){const t=e;return Nt.objectLiteral(t)&&(void 0===t.resultId||"string"==typeof t.resultId)&&Array.isArray(t.data)&&(0===t.data.length||"number"==typeof t.data[0])},(mt=ft||(ft={})).create=function(e,t){return{range:e,text:t}},mt.is=function(e){const t=e;return null!=t&&k.is(t.range)&&Nt.string(t.text)},(pt=ht||(ht={})).create=function(e,t,n){return{range:e,variableName:t,caseSensitiveLookup:n}},pt.is=function(e){const t=e;return null!=t&&k.is(t.range)&&Nt.boolean(t.caseSensitiveLookup)&&(Nt.string(t.variableName)||void 0===t.variableName)},(bt=vt||(vt={})).create=function(e,t){return{range:e,expression:t}},bt.is=function(e){const t=e;return null!=t&&k.is(t.range)&&(Nt.string(t.expression)||void 0===t.expression)},(wt=kt||(kt={})).create=function(e,t){return{frameId:e,stoppedLocation:t}},wt.is=function(e){const t=e;return Nt.defined(t)&&k.is(e.stoppedLocation)},(_t=yt||(yt={})).Type=1,_t.Parameter=2,_t.is=function(e){return 1===e||2===e},(It=xt||(xt={})).create=function(e){return{value:e}},It.is=function(e){const t=e;return Nt.objectLiteral(t)&&(void 0===t.tooltip||Nt.string(t.tooltip)||be.is(t.tooltip))&&(void 0===t.location||y.is(t.location))&&(void 0===t.command||X.is(t.command))},(St=Et||(Et={})).create=function(e,t,n){const r={position:e,label:t};return void 0!==n&&(r.kind=n),r},St.is=function(e){const t=e;return Nt.objectLiteral(t)&&v.is(t.position)&&(Nt.string(t.label)||Nt.typedArray(t.label,xt.is))&&(void 0===t.kind||yt.is(t.kind))&&void 0===t.textEdits||Nt.typedArray(t.textEdits,$.is)&&(void 0===t.tooltip||Nt.string(t.tooltip)||be.is(t.tooltip))&&(void 0===t.paddingLeft||Nt.boolean(t.paddingLeft))&&(void 0===t.paddingRight||Nt.boolean(t.paddingRight))},(At||(At={})).createSnippet=function(e){return{kind:"snippet",value:e}},(Ct||(Ct={})).create=function(e,t,n,r){return{insertText:e,filterText:t,range:n,command:r}},(Rt||(Rt={})).create=function(e){return{items:e}},(Tt=Lt||(Lt={})).Invoked=0,Tt.Automatic=1,(Mt||(Mt={})).create=function(e,t){return{range:e,text:t}},(Pt||(Pt={})).create=function(e,t){return{triggerKind:e,selectedCompletionInfo:t}},(Dt||(Dt={})).is=function(e){const t=e;return Nt.objectLiteral(t)&&g.is(t.uri)&&Nt.string(t.name)},function(e){function t(e,n){if(e.length<=1)return e;const r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);let a=0,s=0,u=0;for(;a<i.length&&s<o.length;){let t=n(i[a],o[s]);e[u++]=t<=0?i[a++]:o[s++]}for(;a<i.length;)e[u++]=i[a++];for(;s<o.length;)e[u++]=o[s++];return e}e.create=function(e,t,n,r){return new Ut(e,t,n,r)},e.is=function(e){let t=e;return!!(Nt.defined(t)&&Nt.string(t.uri)&&(Nt.undefined(t.languageId)||Nt.string(t.languageId))&&Nt.uinteger(t.lineCount)&&Nt.func(t.getText)&&Nt.func(t.positionAt)&&Nt.func(t.offsetAt))},e.applyEdits=function(e,n){let r=e.getText(),i=t(n,((e,t)=>{let n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length;for(let t=i.length-1;t>=0;t--){let n=i[t],a=e.offsetAt(n.range.start),s=e.offsetAt(n.range.end);if(!(s<=o))throw new Error("Overlapping edit");r=r.substring(0,a)+n.newText+r.substring(s,r.length),o=a}return r}}(Ft||(Ft={}));var Nt,Ut=class{constructor(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}get uri(){return this._uri}get languageId(){return this._languageId}get version(){return this._version}getText(e){if(e){let t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content}update(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0}getLineOffsets(){if(void 0===this._lineOffsets){let e=[],t=this._content,n=!0;for(let r=0;r<t.length;r++){n&&(e.push(r),n=!1);let i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets}positionAt(e){e=Math.max(Math.min(e,this._content.length),0);let t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return v.create(0,e);for(;n<r;){let i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}let i=n-1;return v.create(i,e-t[i])}offsetAt(e){let t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;let n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)}get lineCount(){return this.getLineOffsets().length}};!function(e){const t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.numberRange=function(e,n,r){return"[object Number]"===t.call(e)&&n<=e&&e<=r},e.integer=function(e){return"[object Number]"===t.call(e)&&-2147483648<=e&&e<=2147483647},e.uinteger=function(e){return"[object Number]"===t.call(e)&&0<=e&&e<=2147483647},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(Nt||(Nt={}));var Wt=class{constructor(e,t,n){this._languageId=e,this._worker=t,this._disposables=[],this._listener=Object.create(null);const r=e=>{let t,n=e.getLanguageId();n===this._languageId&&(this._listener[e.uri.toString()]=e.onDidChangeContent((()=>{window.clearTimeout(t),t=window.setTimeout((()=>this._doValidate(e.uri,n)),500)})),this._doValidate(e.uri,n))},i=e=>{d.editor.setModelMarkers(e,this._languageId,[]);let t=e.uri.toString(),n=this._listener[t];n&&(n.dispose(),delete this._listener[t])};this._disposables.push(d.editor.onDidCreateModel(r)),this._disposables.push(d.editor.onWillDisposeModel(i)),this._disposables.push(d.editor.onDidChangeModelLanguage((e=>{i(e.model),r(e.model)}))),this._disposables.push(n((e=>{d.editor.getModels().forEach((e=>{e.getLanguageId()===this._languageId&&(i(e),r(e))}))}))),this._disposables.push({dispose:()=>{d.editor.getModels().forEach(i);for(let e in this._listener)this._listener[e].dispose()}}),d.editor.getModels().forEach(r)}dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables.length=0}_doValidate(e,t){this._worker(e).then((t=>t.doValidation(e.toString()))).then((n=>{const r=n.map((e=>function(e,t){let n="number"==typeof t.code?String(t.code):t.code;return{severity:Vt(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)));let i=d.editor.getModel(e);i&&i.getLanguageId()===t&&d.editor.setModelMarkers(i,t,r)})).then(void 0,(e=>{}))}};function Vt(e){switch(e){case N.Error:return d.MarkerSeverity.Error;case N.Warning:return d.MarkerSeverity.Warning;case N.Information:return d.MarkerSeverity.Info;case N.Hint:return d.MarkerSeverity.Hint;default:return d.MarkerSeverity.Info}}var Ot=class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),Ht(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new d.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:zt(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:Xt(e.textEdit.insert),replace:Xt(e.textEdit.replace)}:t.range=Xt(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map($t)),e.insertTextFormat===ye.Snippet&&(t.insertTextRules=d.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}};function Ht(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function Kt(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function Xt(e){if(e)return new d.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function zt(e){const t=d.languages.CompletionItemKind;switch(e){case ke.Text:return t.Text;case ke.Method:return t.Method;case ke.Function:return t.Function;case ke.Constructor:return t.Constructor;case ke.Field:return t.Field;case ke.Variable:return t.Variable;case ke.Class:return t.Class;case ke.Interface:return t.Interface;case ke.Module:return t.Module;case ke.Property:return t.Property;case ke.Unit:return t.Unit;case ke.Value:return t.Value;case ke.Enum:return t.Enum;case ke.Keyword:return t.Keyword;case ke.Snippet:return t.Snippet;case ke.Color:return t.Color;case ke.File:return t.File;case ke.Reference:return t.Reference}return t.Property}function $t(e){if(e)return{range:Xt(e.range),text:e.newText}}var Bt=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),Ht(t)))).then((e=>{if(e)return{range:Xt(e.range),contents:Gt(e.contents)}}))}};function qt(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function Gt(e){if(e)return Array.isArray(e)?e.map(qt):[qt(e)]}var Qt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),Ht(t)))).then((e=>{if(e)return e.map((e=>({range:Xt(e.range),kind:Yt(e.kind)})))}))}};function Yt(e){switch(e){case je.Read:return d.languages.DocumentHighlightKind.Read;case je.Write:return d.languages.DocumentHighlightKind.Write;case je.Text:return d.languages.DocumentHighlightKind.Text}return d.languages.DocumentHighlightKind.Text}var Jt=class{constructor(e){this._worker=e}provideDefinition(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDefinition(r.toString(),Ht(t)))).then((e=>{if(e)return[Zt(e)]}))}};function Zt(e){return{uri:d.Uri.parse(e.uri),range:Xt(e.range)}}var en=class{constructor(e){this._worker=e}provideReferences(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.findReferences(i.toString(),Ht(t)))).then((e=>{if(e)return e.map(Zt)}))}},tn=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),Ht(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=d.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,versionId:void 0,textEdit:{range:Xt(i.range),text:i.newText}})}return{edits:t}}(e)))}},nn=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>"children"in e?rn(e):{name:e.name,detail:"",containerName:e.containerName,kind:on(e.kind),range:Xt(e.location.range),selectionRange:Xt(e.location.range),tags:[]}))}))}};function rn(e){return{name:e.name,detail:e.detail??"",kind:on(e.kind),range:Xt(e.range),selectionRange:Xt(e.selectionRange),tags:e.tags??[],children:(e.children??[]).map((e=>rn(e)))}}function on(e){let t=d.languages.SymbolKind;switch(e){case We.File:return t.File;case We.Module:return t.Module;case We.Namespace:return t.Namespace;case We.Package:return t.Package;case We.Class:return t.Class;case We.Method:return t.Method;case We.Property:return t.Property;case We.Field:return t.Field;case We.Constructor:return t.Constructor;case We.Enum:return t.Enum;case We.Interface:return t.Interface;case We.Function:return t.Function;case We.Variable:return t.Variable;case We.Constant:return t.Constant;case We.String:return t.String;case We.Number:return t.Number;case We.Boolean:return t.Boolean;case We.Array:return t.Array}return t.Function}var an=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:Xt(e.range),url:e.target})))}}))}},sn=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,cn(t)).then((e=>{if(e&&0!==e.length)return e.map($t)}))))}},un=class{constructor(e){this._worker=e,this.canFormatMultipleRanges=!1}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),Kt(t),cn(n)).then((e=>{if(e&&0!==e.length)return e.map($t)}))))}};function cn(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var dn=class{constructor(e){this._worker=e}provideDocumentColors(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentColors(n.toString()))).then((e=>{if(e)return e.map((e=>({color:e.color,range:Xt(e.range)})))}))}provideColorPresentations(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getColorPresentations(r.toString(),t.color,Kt(t.range)))).then((e=>{if(e)return e.map((e=>{let t={label:e.label};return e.textEdit&&(t.textEdit=$t(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map($t)),t}))}))}},ln=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case T.Comment:return d.languages.FoldingRangeKind.Comment;case T.Imports:return d.languages.FoldingRangeKind.Imports;case T.Region:return d.languages.FoldingRangeKind.Region}}(e.kind)),t}))}))}},gn=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(Ht)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:Xt(e.range)}),e=e.parent;return t}))}))}},fn=class extends Ot{constructor(e){super(e,[".",":","<",'"',"=","/"])}};function mn(e){const t=new jt(e),n=(...e)=>t.getLanguageServiceWorker(...e);let r=e.languageId;d.languages.registerCompletionItemProvider(r,new fn(n)),d.languages.registerHoverProvider(r,new Bt(n)),d.languages.registerDocumentHighlightProvider(r,new Qt(n)),d.languages.registerLinkProvider(r,new an(n)),d.languages.registerFoldingRangeProvider(r,new ln(n)),d.languages.registerDocumentSymbolProvider(r,new nn(n)),d.languages.registerSelectionRangeProvider(r,new gn(n)),d.languages.registerRenameProvider(r,new tn(n)),"html"===r&&(d.languages.registerDocumentFormattingEditProvider(r,new sn(n)),d.languages.registerDocumentRangeFormattingEditProvider(r,new un(n)))}function hn(e){const t=[],n=[],r=new jt(e);t.push(r);const i=(...e)=>r.getLanguageServiceWorker(...e);return function(){const{languageId:t,modeConfiguration:r}=e;vn(n),r.completionItems&&n.push(d.languages.registerCompletionItemProvider(t,new fn(i))),r.hovers&&n.push(d.languages.registerHoverProvider(t,new Bt(i))),r.documentHighlights&&n.push(d.languages.registerDocumentHighlightProvider(t,new Qt(i))),r.links&&n.push(d.languages.registerLinkProvider(t,new an(i))),r.documentSymbols&&n.push(d.languages.registerDocumentSymbolProvider(t,new nn(i))),r.rename&&n.push(d.languages.registerRenameProvider(t,new tn(i))),r.foldingRanges&&n.push(d.languages.registerFoldingRangeProvider(t,new ln(i))),r.selectionRanges&&n.push(d.languages.registerSelectionRangeProvider(t,new gn(i))),r.documentFormattingEdits&&n.push(d.languages.registerDocumentFormattingEditProvider(t,new sn(i))),r.documentRangeFormattingEdits&&n.push(d.languages.registerDocumentRangeFormattingEditProvider(t,new un(i)))}(),t.push(pn(n)),pn(t)}function pn(e){return{dispose:()=>vn(e)}}function vn(e){for(;e.length;)e.pop().dispose()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,