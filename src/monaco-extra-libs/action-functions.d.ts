/**
 * Filters out lines from the output of the previous action if the given callback returns true for a line
 * @param {CallbackFilterLine} callback The provided callback will be called for every line that comes from the previous action
 * @returns void
 */
declare function filterLine(callback: typeof CallbackFilterLine): void;

/**
 * Callback that will be called with the content of every line and its corresponding number in the text.
 * If the callback returns true the line will not be given to the next action in the pipeline.
 * @param {string} lineContent The content of the line as a String
 * @param {number} lineNumber The number of the line in the text output of the previous action
 * @returns boolean
 */
declare function CallbackFilterLine(
    lineContent: string,
    lineNumber: number
): boolean;

/**
 * Parses the output of the previous action to a json object and gives it to the provided callback
 * @param {CallbackJsonParse} callback The provided callback will be called with the json object parsed from the output of the previous action
 * @param {number} [indentation=2] The indentation that is used to stringify the json object
 * @returns void
 */
declare function jsonParse(
    callback: typeof CallbackJsonParse,
    indentation?: number
): void;

/**
 * Callback that will be called with the parsed json from the output of the previous action.
 * The resulting object will be automatically given to an instance of the JsonStringify action
 * @param {Record<string, unknown>} json A json object parsed from the output of the previous action
 * @returns Record<string, unknown>
 */
declare function CallbackJsonParse(
    json: Record<string, unknown>
): Record<string, unknown>;

/**
 * Parses the output from the previous action as a json object and stringifies it
 * @param {number} [indentation=2] The indentation that is used to stringify the json object
 * @returns void
 */
declare function jsonStringify(indentation?: number): void;

/**
 * Reduces all lines into a new string
 * @param {CallbackReduce} callback The provided callback will be called for every line that comes from the previous action
 * @param {any} [initialValue=""] Initial value that will be given as the result value for the first call of the callback
 * @returns void
 */
declare function reduce(
    callback: typeof CallbackReduce,
    initialValue?: any
): void;

/**
 * Callback that will be called with the content of every
 * @param {any} result The result of the previous reduce step
 * @param {string} currentLine The content of the line as a String
 * @param {number} currentLineNumber The number of the line in the text output of the previous action
 * @param {string[]} inputLinesArray The original array of lines output by the previous action
 * @returns any
 */
declare function CallbackReduce(
    result: any,
    currentLine: string,
    currentLineNumber: number,
    inputLinesArray: string[]
): any;

/**
 * Replaces the output of the previous action with a new string that is generated by the callback
 * @param {CallbackSetValue} callback The provided callback will be with the whole text that the previous action returned
 * @returns void
 */
declare function setValue(callback: typeof CallbackSetValue): void;

/**
 * Callback that will be called with the text that the previous action returned. The output that the next action receives
 * will be the result of this function as a single string
 * @param {string} input The whole text that was returned by the previous action
 * @returns string
 */
declare function CallbackSetValue(input: string): string;

/**
 * Transforms all lines by replacing each line with the result of the callback
 * @param {CallbackTransformLine} callback The provided callback will be called for every line that comes from the previous action
 * @returns void
 */
declare function transformLine(callback: typeof CallbackTransformLine): void;

/**
 * Callback that will be called with the content of every line and its corresponding number in the text.
 * The lineContent of the original line will be replaced by the output of this function
 * @param {string} lineContent The content of the line as a String
 * @param {number} lineNumber The number of the line in the text output of the previous action
 * @returns string
 */
declare function CallbackTransformLine(
    lineContent: string,
    lineNumber: number
): string;

/**
 * Filters all lines and leaves only unique ones as a result for the next stage
 * @returns void
 */
declare function unique(): void;

declare interface TextwandlerFunctions {
    filterLine: typeof filterLine;
    jsonParse: typeof jsonParse;
    jsonStringify: typeof jsonStringify;
    reduce: typeof reduce;
    setValue: typeof setValue;
    transformLine: typeof transformLine;
    unique: typeof unique;
}

/**
 * Textwandler wrapper
 */
declare const textwandler: TextwandlerFunctions;

/**
 * Textwandler wrapper
 */
declare const tw: TextwandlerFunctions;
